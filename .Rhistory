expect_equal(expected$log_z, observed$log_z)
expect_equal(expected$log_z_var, observed$log_z_var)
})
test_that("compute_integral delivers expected results", {
expected <- readRDS(test_path("./compute_integral_test.rds"))
observed <- compute_integral(expected$log_lik, expected$log_vol)
expect_equal(expected$log_wt, observed$log_weight)
expect_equal(expected$log_z, observed$log_z)
expect_equal(expected$log_z_var, observed$log_z_var)
expect_equal(expected$h, observed$h)
})
test_that("compute_integral delivers expected results", {
expected <- readRDS(test_path("./compute_integral_test.rds"))
observed <- compute_integral(expected$log_lik, expected$log_vol)
expect_equal(expected$log_wt, observed$log_weight)
expect_equal(expected$log_z, observed$log_z)
expect_equal(expected$log_z_var, observed$log_z_var)
expect_equal(expected$h, observed$information)
})
is.unsorted(c(1,2,3))
is.unsorted(c(3,2,1))
is.unsorted(c(1,2))
is.unsorted(c(2, 1))
is.unsorted(c(1,2,3))
c(-0.5, -0.75)
c(-0.5, -0.75) |> is.unsorted()
rev(c(-0.5, -0.75)) |> is.unsorted()
?is.unsorted
?seq
diag(rep(1, length.out = 3))
?det
document()
is.unsorted(c(1,2,3,4))
is.unsorted(c(1,2,2,4))
is.unsorted(c(1,2,2,1))
is.unsorted(c(1,2,4,2))
test_that("Propose_MCMC works for different likelihood values", {
gauss <- make_gaussian(2)
sampler <- rw_cube()
sampler <- update_sampler(
sampler,
log_lik = gauss$log_lik,
prior_transform = gauss$prior_transform,
num_dim = gauss$prior_transform$dim
)
propose_live(sampler, c(0.386993, 0.956451), -300)
propose_live(sampler, c(0.386993 0.956451), -50)
propose_live(sampler, c(0.386993, 0.956451), -50)
test_that("Propose_MCMC works for different likelihood values", {
gauss <- make_gaussian(2)
sampler <- rw_cube()
sampler <- update_sampler(
sampler,
log_lik = gauss$log_lik,
prior_transform = gauss$prior_transform,
num_dim = gauss$prior_transform$dim
)
propose_live(sampler, c(0.386993, 0.956451), -300)
propose_live(sampler, c(0.386993, 0.956451), -50)
})
test_that("rw_cube function returns correct object", {
sampler <- rw_cube()
expect_s3_class(sampler, "rw_cube")
expect_s3_class(sampler, "ernest_sampler")
})
test_that("rw_cube function handles max_attempts correctly", {
expect_error(rw_cube(steps = 0), "`steps` must be a whole number larger than or equal to 1, not the number 0.")
expect_error(rw_cube(epsilon = 0))
})
test_that("update_sampler.rw_cube function refreshes sampler", {
sampler <- rw_cube()
sampler <- update_sampler(sampler, num_dim = 5)
expect_s3_class(sampler, "rw_cube")
expect_equal(sampler$num_dim, 5)
expect_equal(sampler$steps, 20)
refreshed_sampler <- refresh_sampler.rw_cube(sampler)
expect_s3_class(refreshed_sampler, "rw_cube")
expect_equal(refreshed_sampler$epsilon, sampler$epsilon)
})
test_that("Random seeding works for propose_live()", {
flat <- make_flat(2)
sampler <- rw_cube()
sampler <- update_sampler(
sampler,
log_lik = flat$log_lik,
prior_transform = flat$prior_transform,
num_dim = flat$prior_transform$dim
)
seed_values <- matrix(runif(1000 * 2), nrow = 1000, ncol = 2)
mat_a <- matrix(nrow = 1000, ncol = 2)
set.seed(667)
for (i in 1:1000) {
mat_a[i, ] <- propose_live(sampler, seed_values[i,], 0)$unit
}
mat_b <- matrix(nrow = 1000, ncol = 2)
set.seed(667)
for (i in 1:1000) {
mat_b[i, ] <- propose_live(sampler, seed_values[i,], 0)$unit
}
expect_identical(mat_a, mat_b)
expect_equal(colMeans(mat_a), c(0.5, 0.5), tolerance = 1/12)
expect_equal(colSums(mat_a < 0), c(0, 0))
expect_equal(colSums(mat_a > 1), c(0, 0))
})
# A completely flat likelihood and prior distribution
make_flat <- function(num_dim) {
list(
log_lik = function(x) 0,
prior_transform = prior_transform(\(x) x, num_dim, LETTERS[1:num_dim])
)
}
# An N-D Gaussian Distribution with Zero Mean and Given Correlation
make_gaussian <- function(num_dim, corr = 0.95) {
mean <- seq(-1, 1, length.out = num_dim)
sigma <- diag(rep(1, length.out = num_dim))
sigma[sigma == 0] <- corr
precision <- solve(sigma)
log_norm <- -0.5 * (log(2 * pi) * num_dim + log(det(sigma)))
list(
log_lik = function(x) -0.5 * ((x - mean) %*% precision %*% (x - mean)) + log_norm,
prior_transform = prior_transform(
\(x) qunif(x, -10, 10),
num_dim,
LETTERS[1:num_dim]
)
)
}
test_that("Random seeding works for propose_live()", {
flat <- make_flat(2)
sampler <- rw_cube()
sampler <- update_sampler(
sampler,
log_lik = flat$log_lik,
prior_transform = flat$prior_transform,
num_dim = flat$prior_transform$dim
)
seed_values <- matrix(runif(1000 * 2), nrow = 1000, ncol = 2)
mat_a <- matrix(nrow = 1000, ncol = 2)
set.seed(667)
for (i in 1:1000) {
mat_a[i, ] <- propose_live(sampler, seed_values[i,], 0)$unit
}
mat_b <- matrix(nrow = 1000, ncol = 2)
set.seed(667)
for (i in 1:1000) {
mat_b[i, ] <- propose_live(sampler, seed_values[i,], 0)$unit
}
expect_identical(mat_a, mat_b)
expect_equal(colMeans(mat_a), c(0.5, 0.5), tolerance = 1/12)
expect_equal(colSums(mat_a < 0), c(0, 0))
expect_equal(colSums(mat_a > 1), c(0, 0))
})
test_that("Random seeding works for propose_live()", {
flat <- make_flat(2)
sampler <- rw_cube()
sampler <- update_sampler(
sampler,
log_lik = flat$log_lik,
prior_transform = flat$prior_transform,
num_dim = flat$prior_transform$dim
)
print(class(sampler))
# seed_values <- matrix(runif(1000 * 2), nrow = 1000, ncol = 2)
#
# mat_a <- matrix(nrow = 1000, ncol = 2)
# set.seed(667)
# for (i in 1:1000) {
#   mat_a[i, ] <- propose_live(sampler, seed_values[i,], 0)$unit
# }
#
# mat_b <- matrix(nrow = 1000, ncol = 2)
# set.seed(667)
# for (i in 1:1000) {
#   mat_b[i, ] <- propose_live(sampler, seed_values[i,], 0)$unit
# }
#
# expect_identical(mat_a, mat_b)
# expect_equal(colMeans(mat_a), c(0.5, 0.5), tolerance = 1/12)
# expect_equal(colSums(mat_a < 0), c(0, 0))
# expect_equal(colSums(mat_a > 1), c(0, 0))
})
document()
test_that("Random seeding works for propose_live()", {
flat <- make_flat(2)
sampler <- rw_cube()
sampler <- update_sampler(
sampler,
log_lik = flat$log_lik,
prior_transform = flat$prior_transform,
num_dim = flat$prior_transform$dim
)
print(class(sampler))
# seed_values <- matrix(runif(1000 * 2), nrow = 1000, ncol = 2)
#
# mat_a <- matrix(nrow = 1000, ncol = 2)
# set.seed(667)
# for (i in 1:1000) {
#   mat_a[i, ] <- propose_live(sampler, seed_values[i,], 0)$unit
# }
#
# mat_b <- matrix(nrow = 1000, ncol = 2)
# set.seed(667)
# for (i in 1:1000) {
#   mat_b[i, ] <- propose_live(sampler, seed_values[i,], 0)$unit
# }
#
# expect_identical(mat_a, mat_b)
# expect_equal(colMeans(mat_a), c(0.5, 0.5), tolerance = 1/12)
# expect_equal(colSums(mat_a < 0), c(0, 0))
# expect_equal(colSums(mat_a > 1), c(0, 0))
})
test_that("Random seeding works for propose_live()", {
flat <- make_flat(2)
sampler <- rw_cube()
sampler <- update_sampler(
sampler,
log_lik = flat$log_lik,
prior_transform = flat$prior_transform,
num_dim = flat$prior_transform$dim
)
print(class(sampler))
seed_values <- matrix(runif(1000 * 2), nrow = 1000, ncol = 2)
mat_a <- matrix(nrow = 1000, ncol = 2)
set.seed(667)
for (i in 1:1000) {
mat_a[i, ] <- propose_live(sampler, seed_values[i,], 0)$unit
}
#
# mat_b <- matrix(nrow = 1000, ncol = 2)
# set.seed(667)
# for (i in 1:1000) {
#   mat_b[i, ] <- propose_live(sampler, seed_values[i,], 0)$unit
# }
#
# expect_identical(mat_a, mat_b)
# expect_equal(colMeans(mat_a), c(0.5, 0.5), tolerance = 1/12)
# expect_equal(colSums(mat_a < 0), c(0, 0))
# expect_equal(colSums(mat_a > 1), c(0, 0))
})
test_that("Random seeding works for propose_live()", {
flat <- make_flat(2)
sampler <- rw_cube()
sampler <- update_sampler(
sampler,
log_lik = flat$log_lik,
prior_transform = flat$prior_transform,
num_dim = flat$prior_transform$dim
)
seed_values <- matrix(runif(1000 * 2), nrow = 1000, ncol = 2)
mat_a <- matrix(nrow = 1000, ncol = 2)
set.seed(667)
for (i in 1:1000) {
mat_a[i, ] <- propose_live(sampler, seed_values[i,], 0)$unit
}
mat_b <- matrix(nrow = 1000, ncol = 2)
set.seed(667)
for (i in 1:1000) {
mat_b[i, ] <- propose_live(sampler, seed_values[i,], 0)$unit
}
expect_identical(mat_a, mat_b)
expect_equal(colMeans(mat_a), c(0.5, 0.5), tolerance = 1/12)
expect_equal(colSums(mat_a < 0), c(0, 0))
expect_equal(colSums(mat_a > 1), c(0, 0))
})
document()
compileAttributes()
test_that("2D Gaussian Likelihood", {
gauss <- make_gaussian(2)
result <- nested_sampling(
gauss$log_lik,
prior = gauss$prior_transform,
num_live = 50,
max_iter = 1000,
verbose = TRUE
)
result |> print()
tail(result$progress) |> print()
result |> summary() |> print()
})
qunif(c(0.35, 0.83), min = -10, max = 10)
qunif(c(0.3523895, 0.6551475), -10, 10)
qunif(0.6551475, -10, 10)
qunif(c(0.87196626, 0.03745728), -10, 10)
qunif(c(0.388468, 0.12035), -10, 10)
qunif(c(1, 0.0879401), -10, 10)
qunif(c(0.986083, 0.300704) -10, 10)
qunif(c(0.986083, 0.300704), -10, 10)
qunif(c(0, 0.300704), -10, 10)
qunif(0L, -10, 10)
qunif(0L, -10., 10.)
qunif(0.986, -10, 10)
qunif(0.172729009423102, -10, 10)
qunif(c(0.172729009423102, 1) -10, 10)
qunif(c(0.172729009423102, 1), -10, 10)
qunif(c(0, 0), -10, 10)
qunif(c(0.9850693, 0.1388218), -10, 10)
trns <- \(x) qunif(x, -10, 10)
trns(0.446075, 0.396685)
trns(c(0.446075, 0.396685))
trns <- \(...) qunif(c(...), -10, 10)
trns(0.446075, 0.396685)
trns(0.4833534, 0.3110041)
trns(0.4503126, 0.3741723)
trns(0.3145153, 0.5145324)
trns(0.0000000, 0.5049997)
trns(0.1750101, 0.5554228)
trns(0.1012584, 0.6343239)
trns(0.01222979, 0.58468859)
trns(0.9765404, 0.6276094)
trns(0.7292981, 0.5492620)
?cli_progress_bar
2 * -log(2 * 10)
3 * -log(2 * 10)
make_gaussian(1)
as_tibble_col
?as_tibble_col
?expect_equal
-19.202552 + 1.315624
-15.907743 + 1.220246
2.995732/3.079684
5.991465/6.208565
8.987197/9.506276
-17.97439/-19.202552
?expect_lte()
1.9 % 1
1.9 %% 1
install.packages("dqrng")
library(devtools)
-2.29 % 2
-2.29 %% 2
-0.81 %% 2
-0.81 %% 1
-0.81 %% 1
0.81 %% 1
--1.85163 %% 1
-1.85163 %% 1
-1.85163 %% 2
qunif(c(0.9882026, -0.43047))
qunif(c(0.9882026, 0.43047))
qunif(c(0.9882026, 0.43047), -10, 10)
# An N-D Gaussian Distribution with Zero Mean and Given Correlation
make_gaussian <- function(num_dim, corr = 0.95) {
mean <- seq(-1, 1, length.out = num_dim)
sigma <- diag(rep(1, length.out = num_dim))
sigma[sigma == 0] <- corr
precision <- solve(sigma)
log_norm <- -0.5 * (log(2 * pi) * num_dim + log(det(sigma)))
logz_truth <- num_dim * -log(2 * 10)
list(
log_lik = function(x) -0.5 * ((x - mean) %*% precision %*% (x - mean)) + log_norm,
prior_transform = prior_transform(
\(x) qunif(x, -10, 10),
num_dim,
LETTERS[1:num_dim]
),
logz_truth = logz_truth
)
}
tst <- make_gaussian(2)
# An N-D Gaussian Distribution with Zero Mean and Given Correlation
make_gaussian <- function(num_dim, corr = 0.95) {
mean <- seq(-1, 1, length.out = num_dim)
sigma <- diag(rep(1, length.out = num_dim))
sigma[sigma == 0] <- corr
precision <- solve(sigma)
log_norm <- -0.5 * (log(2 * pi) * num_dim + log(det(sigma)))
logz_truth <- num_dim * -log(2 * 10)
list(
log_lik = function(x) -0.5 * ((x - mean) %*% precision %*% (x - mean)) + log_norm,
prior_transform = prior_transform(
\(x) qunif(x, -10, 10),
num_dim,
LETTERS[1:num_dim]
),
logz_truth = logz_truth
)
}
tst <- make_gaussian(2)
tst$log_lik(c(0.1278965, -7.2111473))
tst$log_lik(c(0.3850427, 0.6202895))
# An N-D Gaussian Distribution with Zero Mean and Given Correlation
make_gaussian <- function(num_dim, corr = 0.95) {
mean <- seq(-1, 1, length.out = num_dim)
sigma <- diag(rep(1, length.out = num_dim))
sigma[sigma == 0] <- corr
precision <- solve(sigma)
log_norm <- -0.5 * (log(2 * pi) * num_dim + log(det(sigma)))
logz_truth <- num_dim * -log(2 * 10)
list(
log_lik = function(x) -0.5 *
as.double((x - mean) %*% precision %*% (x - mean)) + log_norm,
prior_transform = prior_transform(
\(x) qunif(x, -10, 10),
num_dim,
LETTERS[1:num_dim]
),
logz_truth = logz_truth
)
}
test <- make_gaussian(2)
test$log_lik(c(0.1601479, 0.5320870))
?which.min
?get_env
?env_get
test$log_lik(c(5.451463, -1.253809))
?sprintf
as_string(c(1,2,3))
rlang::as_string(c(1,2,3))
test$log_lik(c(0.4540845, 0.4523210))
test$log_lik(test$prior_transform$fn(0.4540845, 0.4523210))
test$log_lik(test$prior_transform$fn(c(0.4540845, 0.4523210)))
test$log_lik(test$prior_transform$fn(c(0.2087342, 0.7657981)))
test$log_lik(c(0.2087342, 0.7657981))
test$log_lik(test$prior_transform$fn(c(0.5667043, 0.6860688)))
test$log_lik(test$prior_transform$fn(c(0.1987934, 0.5409007)))
test$log_lik(test$prior_transform$fn(c(0.707553836977536, 0.0276643685660631)))
test$log_lik(test$prior_transform$fn(c(0.765771496701607,0.317912615627818)))
test$log_lik(test$prior_transform$fn(c(0.366453199181706,0.619479922810569)))
test$log_lik(test$prior_transform$fn(c(0.354890438728034,0.640886664157733)))
0.35 %% 1
0.64 %% 1
1 - (0.64 %% 1)
c(0.354890438728034, 0.640886664157733) %% 1
c(1 - 0.354890438728034, 0.640886664157733) %% 1
1 - (c(0.354890438728034, 0.640886664157733) %% 1)
test$log_lik(test$prior_transform$fn(c(0.475773632060736,0.648259663954377)))
test$log_lik(test$prior_transform$fn(c(0.09433815, 0.77559473)))
test$log_lik(test$prior_transform$fn(c(0.8339216, 0.1718953)))
test$log_lik(test$prior_transform$fn(c(0.299799, 0.213808)))
test$log_lik(test$prior_transform$fn(c(0.64763279, 0.08922404)))
test$log_lik(test$prior_transform$fn(c(0.5636558, 0.7678880)))
test$log_lik(test$prior_transform$fn(c(0.09256938, 0.08069976)))
test$log_lik(test$prior_transform$fn(c(0.5636558, 0.7678880)))
test$log_lik(test$prior_transform$fn(c(0.7405069, 0.7204222)))
tst <- \(...) test$log_lik(test$prior_transform$fn(c(...)))
tst(0.6272569, 0.6691289)
tst(0.5945374, 0.6310222)
tst(0.4058516, 0.3638068)
tst(0.1080875, 0.7197039)
tst(0.1959033, 0.4303902)
c(0.6283398, 0.7144089) % 1
c(0.6283398, 0.7144089) %! 1
c(0.6283398, 0.7144089) %% 1
1 - c(0.6283398, 0.7144089) %% 1
1 - (c(0.6283398, 0.7144089) %% 1)
1 - (c(0.2613403, 0.2108761) %% 1)
(c(0.2613403, 0.2108761) %% 1)
library(testthat)
tst(0.1508342, 0.8687971)
test$log_lik(test$prior_transform$fn(c(0.1508342, 0.8687971)))
tst(0.1508342, 0.8687971)
tst(0.3213189, 0.1172831)
test$log_lik(test$prior_transform$fn(c(0.3213189, 0.1172831)))
test$prior_transform$fn(c(0.3213189, 0.1172831))
test$prior_transform$fn(c(0.2640099, 0.4813982))
test$prior_transform$fn(c(-7.077030, -2.618564))
test$log_lik(c(-7.077030, -2.618564))
test$log_lik(c(-1.442272,  0.356919))
test$log_lik(c(-4.80035, -5.15679))
test$log_lik(c(-0.279865, 0.658736))
tst(c(0.754793, 0.0934731))
tst(c(0.754793, 0.0934731))
tst(c(0.9639208, 0.4720825))
test$log_lik(c(-2, 2))
test$log_lik(c(-3, 3))
matrix(c(-3, 3, -2, 2), nrow = 2)
matrix(c(-3, 3, -2, 2), nrow = 2, byrow = TRUE)
test$log_lik(c(-3, 3))
test$log_lik(c(-2, 2))
dunif(c(-3, 3, -2, 2), -10, 10)
punif(c(-3, 3, -2, 2), -10, 10)
qunif(c(0.35), -10, 10)
tst(c(0.3717374, 0.5647642))
test$log_lik(c(-2.565252,  1.295284))
tst(c(0.5102217, 0.6265008))
test$log_lik(c(0.2044348, 2.5300151))
test$prior_transform$fn(c(0.5102217, 0.6265008))
test$prior_transform$fn(c(0.450655, 0.625901))
tst(c(0.450655, 0.625901))
tst(c(-3.171256, -1.937545))
tst(c(0.3414372, 0.4031227))
punif(c(-1, 1), -10, 10)
tst(c(0.45, 55))
tst(c(0.45, .55))
-5.991465 + 0.182535
-5.991465 - 0.182535
?expect_equal
-6.206992 - -5.991465
c(20:1)
c(1:10)[-1]
document()
document()
reticulate::repl_python()
-14.702080298404734
-14.702079
?sprintf
reticulate::repl_python()
-15.4110207153795
reticulate::repl_python()
-10.905758588281262
-10.9057586070
abs(-10.905758588281262 - -10.9057586070)
-10.905758588281262 > -10.9057586070
devtools::load_all(".")
length(list(c(1,2,3)))[[1]]
length(list(c(1,2,3)))[1]
length(list(c(1,2,3)))[1][1]
length(list(x = c(1,2,3)))
length(list(x = c(1,2,3)))[[1]]
length(list(x = c(1,2,3)))[[x]]
c(NA, NA, NA) |> is.na()
?duplicated
