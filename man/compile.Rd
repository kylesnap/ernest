% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compile.R
\name{compile.ernest_sampler}
\alias{compile.ernest_sampler}
\alias{compile.ernest_run}
\title{Create a set of live points for a nested sampling run}
\usage{
\method{compile}{ernest_sampler}(object, ..., seed = NA)

\method{compile}{ernest_run}(object, ..., seed = NA, clear = FALSE)
}
\arguments{
\item{object}{An object of class \link{ernest_sampler} or \link{ernest_run}.
\itemize{
\item \code{ernest_sampler}: Prepares a new sampler with a fresh set of live points.
\item \code{ernest_run}: Regenerates live points from the previously stored results,
unless \code{clear = TRUE}.
}}

\item{...}{These dots are for future extensions and must be empty.}

\item{seed}{An integer, \code{NULL}, or \code{NA}. Controls the random number
generator:
\itemize{
\item Integer or \code{NULL}: Passed to \code{\link[=set.seed]{set.seed()}}. If \code{NULL}, reinitializes the
generator as if no seed has yet been set.
\item \code{NA}: Makes no changes to the current seed. If \code{compile()} has been
called on \code{object} before, \code{NA} ensures the seed remains identical
between runs.
}}

\item{clear}{Logical. If \code{TRUE}, clears results from previous runs before
compiling. If \code{FALSE}, retains previous results and validates live points.}
}
\value{
A validated \code{object}, with a valid set of live points stored in its
\code{live_points} environment.
}
\description{
Prepares an object for nested sampling by validating and
(re)generating its set of live points. This ensures the sampler is viable
before new live points are generated during the nested sampling algorithm.
}
\details{
The \code{compile()} function validates the set of live points in the sampler or
run, ensuring that:
\itemize{
\item Each live point is within the unit hypercube.
\item The likelihood function returns valid values (finite double or \code{-Inf}) for
each point.
\item The set of live points is not a perfect plateau (all points sharing the
same likelihood). A warning is issued if more than 25\% of points share the
same likelihood value.
}

If validation fails, the set of live points is removed, preventing further
sampling until the issue is resolved.
}
\examples{
prior <- create_uniform_prior(n_dim = 2, lower = -1, upper = 1)
ll_fn <- function(x) -sum(x^2)
sampler <- ernest_sampler(ll_fn, prior, n_points = 100)

# Compile the sampler to add live points
compile(sampler)
head(sampler$live_points$unit)

# Continue a previous run
# run <- data(example_run)
# sampler_2 <- compile(example_run)
# sampler_2

# Make a new sampler from a previous run
sampler_3 <- compile(example_run, clear = TRUE)
sampler_3
}
\seealso{
\itemize{
\item \code{\link[=ernest_sampler]{ernest_sampler()}} describes how to create an \code{ernest_sampler} object.
\item \code{\link[=generate]{generate()}} describes the nested sampling algorithm and the \code{ernest_run}
object.
}
}
