% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/likelihood-class.R
\name{create_likelihood}
\alias{create_likelihood}
\alias{create_likelihood.ernest_likelihood}
\alias{create_likelihood.function}
\title{Prepare a likelihood function for nested sampling}
\usage{
create_likelihood(fn, ...)

\method{create_likelihood}{ernest_likelihood}(
  fn,
  error_action = c("abort", "warn"),
  nonfinite_action = c("warn", "pass", "abort"),
  auto_batch = TRUE,
  ...
)

\method{create_likelihood}{`function`}(
  fn,
  error_action = c("abort", "warn"),
  nonfinite_action = c("warn", "pass", "abort"),
  auto_batch = TRUE,
  ...
)
}
\arguments{
\item{fn}{The log-likelihood function, see Details.}

\item{...}{These dots are for future extensions and must be empty.}

\item{error_action}{Character string specifying how to handle errors in \code{fn}.
One of \code{"abort"} or \code{"warn"}, case sens
\itemize{
\item \code{"abort"}: Stop execution and signal an error.
\item \code{"warn"}: Issue a warning and replace output with \code{-Inf}.
}}

\item{nonfinite_action}{Character string specifying how to handle nonfinite or
missing outputs from \code{fn}. One of \code{"warn"}, \code{"pass"}, or \code{"abort"}, case
sensitve.
\itemize{
\item \code{"warn"}: Issue a warning and replace nonfinite values with \code{-Inf}.
\item \code{"pass"}: Silently replace nonfinite values with \code{-Inf}.
\item \code{"abort"}: Stop execution and signal an error if nonfinite values are
encountered.
}}

\item{auto_batch}{Whether to prepare \code{fn} so that it may be called with a
matrix of parameter values. If \code{FALSE}, its assumed that \code{fn} can already
produce a vector of likelihood values for a matrix with rows of parameter
vectors.}
}
\value{
A function with additional class \code{ernest_likelihood}. This function
will accept vectors of parameters, and matrices of parameters, where
each row represents a single parameter vector. \code{ernest_likelihood} will
always produce either scalar or vector doubles containing finite values
or \code{-Inf}; values outside this range are either replaced by \code{-Inf} or
cause errors.
}
\description{
Creates a modified version of a log. likelihood function that always returns
either a finite value or \code{-Inf} for each vector of parameters that is provided.
}
\details{
Model likelihoods should be provided as a log density function. It is expected
that \code{fn} should take in exactly one argument; likelihood functions that
take in multiple non-default arguments should be entered as anonymous
functions (see \code{\link[rlang:as_function]{rlang::as_function()}}).

It is expected that \code{fn} returns a scalar finite values or \code{-Inf} for each
parameter vector. Use \code{error_action} and \code{nonfinite_action} to decide on
how \code{ernest_likelihood} handles errors, non-finite, and non-numeric return
values from \code{fn}.

As default, \code{auto_batch} expects that \code{fn} is incapable of handling matrices
of parameter values. It resolves this by wrapping \code{fn} in a call to
\code{\link[base:apply]{base::apply()}}. Should you have a more efficient implementation of your
likelihood function, then consider setting \code{auto_batch} to \code{FALSE}.
}
\examples{
# A 3D Gaussian likelihood function
n_dim <- 3
sigma <- diag(0.95, nrow = 3)
det_sigma <- determinant(sigma, logarithm = TRUE)$modulus
attributes(det_sigma) <- NULL
prec <- solve(sigma)
log_norm <- -0.5 * (log(2 * pi) * n_dim + det_sigma)

fn <- function(theta) {
  drop(-0.5 * crossprod(theta, crossprod(prec, theta)) + log_norm)
}
log_lik <- create_likelihood(fn)
log_lik(c(0, 0, 0))

# As default, `log_lik` will loudly replace non-finite, non-`-Inf` values.
try(log_lik(c(Inf, 0, 0)))

# Silence warnings with `nonfinite_action = "pass"`
quiet_lik <- create_likelihood(log_lik, nonfinite_action = "pass")
quiet_lik(c(Inf, 0, 0))
}
