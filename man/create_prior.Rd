% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/prior-class.R
\name{create_prior}
\alias{create_prior}
\title{Specify a prior distribution for nested sampling}
\usage{
create_prior(fn, n_dim, varnames = NULL, lower = NULL, upper = NULL)
}
\arguments{
\item{fn}{A function that takes a vector of probabilities \code{p} and returns
a vector of quantiles.}

\item{n_dim}{The number of dimensions for the prior distribution.}

\item{varnames}{Optional names for the variables in the prior distribution.}

\item{lower}{Optional lower bounds for the prior distribution.}

\item{upper}{Optional upper bounds for the prior distribution.}
}
\value{
An object of type \code{ernest_prior} that represents the prior
distribution, including:
\itemize{
\item \code{fn}: The function that performs the transformation from unit cube
coordinates to coordinates in the prior space.
\item \code{n_dim}: The number of dimensions in the prior space.
\item \code{varnames}: Names for the variables in the prior distribution.
\item \code{lower}: Lower bounds for the prior distribution.
\item \code{upper}: Upper bounds for the prior distribution.
}
}
\description{
Create a prior specification for ernest using an R function that transforms
coordinates from the unit cube space into coordinates in the prior
distribution (see Details).
}
\details{
Nested sampling with ernest requires a prior transformation function that
takes in a vector of values between 0 and 1, and returns a same-length vector
of parameters expressed in the scale of the model's prior distribution. When
calling \code{create_prior}, ernest will test \code{fn} by presenting it with 1000
\code{n_dim}-length vectors generated from \code{\link[=runif]{runif()}}. These checks are passed if:
\itemize{
\item Every input returns a vector of \code{n_dim} finite values.
\item Every input returns a vector that respects the \code{lower} and \code{upper} bounds,
if provided.
}

Users are encouraged to run additional checks on the behaviour of the prior
through calling the \code{fn} object bound to the produced \code{ernest_prior}.
}
\examples{
# 3D uniform prior in the range [-10, 10]
unif <- \(x) { -10 + x * 20 }
prior <- create_prior(unif, n_dim = 3, lower = -10, upper = 10)

# `ernest_prior` wraps `fn` in guards to prevent unexpected behaviour.
prior$fn(c(0.25, 0.5, 0.75)) # OK
try(prior$fn(c(0.33, 0.67))) # Input length is only length 3.

# A prior for a simple linear regression model
lm_f <- function(theta) {
  beta_0 <- qnorm(theta[1], mean = 0, sd = 10) # (Beta0, Beta1) ~ N(0, 10)
  beta_1 <- qnorm(theta[1], mean = 0, sd = 10) # Sigma ~ Exp(1)
  sigma <- qexp(theta[1], rate = 1)
  c(beta_0, beta_1, sigma)
}
create_prior(
  lm_f,
  n_dim = 3,
  varnames = c("beta_0", "beta_1", "sigma"),
  lower = c(-Inf, -Inf, 0)
)

# A normal prior with hyperprior parameters
hier_f <- function(theta) {
  mu <- qnorm(theta[1], mean = 5) # mu ~ N(5, 1)
  sigma <- 10 ^ qunif(theta[2], min = -1, max = 1) # log10(sigma) ~ U[-1, 1]

  x <- qnorm(theta[3], mu, sigma) # X ~ N(mu, sigma)
  c(mu, sigma, x)
}
create_prior(
  hier_f,
  n_dim = 3,
  varnames = c("mu", "sigma", "x"),
  lower = c(-Inf, 0, -Inf)
)

# ernest will catch mistakes when provided with bounds
try(create_prior(
  hier_f,
  n_dim = 3,
  varnames = c("mu", "sigma", "x"),
  lower = c(-Inf, -Inf, -1)
))
}
