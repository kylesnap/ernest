% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/prior-class.R
\name{create_prior}
\alias{create_prior}
\alias{ernest_prior}
\title{Specify a prior distribution for nested sampling}
\usage{
create_prior(
  fn,
  rowwise_fn = deprecated(),
  ...,
  .n_dim = NULL,
  .varnames = NULL,
  .name_repair = c("unique", "universal", "check_unique"),
  .lower = -Inf,
  .upper = Inf
)
}
\arguments{
\item{fn}{A function. Takes a vector of unit cube coordinates and
returns a vector of parameters of the same length.}

\item{rowwise_fn}{\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#deprecated}{\figure{lifecycle-deprecated.svg}{options: alt='[Deprecated]'}}}{\strong{[Deprecated]}} No longer supported;
instead, use \code{fn} to provide a prior-transformation function.}

\item{.n_dim}{An optional positive integer. The number of dimensions of the
prior distribution. If left \code{NULL}, this is inferred from the common length
of the vector-valued parameters (see Note).}

\item{.varnames}{An optional character vector. Names for the variables in the
prior distribution.}

\item{.name_repair}{An optional, case-sensitive string. How to repair
\code{varnames}. Options are \code{"unique"} (default), \code{"universal"}, or
\code{"check_unique"}. See \code{\link[vctrs:vec_as_names]{vctrs::vec_as_names()}} for details.}

\item{.lower, .upper}{Numeric vectors. Expected bounds for the
parameter vectors after hypercube transformation.}
}
\value{
A named list with class \code{ernest_prior}, containing:
\itemize{
\item \code{fn}: The prior transformation function.
\item \code{n_dim}: Number of dimensions in the prior space.
\item \code{lower}, \code{upper}: Bounds for the prior distribution, recycled to length
\code{n_dim}.
}

Additionally, the object has a \code{varnames} attribute.

When provided a vector from the unit hypercube, \code{fn} either a length-\code{n_dim}
vector of doubles, containing transformed model parameters, or an error
message.
}
\description{
Use an R function to specify the prior distribution of parameters for a
nested sampling run.
}
\details{
The unit hypercube transformation encodes points in the parameter space
as independent and identically distributed points within a unit hypercube.
Nested sampling implementations, including ernest, use this transformation
to simplify likelihood-restricted prior sampling and avoid unnecessary
rejection steps.

\code{create_prior} allows you to specify your own prior distribution by providing
a transformation function. For factorisable priors, this function can simply
transform each value in (0, 1) using the inverse cumulative distribution
function (CDF) for each parameter. For more complex cases, you can specify
hierarchical or conditionally dependent priors (see Examples).

\code{create_prior} performs regularity checks on your prior function to catch
basic errors that may affect nested sampling. To pass these checks, \code{fn} must
be able to take in a vector of points (each between 0 and 1) and return
a vector of the same length which contains only finite values.
}
\note{
The vector-valued parameters in this function are recycled to length
\code{.n_dim} if it is an integer, or to a common length if \code{.n_dim = NULL}. See
\link[vctrs:theory-faq-recycling]{vctrs::vector_recycling_rules} for additional information on
recycling.
}
\examples{
# 3D uniform prior in the range [-10, 10]
unif <- function(x) {
   -10 + x * 20
}

prior <- create_prior(unif, .n_dim = 3, .lower = -10, .upper = 10)
prior$fn(c(0.25, 0.5, 0.75))

# A normal prior with parameterised mean and standard deviation
hier_f <- function(theta) {
  mu <- qnorm(theta[1], mean = 5) # mu ~ N(5, 1)
  sigma <- 10 ^ qunif(theta[2], min = -1, max = 1) # log10(sigma) ~ U[-1, 1]
  x <- qnorm(theta[3], mu, sigma) # X ~ N(mu, sigma)
  c(mu, sigma, x)
}
create_prior(
  hier_f,
  .varnames = c("mu", "sigma", "x"),
  .lower = c(-Inf, 0, -Inf)
)
}
