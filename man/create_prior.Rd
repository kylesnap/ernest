% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/prior-class.R
\name{create_prior}
\alias{create_prior}
\alias{ernest_prior}
\title{Specify a prior distribution for nested sampling}
\usage{
create_prior(
  fn,
  n_dim,
  varnames = "X",
  lower = NULL,
  upper = NULL,
  auto_batch = TRUE
)
}
\arguments{
\item{fn}{(function) The unit hypercube transformation (see Details).}

\item{n_dim}{(positive integer) The dimensionality of the prior distribution.}

\item{varnames}{(optional character vector) A character vector of names for
the variables in the prior distribution.}

\item{lower, upper}{(optional numeric vector) The expected bounds for the
parameter vectors after hypercube transformation. Set to \code{-Inf} and \code{Inf}
by default.}

\item{auto_batch}{(logical) Whether to prepare \code{fn} so that it may be called
with a matrix of parameter values. If \code{FALSE}, its assumed that \code{fn}
can already produce a vector of likelihood values for a matrix with rows of
parameter vectors.}
}
\value{
A named list with class \code{ernest_prior}. The list contains the
following:
\itemize{
\item \code{fn}: The prior transformation function.
\item \code{n_dim}: The number of dimensions in the prior space.
\item \code{varnames}: Names for the variables in the prior distribution, recycled to
length \code{n_dim} and transformed by \code{make.unique()}.
\item \code{lower} and \code{upper}: Bounds for the prior distribution, recycled to length
\code{n_dim}.
}
}
\description{
Use an R function to specify the prior distribution of parameters for a
nested sampling run.
}
\details{
The unit hypercube transformation encodes points within the parameter space
as independent and identically distributed points within a unit hypercube.
Implementations of nested sampling, including ernest, use this transformation
to simplify likelihood-restricted prior sampling, avoiding uncessary
rejection steps.

In ernest, the \code{create_prior} function allows you to specify your own
prior distribution. This requires you to provide your own transformation
function. In many cases, when the prior can be factorized, this function
can simply be transforming a vector of values in (0, 1) and transforming
them elementwise with inverse cumulative distribution function (CDF) of
each parameter. In more complex cases, you can specify a hierarchical or
conditionally-dependent prior (see Examples).

ernest will perform several regularity checks on \code{fn} when the prior is
created. These checks are passed if:
\itemize{
\item \code{fn} is a function;
\item \code{fn(rep(0.5, n_dim))} returns a finite double vector of length \code{n_dim};
\item \code{fn}, when given a matrix of random unit cube coordinates, returns a
finite double matrix with the same dimensions that all respect the specified
bounds.
}

As default, \code{auto_batch} expects that \code{fn} is incapable of handling matrices
of unit cube values. It resolves this by wrapping \code{fn} in a call to
\code{\link[base:apply]{base::apply()}}. Should you have a more efficient implementation of your
likelihood function, then consider setting \code{auto_batch == FALSE}.
Failing the checks on \code{fn} with \code{auto_batch = FALSE} will remind the user
of this setting.
}
\examples{
# 3D uniform prior in the range [-10, 10]
unif <- function(x) {
   -10 + x * 20
}

prior <- create_prior(unif, n_dim = 3, lower = -10, upper = 10)
prior$fn(c(0.25, 0.5, 0.75))
mat <- matrix(c(0.25, 0.5, 0.75, 0.1, 0.2, 0.3), ncol = 3, byrow = TRUE)
prior$fn(mat)

# A normal prior, with a parameterized mean and standard deviation
hier_f <- function(theta) {
  mu <- qnorm(theta[1], mean = 5) # mu ~ N(5, 1)
  sigma <- 10 ^ qunif(theta[2], min = -1, max = 1) # log10(sigma) ~ U[-1, 1]

  x <- qnorm(theta[3], mu, sigma) # X ~ N(mu, sigma)
  c(mu, sigma, x)
}
create_prior(
  hier_f,
  n_dim = 3,
  varnames = c("mu", "sigma", "x"),
  lower = c(-Inf, 0, -Inf)
)

# Setting `auto_batch = FALSE` should be done with care
bb_p <- function(x) {
  beta <- stats::qbeta(x[1], 5, 5)
  bern <- stats::qbinom(x[2], size = 1, beta)
  c(beta, bern)
}
try(
 create_prior(
  bb_p,
  n_dim = 2,
  varnames = c("beta", "bern"),
  auto_batch = FALSE
 )
)
create_prior(bb_p, n_dim = 2, varnames = c("beta", "bern"))
}
