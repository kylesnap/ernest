% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sampling.R
\name{ernest_sampling}
\alias{ernest_sampling}
\alias{unif_cube}
\alias{rwmh_cube}
\title{Specify a likelihood-restricted prior sampler (LRPS)}
\usage{
unif_cube()

rwmh_cube(steps = 25L, target_acceptance = 0.5)
}
\arguments{
\item{steps}{(positive integer) Number of steps to take when generating a
proposal point.}

\item{target_acceptance}{(double between 0 and 1) The target acceptance rate
for the sampler.}
}
\value{
An \code{ernest_sampling} object, used by \link{ernest_sampler}
during its initialization to create an R environment for its LRPS.
}
\description{
Choose a method for replacing the worst point in a live set of possible
parameter values.

\code{unif_cube()} is a region-based sampler, where points are generated by
sampling uniformly within the unit hypercube, returning a point when
a sampled point exceeds  from the prior under a likelihood constraint is to
sample randomly from the prior and reject the point if the likelihood
constraint is not fulfilled. This method is horribly inefficient in even
moderately-large dimensions, but is useful for testing and debugging.

\code{rwmh_cube} is a MCMC-based sampler, where points are generated by
taking random steps within the unit hypercube.
}
\details{
Nested sampling first generates a set of independently distributed
live points within a prior space, then iteratively improves this set through
replacing the point with the worst likelihood with a new, improved point. In
ernest, the strategies for evolving these points are collectively called
likelihood-restricted prior samplers. At present, ernest offers two LRPS:
A naive region-based sampler, which randomly samples from the unit cube,
and a more sophisticated random walk Metropolis-Hastings sampler, which takes
a random point from the live set and walks it through a number of steps.

When updated during a run (see \code{\link[=nested_sampling]{nested_sampling()}}), the sampler will adjust
its step-size to target the specified acceptance rate.
}
\examples{
rwmh_cube()
rwmh_cube(steps = 20)
unif_cube()
}
\references{
\code{unif_cube} and \code{rw_walk} are based off of implementations found
in the \href{https://dynesty.readthedocs.io/en/v2.1.5/quickstart.html#sampling-options}{dynesty}
python package.
}
