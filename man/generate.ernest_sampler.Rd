% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/generate.R
\name{generate.ernest_sampler}
\alias{generate.ernest_sampler}
\alias{ernest_run}
\title{Run nested sampling to estimate Bayesian evidence}
\usage{
\method{generate}{ernest_sampler}(
  x,
  ...,
  max_iterations = NULL,
  max_calls = NULL,
  min_logz = 0.05,
  show_progress = FALSE
)
}
\arguments{
\item{x}{An object of class \code{ernest_sampler} or \code{ernest_run}.}

\item{...}{
  Arguments passed on to \code{\link[=compile.ernest_run]{compile.ernest_run}}
  \describe{
    \item{\code{seed}}{An integer, \code{NULL}, or \code{NA}. Controls the random number
generator:
\itemize{
\item Integer or \code{NULL}: Passed to \code{\link[=set.seed]{set.seed()}}. If \code{NULL}, reinitializes the
generator as if no seed has yet been set.
\item \code{NA}: Makes no changes to the current seed. If \code{compile()} has been
called on \code{object} before, \code{NA} ensures the seed remains identical
between runs.
}}
    \item{\code{clear}}{Logical. If \code{TRUE}, clears results from previous runs before
compiling. If \code{FALSE}, retains previous results and validates live points.}
  }}

\item{max_iterations}{An optional strictly positive integer. The maximum
number of iterations to perform. If left \code{NULL}, this criterion is ignored.}

\item{max_calls}{An optional strictly positive integer. The maximum number
of calls to the likelihood function. If set to \code{Inf}, this criterion is
ignored.}

\item{min_logz}{A non-negative double. The minimum log-ratio between the
current estimated evidence and the remaining evidence. If set to zero, this
criterion is ignored.}

\item{show_progress}{Logical. If \code{TRUE}, displays a progress spinner and
iteration counter during sampling.}
}
\value{
An object of class \code{ernest_run}, which inherits from \code{ernest_sampler} and
contains these additional components:
\itemize{
\item \code{n_iter}: Integer. Number of iterations.
\item \code{n_calls}: Integer. Total number of likelihood function calls.
\item \code{log_lik}: \code{double(n_iter + n_points)}. The
log-likelihoods for each sample.
\item \code{log_volume}: \code{double(n_iter + n_points)}. The estimated
log-prior volumes at each iteration.
\item \code{log_weight}: \code{double(n_iter + n_points)}. The
unnormalized log-weights for each sample.
\item \code{log_evidence}: \code{double(n_iter + n_points)}. The
cumulative log-evidence estimates at each iteration.
\item \code{log_evidence_var}: \code{double(n_iter + n_points)}. The
variance of the log-evidence estimate at each iteration.
\item \code{information}: \code{double(n_iter + n_points)}. The KL
divergence between the prior and posterior, estimated at each iteration.
\item \code{samples}: \code{matrix(nrow = n_iter + n_points, ncol = n_dim)}. The parameter
values of each sample.
\item \code{samples_unit}: \code{matrix(nrow = n_iter + n_points, ncol = n_dim)}. The
parameter values of each sample, in their unit hypercube representation.
\item \code{id}: \code{integer(n_iter + n_points)}. The unique integer identifiers for each
sample from the live set (ranging from 1 to \code{n_points}).
\item \code{points}: \code{integer(n_iter + n_points)}. The number of live points present
at each iteration.
\item \code{calls}: \code{integer(n_iter + n_points)}. The number of calls used to generate
a new live point at each iteration.
\item \code{birth}: \code{integer(n_iter + n_points)}. The iteration at which each sample
was first created (ranging from 0 to \code{n_iter}).
}
}
\description{
Executes the nested sampling algorithm, iteratively replacing the worst live
point with a new sample from a likelihood-restricted prior, until a stopping
criterion is met.
}
\details{
At least one of \code{max_iterations}, \code{max_calls}, or \code{min_logz} must
indicated a valid stopping criterion. Setting \code{min_logz} to zero while
not changing \code{max_iterations} or \code{max_calls} from their defaults will cause
an error.

If \code{x} is an \code{ernest_run} object, the stopping criteria are checked against
the current state of the run. An error is thrown if the stopping criteria
have already been satisfied by \code{x}.

The \code{min_logz} parameter controls the relative tolerance for the remaining
evidence in the unexplored parameter space. Sampling stops when the estimated
remaining evidence is sufficiently small compared to the accumulated
evidence.
}
\examples{
prior <- create_uniform_prior(n_dim = 2, lower = -1, upper = 1)
ll_fn <- function(x) -sum(x^2)
sampler <- ernest_sampler(ll_fn, prior, n_point = 100)
sampler

# Stop sampling after a set number of iterations or calls to the lik. func.
generate(sampler, max_iterations = 100)

# The final number of calls may be larger than `max_calls`, as `generate`
# only checks the number of calls when removing a live point.
generate(sampler, max_calls = 2600)

# Use the default stopping criteria
\dontrun{ generate(sampler) }
}
