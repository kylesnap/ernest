% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/generate.R
\name{generate.ernest_sampler}
\alias{generate.ernest_sampler}
\title{Perform nested sampling}
\usage{
\method{generate}{ernest_sampler}(
  x,
  ...,
  max_iterations = Inf,
  max_calls = Inf,
  min_logz = 0.05,
  seed = NA,
  verbose = FALSE
)
}
\arguments{
\item{x}{An object of class \code{ernest_sampler}.}

\item{...}{These dots are for future extensions and must be empty.}

\item{max_iterations}{The maximum number of iterations to perform. If set to
\code{Inf}, this stopping criterion is ignored.}

\item{max_calls}{The maximum number of calls to the likelihood function.
If set to \code{Inf}, this stopping criterion is ignored.}

\item{min_logz}{The minimum log-evidence value to achieve. Must be a number
equal to or larger than zero.}

\item{seed}{Either a single value, interpretted as an integer, or \code{NA} or
\code{NULL}.
\itemize{
\item If an integer or NULL, \code{seed} is passed to \code{\link[=set.seed]{set.seed()}} to set the state
of the random number generator. \code{NULL} reinitializes the generator as if
no seed has yet been set.
\item If \code{NA}, the random number generator is set with the seed stored in the
\code{ernest_run} object bound to \code{object}. If this object does not exist (i.e.,
if not prior runs have been performed), the current state of the generator
is recorded and stored for future objects.
}}

\item{verbose}{Whether to print updates on the sampler's progress.}
}
\value{
An object of class \linkS4class{ernest_run}, containing the results of the
nested sampling run.
}
\description{
Execute the nested sampling loop. Iteratively replaces the worst live point
in a set with a point drawn from a likelihood-restricted prior sampler,
until a provided stopping criterion is met.
}
\details{
Before starting the sampling loop, \code{generate} calls \code{\link[=compile]{compile()}} to
check the internal state of the sampler.
}
\examples{
prior <- create_uniform_prior(n_dim = 2, lower = -1, upper = 1)
ll_fn <- function(x) -sum(x^2)
sampler <- nested_sampling(ll_fn, prior, n_point = 100)
sampler

# Stop sampling after a set number of iterations or calls to the lik. func.
generate(sampler, max_iterations = 100)

# The final number of calls may be larger than `max_calls`, as `generate`
# only checks the number of calls when removing a live point.
generate(sampler, max_calls = 2600)

# Use the default stopping criteria
\dontrun{ generate(sampler) }
}
