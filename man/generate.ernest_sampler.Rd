% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/generate.R
\name{generate.ernest_sampler}
\alias{generate.ernest_sampler}
\title{Perform nested sampling}
\usage{
\method{generate}{ernest_sampler}(
  x,
  ...,
  max_iterations = NULL,
  max_calls = NULL,
  min_logz = 0.05,
  show_progress = FALSE
)
}
\arguments{
\item{x}{(ernest_sampler) An object of class \code{ernest_sampler}.}

\item{...}{
  Arguments passed on to \code{\link[=compile.ernest_run]{compile.ernest_run}}
  \describe{
    \item{\code{seed}}{(integer or NA, optional) Specification for the random number
generator.
\itemize{
\item integer and NULL: Passed to \code{\link[=set.seed]{set.seed()}}. If \code{NULL}, this reinitializes the
generator as if no seed has yet been set.
\item \code{NA}: Make no changes to the current seed. If \code{compile} has been
called on \code{object} before, then \code{NA} will ensure that the seed remain
identical between runs.
}}
    \item{\code{clear}}{(boolean) Whether to clear results from previous runs before
compiling.
\itemize{
\item \code{TRUE}: Previous results stored in \code{object} are removed, and live points
are generated and validated.
\item \code{FALSE}: Previous results stored in \code{object} are retained, and live points
are validated.
}}
  }}

\item{max_iterations}{(positive integer) The maximum number of iterations to
perform. If set to \code{Inf}, this stopping criterion is ignored.}

\item{max_calls}{(positive integer) The maximum number of calls to the
likelihood function. If set to \code{Inf}, this stopping criterion is ignored.}

\item{min_logz}{(positive double or zero) The minimum ratio between the
current log evidence and remaining log evidence (see Details). If set to
zero, this stopping criterion is ignored.}

\item{show_progress}{Whether to show a simple progress spinner and iteration
counter during the run.}
}
\value{
An object of class \linkS4class{ernest_run}, containing the results of the
nested sampling run.
}
\description{
Execute the nested sampling loop. Iteratively replaces the worst live point
in a set with a point drawn from a likelihood-restricted prior sampler,
until a provided stopping criterion is met.
}
\details{
At least one of \code{max_iterations}, \code{max_calls}, or \code{min_logz}  must represent
a non-ignored stopping criterion.

At the iteration \eqn{i}, the remaining log evidence within the prior space
bound by a minimum likelihood criterion can be estimated as
\deqn{Z^*_i \approx L^{(max)}_i V_i} where \eqn{L^{(max)}_i}
is the maximum likelihood of the current live points and \eqn{V_i} is the
estimated remaining volume.

This estimate can be used to define a relative stopping criterion based on
the log-ratio of the current estimated evidence \eqn{\hat{Z_i}} to the
remaining evidence, such that
\deqn{\delta \log(Z) = \log(\hat{Z_i} - Z^*_i) - \log(\hat{Z_i})}
By setting \code{min_logz}, you can vary the minimum log-ratio at which sampling
stops. Once \eqn{\delta \log(Z)} falls below this value, you can assume that
only a negligible fraction of the evidence remains unaccounted for in the
final evidence estimates.

If \code{x} already contains results from previous calls to \code{generate()}, then
\code{generate()} will ensure that your stopping criterion have not already been
surpassed during previous runs.

Control the verbosity of other messages in ernest as it runs with the
\code{rlib_message_verbosity} enviroment option.
}
\examples{
prior <- create_uniform_prior(n_dim = 2, lower = -1, upper = 1)
ll_fn <- function(x) -sum(x^2)
sampler <- nested_sampling(ll_fn, prior, n_point = 100)
sampler

# Stop sampling after a set number of iterations or calls to the lik. func.
generate(sampler, max_iterations = 100)

# The final number of calls may be larger than `max_calls`, as `generate`
# only checks the number of calls when removing a live point.
generate(sampler, max_calls = 2600)

# Use the default stopping criteria
\dontrun{ generate(sampler) }
}
