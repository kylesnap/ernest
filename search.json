[{"path":"https://kylesnap.github.io/ernest/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to ernest","title":"Contributing to ernest","text":"outlines propose change ernest. detailed discussion contributing tidyverse packages, please see development contributing guide code review principles.","code":""},{"path":"https://kylesnap.github.io/ernest/CONTRIBUTING.html","id":"lifecycle","dir":"","previous_headings":"","what":"Lifecycle","title":"Contributing to ernest","text":"Ernest initially stable state development, great deal active subsequent development envisioned.","code":""},{"path":"https://kylesnap.github.io/ernest/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to ernest","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://kylesnap.github.io/ernest/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to ernest","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed). See guide create great issue advice.","code":""},{"path":"https://kylesnap.github.io/ernest/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to ernest","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"kylesnap/ernest\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://kylesnap.github.io/ernest/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to ernest","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://kylesnap.github.io/ernest/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to ernest","text":"Please note ernest project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://kylesnap.github.io/ernest/articles/more-ernest-runs.html","id":"gaussian-shells","dir":"Articles","previous_headings":"","what":"1. Gaussian Shells","title":"More Ernest Runs","text":"“Gaussian shells” problem standard test nested sampling algorithms, illustrate ability nested sampling deal oddly-shaped distributions can difficult traverse traditional random-walk MCMC methods. solve shells problem 2 5 dimensions. make easier, ’ll build function factory specify log-likelihood two Gaussian shells dd-dimensional space, one shell offset first dimension 3.5.","code":"gaussian_shell <- function(n_dim) {   c_1 <- numeric(n_dim) # Center of shell 1   c_2 <- numeric(n_dim) # Center of shell 2   c_1[1] <- 3.5 # 1D of the first shell is off-center    r <- 2 # Radius   w <- 0.1 # Shell width   const <- log(1 / sqrt(2 * pi * w^2))    # Single-shell log likelihood   log_lik_shell <- function(theta, c) {     d <- sqrt(sum((theta - c)^2))     const - (d - r)^2 / (2 * w^2)   }    # log-likelihood of two shells   function(theta) {     matrixStats::logSumExp(c(       log_lik_shell(theta, c_1),       log_lik_shell(theta, c_2)     ))   } }"},{"path":"https://kylesnap.github.io/ernest/articles/more-ernest-runs.html","id":"shells-in-2d","dir":"Articles","previous_headings":"1. Gaussian Shells","what":"1.1. Shells in 2D","title":"More Ernest Runs","text":"can review results detail using summary():","code":"log_lik_2d <- gaussian_shell(2) prior_2d <- create_uniform_prior(   n_dim = 2,   lower = -6,   upper = 6,   varnames = c(\"x\", \"y\") )  sampler_2d <- nested_sampling(log_lik_2d, prior_2d) run_2d <- generate(sampler_2d) #> Creating new live points. #> `min_logz` reached (0.0499288932007837 < 0.05) run_2d #> An <ernest_run>: 500 points, 2 variables #> • 2452 iterations, 46601 likelihood calls #> • Log. Evidence ≈ -1.723 (± 0.129) summary(run_2d) #>  #> ── Nested Sampling Results from <ernest_run> ─────────────────────────────────── #> No. Points: 500 #> No. Iterations: 2452 #> No. Lik. Calls: 46601 #> Log. Evidence: -1.723 (± 0.1292)"},{"path":"https://kylesnap.github.io/ernest/articles/more-ernest-runs.html","id":"shells-in-5d","dir":"Articles","previous_headings":"1. Gaussian Shells","what":"1.2. Shells in 5D","title":"More Ernest Runs","text":"wanted ensure prior behaving expected, can use posterior package examine recorded samples.","code":"log_lik_5d <- gaussian_shell(5) prior_5d <- create_uniform_prior(   n_dim = 5,   lower = -6,   upper = 6,   varnames = LETTERS[1:5] )  sampler_5d <- nested_sampling(log_lik_5d, prior_5d) run_5d <- generate(sampler_5d) #> Creating new live points. #> `min_logz` reached (0.000313401032129308 < 0.05) run_5d #> An <ernest_run>: 500 points, 5 variables #> • 0 iterations, 0 likelihood calls #> • Log. Evidence ≈ -15.012 (± 2.635) library(posterior) #> This is posterior version 1.6.1 #>  #> Attaching package: 'posterior' #> The following objects are masked from 'package:stats': #>  #>     mad, sd, var #> The following objects are masked from 'package:base': #>  #>     %in%, match draws_5d <- as_draws(run_5d) range(extract_variable(draws_5d, \"A\")) #> [1] -5.943474  5.954716 range(extract_variable(draws_5d, \"B\")) #> [1] -5.969977  5.999538"},{"path":"https://kylesnap.github.io/ernest/articles/more-ernest-runs.html","id":"the-eggbox-distribution","dir":"Articles","previous_headings":"","what":"2. The Eggbox distribution","title":"More Ernest Runs","text":"eggbox highly multimodal likelihood surface, used another classical example nested sampling. can plot run examine evidence estimates changed time:  Additionally, can use calculate simulate uncertainty around log volume estimates. shortcut, can use plot non-zero ndraws argument.","code":"eggbox_loglik <- function(theta) {   (2 + cos(theta[1] / 2) * cos(theta[2] / 2))^5 } prior_eggbox <- create_uniform_prior(n_dim = 2, upper = 10 * pi) sampler_eggbox <- nested_sampling(eggbox_loglik, prior_eggbox) run_eggbox <- generate(sampler_eggbox) #> Creating new live points. #> `min_logz` reached (0.0499816989251997 < 0.05) summary(run_eggbox) #>  #> ── Nested Sampling Results from <ernest_run> ─────────────────────────────────── #> No. Points: 500 #> No. Iterations: 4999 #> No. Lik. Calls: 111257 #> Log. Evidence: 236 (± 0.1257) plot(run_eggbox) plot(run_eggbox, ndraws = 100)"},{"path":"https://kylesnap.github.io/ernest/articles/more-ernest-runs.html","id":"working-with-data","dir":"Articles","previous_headings":"","what":"3. Working with Data","title":"More Ernest Runs","text":"use data within ernest run, ’ll incorporate within log-likelihood function. many cases, can done using anonymous function: f function takes parameters theta data y, can pass data ernest using syntax \\(theta) f(theta, y). demonstration, consider ernest performs posterior estimation dataset National Institutte Science Technology. examine posterior, need first call posterior::resample_draws() draws arugment produced ernest_run. ernest binds log-importance posterior weights as_draws object hidden variable. done, can use posterior package examine posterior distribution","code":"# NIST dataset data <- c(   100000000.2, 100000000.1, 100000000.3, 100000000.1, 100000000.3,   100000000.1, 100000000.3, 100000000.1, 100000000.3, 100000000.1, 100000000.3 )  log_lik_norm <- function(theta, y) {   sum(dnorm(y, theta[1], theta[2], log = TRUE)) }  prior_norm <- create_normal_prior(   n_dim = 2,   mean = c(100000000, 0.1),   sd = 10,   lower = c(-Inf, 0),   varnames = c(\"mean\", \"sd\") )  sampler_norm <- nested_sampling(   log_lik = \\(theta) log_lik_norm(theta, y = data),   prior_norm ) run_norm <- generate(sampler_norm) #> Creating new live points. #> `min_logz` reached (0.0499481502128933 < 0.05) run_norm #> An <ernest_run>: 500 points, 2 variables #> • 393 iterations, 576 likelihood calls #> • Log. Evidence ≈ -9.497 (± 2.489) draws_norm <- as_draws(run_norm) |> resample_draws()  summarize_draws(draws_norm) #> # A tibble: 2 × 10 #>   variable          mean     median     sd   mad       q5     q95  rhat ess_bulk #>   <chr>            <dbl>      <dbl>  <dbl> <dbl>    <dbl>   <dbl> <dbl>    <dbl> #> 1 mean     100000000.      1.000e+8 0.117      0 1.000e+8 1.00e+8  1.25     3.09 #> 2 sd               0.384   3.50 e-1 0.0797     0 3.50 e-1 5.47e-1  1.26     6.06 #> # ℹ 1 more variable: ess_tail <dbl>"},{"path":"https://kylesnap.github.io/ernest/articles/nested-sampling-with-ernest.html","id":"a-nested-sampling-crash-course-using-ernest","dir":"Articles","previous_headings":"","what":"A Nested Sampling Crash Course using ernest","title":"A Nested Sampling Crash Course with Ernest","text":"goal vignette teach basics nested sampling interfacing ernest package. working vignette, able : - Explain model evidence relevant Bayesian inference, hard directly calculate; - Recognize nested sampling algorithm approximates solution evidence integral; - Identify components nested sampler; - Construct use prior distributions ernest’s functions; - Initialize run nested sampler provided likelihood function, ; - Interpret visualize nested sampling results evaluate model’s evidence posterior distribution.","code":""},{"path":"https://kylesnap.github.io/ernest/articles/nested-sampling-with-ernest.html","id":"reviewing-model-evidence","dir":"Articles","previous_headings":"A Nested Sampling Crash Course using ernest","what":"Reviewing Model Evidence","title":"A Nested Sampling Crash Course with Ernest","text":"Consider statistical model, called MM, set unknown parameters θ\\theta. Bayesian statistics, can numerically express observed data, DD, update knowledge distribution θ\\theta probability. calculated Bayes’ theorem: $$   \\Pr(\\theta|D,M) &= \\frac{\\Pr(D|\\theta, M)\\Pr(\\theta|M)}{\\Pr(D|M)} $$ Pr(θ|D,M)=P(θ)\\Pr(\\theta|D,M) = P(\\theta) posterior distribution parameters given data model assumptions, Pr(D|θ,M)=L(θ)\\Pr(D|\\theta,M) = L(\\theta) likelihood data given model parameters, Pr(θ|M)=π(θ)\\Pr(\\theta|M)=\\pi(\\theta) prior distribution parameters. denominator Pr(D|M)=𝒵\\Pr(D|M) = \\mathcal{Z} model’s evidence marginal likelihood. isolation, 𝒵\\mathcal{Z} normalization constant P(θ)P(\\theta), allowing area posterior integrate one. However, calculate posterior odds ratios two models M1M_1 M2M_2 DD simplify, find Pr(θ|D,M1)Pr(θ|D,M2)=Pr(θ|M1)Pr(θ|M2) \\frac{\\Pr(\\theta|D,M_1)}{\\Pr(\\theta|D,M_2)} = \\frac{\\Pr(\\theta|M_1)}{\\Pr(\\theta|M_2)}  ratio evidences 𝒵1/𝒵2\\mathcal{Z}_1 / \\mathcal{Z}_2 factor prior odds updated observing DD. Bayes factor, KK, provides method us express belief M1M_1 relative M2M_2 given DD. Calculating comparing Bayes factors forms basis Bayesian model selection procedures. can calculate 𝒵\\mathcal{Z} integrating likelihood function model’s parameter space θ∈Θ\\theta \\\\Theta𝒵=∫θ∈ΘL(θ)π(θ)dθ \\mathcal{Z} = \\int_{\\theta \\\\Theta} L(\\theta)\\pi(\\theta)d\\theta  Unfortunately, dimensionality shape Θ\\Theta statistical models makes impossible evaluate 𝒵\\mathcal{Z} analytic means. practice, instead estimate 𝒵\\mathcal{Z} statistical procedure.","code":""},{"path":"https://kylesnap.github.io/ernest/articles/nested-sampling-with-ernest.html","id":"the-nested-sampling-algorithm","dir":"Articles","previous_headings":"A Nested Sampling Crash Course using ernest","what":"The Nested Sampling Algorithm","title":"A Nested Sampling Crash Course with Ernest","text":"Nested sampling (NS), developed John Skilling, powerful computational technique simulatenously estimating model’s evidence posterior distribution. NS works systematically exploring entire parameter space defined prior distribution, dividing space series small volumes shells. shell drawn contain regions parameter space satisfy likelihood criteria, called L*L^*. volume VV shell defined L*L^* V(L*)=∫L(θ)≥L*π(θ)dθ V(L^*) = \\int_{L(\\theta) \\geq L^*} \\pi(\\theta)d\\theta  V∈[0,1]V \\[0, 1]. divide π(theta)\\pi(theta) enough shells small volumes, can make assumption L*L^* constant within shell; formally, claim L(V)L(V) exists value LL, L(V(L*))=L*L(V(L^*)) = L^*. estimate V*V^* volume, can simplify original multidimensional integral Θ\\Theta unidimensional integral VV: 𝒵=∫01L(V)dV \\mathcal{Z} = \\int_{0}^{1} L(V) dV  can easily solved using numerical methods. Nested sampling enacts transformation series steps: Let NN large number. Draw NN samples π(θ)\\pi(\\theta) sort based likelihood values. live points. Remove point worst likelihood value live points, denoted L*L^*. Place point set dead points. Shrink prior volume. Assuming point represents 1/N1/N prior volume, estimate removing L*L^* changes volume occupied live points δV≈−1/N\\delta V \\approx -1/N. Add new live point, using likelihood restricted prior sampling. sample assumed independently identically distributed, restricted new point must likelihood greater L*L^*. ensures volume live points continue shrink iterations. Perform steps 1 4 many times. Update evidence estimate using numerical integration technique. Ernest uses trapezoidal rule, 𝒵≈∑(∈[1,j])wi\\mathcal{Z} \\approx \\sum(\\[1, j]) w_i iteration ii jj. unormalized posterior weights wiw_i = (V_{- 1} - V_i) (L(V_i) + L(V_{i_1}))/2$ also used later estimate posterior sample. Terminate run. jj iterations, remaining volume contribute 𝒵\\mathcal{Z} become exponentially small, concentrating live points small range likelihood values. point, contributions point evidence estimate considered negligible, run can stopped. final estimate 𝒵̂\\hat{\\mathcal{Z}} available immediately terminating run. dead live points can also resampled using normalized posterior weights wi/𝒵̂w_i / \\hat{\\mathcal{Z}}, generating posterior sample.","code":""},{"path":"https://kylesnap.github.io/ernest/articles/nested-sampling-with-ernest.html","id":"priors-in-nested-sampling","dir":"Articles","previous_headings":"A Nested Sampling Crash Course using ernest","what":"Priors in Nested Sampling","title":"A Nested Sampling Crash Course with Ernest","text":"perform nested sampling, ernest requires likelihood function specification prior space. prior space defined ernest_prior object, can defined using either general create_prior() one ernest’s specialized prior functions. Nested sampling operates drawing samples prior distribution. computational efficiency, ernest draws points unit hypercube: dd-dimensional space coordinate lies [0,1)[0, 1). transformation unit hypercube actual parameter space called “hypercube transformation.” approach allows sampler avoid inefficient rejection sampling ensures points remain valid prior. hypercube transformation typically constructed applying inverse cumulative distribution function (CDF) marginal prior corresponding coordinate unit cube. independent priors, straightforward: parameter’s prior mapped independently. complex hierarchical priors, users can provide custom transformation function encodes dependencies non-standard mappings. simple cases, priors can specified using one several specialized prior constructors common distributions, create_uniform_prior(), create_normal_prior(), others. functions automatically set appropriate hypercube transformation chosen distribution. require complicated prior, can create hypercube transformation function submit create_prior(). function accept vector unit cube coordinates return corresponding vector parameter values. ernest validate function ensure produces finite, correctly-shaped outputs within specified bounds. example, specify 3-dimensional U[−10,10]U[-10, 10] prior, can perform following: prior involves dependencies parameters, can encode transformation function. example, hierarchical prior might look like: specifying prior way, ensure nested sampling explores correct region parameter space, respecting constraints dependencies model requires.","code":"# Three Dimensional Uniform prior <- create_uniform_prior(   3,   lower = -10,    upper = 10,    varnames = c(\"X\", \"Y\", \"Z\") ) prior #> An <ernest_prior/uniform_prior>: 3 variables transformation <- function(x) {   x * 20 - 10 } create_prior(   fn = transformation,   n_dim = 3,   lower = -10,   upper = 10 ) #> An <ernest_prior>: 3 variables hierarchical <- function(theta) {   mu <- qnorm(theta[1], mean = 5, sd = 1)   sigma <- 10 ^ qunif(theta[2], min = -1, max = 1)   x <- qnorm(theta[3], mean = mu, sd = sigma)   c(mu, sigma, x) } create_prior(   fn = hierarchical,   n_dim = 3,   varnames = c(\"mu\", \"sigma\", \"x\"),   lower = c(-Inf, 0, -Inf) ) #> An <ernest_prior>: 3 variables"},{"path":"https://kylesnap.github.io/ernest/articles/nested-sampling-with-ernest.html","id":"running-nested-sampling-in-ernest","dir":"Articles","previous_headings":"A Nested Sampling Crash Course using ernest","what":"Running Nested Sampling in Ernest","title":"A Nested Sampling Crash Course with Ernest","text":"addition prior specification, also need provide ernest log likelihood function. function accept numeric vector parameter values (produced prior’s transformation) return single numeric value representing parameter’s corresponding log likelihood. areas prior space likelihood exist, function instead return -Inf. create_likelihood() wraps function, ensuring missing nonfinite (e.g, Inf, NaN) values handled gracefully nested sampling run. ensures compatibility ernest’s sampling routines robust evidence estimation. Defining likelihood functions every possible model outside scope vignette. sake exploration, consider following likelihood 3D correlated Gaussian distribution. specified prior likelihood, ready set nested sampling run using nested_sampling() function. function prepares ernest_sampler object, manages live points sampling process. sampler argument nested_sampling() determines new live points generated likelihood constraint. present, ernest provides two built-samplers: unif_cube(): Uniformly samples points unit hypercube, rejecting meet likelihood constraint. simple inefficient high dimensions. rwmh_cube(steps = 25L, target_acceptance = 0.5): Uses random walk Metropolis-Hastings algorithm propose new points, efficient moderate high dimensions. practical problems, rwmh_cube() recommended set default choice. can adjust steps target_acceptance parameters tune behavior. initializing sampler, can start nested sampling run using generate(). first calls compile(), constructs validates live points within nested sampler, additional checks likelihood prior well-specified. compilation complete, generate() enters nested sampling loop, iteratively explores parameter space, updating live points accumulating evidence estimates. loop terminates one following termination criteria met: maximum number iterations (max_iterations) reached. maximum number likelihood function calls (max_calls) reached. estimated remaining contribution live points evidence estimate falls specified threshold (min_logz). example, can perform 1000 iterations nested sampling using sampler. can build accurate estimates evidence continuing run min_logz falls 0.05. allows sampler resume sampling retaining previously collected dead points.","code":"n_dim <- 3 sigma <- diag(0.95, nrow = 3) # Covariance matrix det_sigma <- log(det(sigma)) prec <- solve(sigma) # Precision matrix (Sigma^-1) log_norm <- -0.5 * (log(2 * pi) * n_dim + det_sigma) # Normalization for MVG  # Log-likelihood of MVG(0, Sigma) log_lik <- function(theta) {   drop(-0.5 * crossprod(theta, crossprod(prec, theta)) + log_norm) } # Set up a sampler using rwmh_cube sampler <- nested_sampling(   log_lik = log_lik,   prior = prior,   n_points = 500 ) sampler #> An <ernest_sampler>: 500 points, 3 variables. run_1k <- generate(sampler, max_iterations = 1000) #> Creating new live points. #> `min_logz` reached (0.0353770429547848 < 0.05) run_1k #> An <ernest_run>: 500 points, 3 variables #> • 0 iterations, 0 likelihood calls #> • Log. Evidence ≈ -8.951 (± 1.902) run_dlogz <- generate(sampler) #> Creating new live points. #> `min_logz` reached (0.0499766722433228 < 0.05) run_dlogz #> An <ernest_run>: 500 points, 3 variables #> • 78 iterations, 83 likelihood calls #> • Log. Evidence ≈ -8.291 (± 1.749)"},{"path":"https://kylesnap.github.io/ernest/articles/nested-sampling-with-ernest.html","id":"reviewing-nested-sampling-runs","dir":"Articles","previous_headings":"A Nested Sampling Crash Course using ernest","what":"Reviewing Nested Sampling Runs","title":"A Nested Sampling Crash Course with Ernest","text":"show evidence estimates change course run, can use plot() function construct facetted ggplot.  capture uncertainty impacts evidence estimates, calculate() allows simulate nested sampling run series randomly drawn log volume estimates. function calls posterior package efficently store simulations related quantities.  Finally, visualize() function provides plots parameter values .   tools allow thoroughly review interpret results nested sampling analysis.","code":"Calls to `generate()` return an `ernest_run` object, which has methods for several generics to help you inspect and analyze the results from nested sampling. Unlike non-native NS implementations, ernest is designed to integrate neatly with popular R packages like `ggplot2` and `posterior`.  For example, the `summary()` method provides a concise overview of the run, including the number of iterations, live points, and final evidence estimates. It also returns a tibble containing diagnostic quantities for each iteration.   ``` r smry <- summary(run_dlogz) smry #>  #>  [36m── [39m  [1mNested Sampling Results from  [34m<ernest_run> [39m [22m  [36m─────────────────────────────────── [39m #> No. Points: 500 #> No. Iterations: 78 #> No. Lik. Calls: 83 #> Log. Evidence: -8.291 (± 1.749) plot(run_dlogz) # Simulate uncertainty with 1000 draws library(posterior) #> This is posterior version 1.6.1 #>  #> Attaching package: 'posterior' #> The following objects are masked from 'package:stats': #>  #>     mad, sd, var #> The following objects are masked from 'package:base': #>  #>     %in%, match calc_sim <- calculate(run_dlogz, ndraws = 1000)  summary(calc_sim) #>  #> ── Simulated Evidence Estimate from <ernest_estimate> ────────────────────────── #> No. Draws: 1000 #> Log. Evidence: -8.426 (± 0.4725)  plot(calc_sim) # Density plot of posterior marginals visualize(run_dlogz, type = \"density\") # Trace plot of the radial coordinate in unit-cube space visualize(run_dlogz, type = \"trace\", vars = \".radial\", units = \"unit_cube\", radial = TRUE)"},{"path":"https://kylesnap.github.io/ernest/articles/nested-sampling-with-ernest.html","id":"additional-reading","dir":"Articles","previous_headings":"A Nested Sampling Crash Course using ernest","what":"Additional Reading","title":"A Nested Sampling Crash Course with Ernest","text":"Buchner, J. (2023). Nested Sampling Methods. Statistics Surveys, 17, 169–215. https://doi.org/10.1214/23-SS144 Skilling, J. (2004). Nested Sampling. AIP Conference Proceedings, 735(1), 395–405. https://doi.org/10.1063/1.1835238 Skilling, J. (2006). Nested Sampling General Bayesian Computation. Bayesian Analysis, 1(4), 833–859. https://doi.org/10.1214/06-BA127 Speagle, J. (2020). DYNESTY: Dynamic Nested Sampling Package Estimating Bayesian Posteriors Evidences. Monthly Notices Royal Astronomical Society, 493(3), 3132–3158. https://doi.org/10.1093/mnras/staa278.","code":""},{"path":"https://kylesnap.github.io/ernest/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kyle Dewsnap. Author, maintainer.","code":""},{"path":"https://kylesnap.github.io/ernest/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Buchner J (2023). “Nested Sampling Methods.” Statistics Surveys, 17(none), 169–215. doi:10.1214/23-SS144. Skilling J (2004). “Nested Sampling.” AIP Conference Proceedings, 735(1), 395–405. doi:10.1063/1.1835238. Skilling J (2006). “Nested Sampling General Bayesian Computation.” Bayesian Analysis, 1(4), 833–859. doi:10.1214/06-BA127.","code":"@Article{,   title = {Nested Sampling Methods},   author = {Johannes Buchner},   journal = {Statistics Surveys},   year = {2023},   volume = {17},   number = {none},   pages = {169–215},   doi = {10.1214/23-SS144}, } @Article{,   title = {Nested Sampling},   author = {John Skilling},   journal = {AIP Conference Proceedings},   year = {2004},   volume = {735},   number = {1},   pages = {395–405},   doi = {10.1063/1.1835238}, } @Article{,   title = {Nested Sampling for General Bayesian Computation},   author = {John Skilling},   journal = {Bayesian Analysis},   year = {2006},   volume = {1},   number = {4},   pages = {833–859},   doi = {10.1214/06-BA127}, }"},{"path":"https://kylesnap.github.io/ernest/index.html","id":"tools-for-nested-sampling","dir":"","previous_headings":"","what":"The R Nested Sampling Toolkit","title":"The R Nested Sampling Toolkit","text":"best place start learning NS paper, surveying modern applications implementations algorithm. Much ernest developed based paper’s description NS: Buchner, J. (2023). Nested Sampling Methods. Statistics Surveys, 17, 169–215. https://doi.org/10.1214/23-SS144 read original papers describing NS’s development, see: Skilling, J. (2004). Nested Sampling. AIP Conference Proceedings, 735(1), 395–405. https://doi.org/10.1063/1.1835238 Skilling, J. (2006). Nested Sampling General Bayesian Computation. Bayesian Analysis, 1(4), 833–859. https://doi.org/10.1214/06-BA127","code":""},{"path":"https://kylesnap.github.io/ernest/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"The R Nested Sampling Toolkit","text":"can install development version ernest GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"kylesnap/ernest\")"},{"path":"https://kylesnap.github.io/ernest/index.html","id":"why-use-nested-sampling","dir":"","previous_headings":"","what":"Why Use Nested Sampling?","title":"The R Nested Sampling Toolkit","text":"Nested Sampling (NS) Bayesian algorithm developed evaluating plausibility statistical model. Bayesian statistics, describe knowledge model’s unknown parameters using probabilities. use Bayes’ theorem represent new data can used update beliefs model’s parameters ($`\\theta`$): , prior $`\\pi(\\theta)`$ reflects know parameters seeing data, likelihood $`l(\\theta)`$ encodes likelihood parameters given data, posterior $`P(\\theta)`$ reflects updated beliefs $`\\theta`$ learning data. quantity $`\\mathcal{Z}`$, called model evidence marginal likelihood, special interpretation Bayesian inference. reorganize Bayes’ theorem, notice $`\\mathcal{Z}`$ represents probability generating observed sample possible values $`\\theta`$: allows us use $`\\mathcal{Z}`$ represent overall plausibility model given observed data. leads Bayesian model comparison, ratios $`\\mathcal{Z}`$ used make nuanced comparisons different models based plausibility. Aside simple models data, evidence integral solved analytically. address , NS developed method estimate $`\\mathcal{Z}`$ also producing estimate $`P(\\theta)`$. basic terms, NS works dividing prior space nested sequence small volumes shells. sorting shells according worst likelihood value, can used form unidimensional approximation evidence integral can solved using numerical methods. addition providing estimates $`\\mathcal{Z}`$ $`P(\\theta)`$, NS following desirable qualities Bayesian methods Markov-chain Monte Carlo (MCMC): NS conducts global exploration $`\\pi(\\theta)`$; NS can easily traverse complicated poorly-conditioned distributions, multiple modes discontinuities, ; NS defines natural stopping criteria, require burn-runs require supervised testing across convergence termination conditions.","code":"P(\\theta) = \\frac{L(\\theta) \\pi(\\theta)}{\\mathcal{Z}} \\mathcal{Z} = \\int_{\\forall \\theta} L(\\theta) \\pi(\\theta) d\\theta"},{"path":"https://kylesnap.github.io/ernest/index.html","id":"why-use-ernest","dir":"","previous_headings":"","what":"Why Use Ernest?","title":"The R Nested Sampling Toolkit","text":"NS implementations, MultiNest, provide R interfaces nested sampling algorithms originally developed languages (e.g., Python, Fortran). goal Ernest provide complete, native R implementation nested sampling algorithm, designed specifically resources packages already used R programmers.","code":""},{"path":"https://kylesnap.github.io/ernest/index.html","id":"ernest-helps-you-specify-prior-distributions","dir":"","previous_headings":"Why Use Ernest?","what":"Ernest Helps You Specify Prior Distributions","title":"The R Nested Sampling Toolkit","text":"Nested sampling ernest works drawing samples unit hypercube—$`d`$-dimensional space coordinate $`[0, 1)`$. “hypercube transformation” maps coordinates actual parameter space using inverse cumulative distribution function (CDF) marginal prior. approach ensures efficient sampling avoids rejection steps. Ernest allows encode common priors S3 objects convenience functions, like create_uniform_prior() create_normal_prior(). Advanced prior transformations can provided functions create_prior, validate prior specification run performed.","code":""},{"path":"https://kylesnap.github.io/ernest/index.html","id":"ernest-can-start-and-continue-previous-nested-sampling-runs","dir":"","previous_headings":"Why Use Ernest?","what":"Ernest Can Start and Continue Previous Nested Sampling Runs","title":"The R Nested Sampling Toolkit","text":"Ernest allows start new nested sampling run continue existing one using sampler object. call generate() sampler, performs nested sampling stores results ernest_run object. call generate() sampler, Ernest resume run left , retaining previously collected points evidence estimates. makes easy refine results increasing number iterations adjusting stopping criteria without losing previous work.","code":""},{"path":"https://kylesnap.github.io/ernest/index.html","id":"ernest-can-simulate-the-uncertainty-within-evidence-estimates","dir":"","previous_headings":"Why Use Ernest?","what":"Ernest Can Simulate the Uncertainty within Evidence Estimates","title":"The R Nested Sampling Toolkit","text":"calculate() function ernest powerful tool quantifying uncertainty evidence estimates produced nested sampling. default, computes deterministic estimates evidence related quantities. However, can also use calculate() simulate impact uncertainty log volume estimates. allows generates multiple realizations nested sampling process, allowing assess variability robustness evidence estimates. results returned S3 objects summary() plot() methods.","code":""},{"path":"https://kylesnap.github.io/ernest/index.html","id":"prior-art","dir":"","previous_headings":"","what":"Prior Art","title":"The R Nested Sampling Toolkit","text":"addition citations provided, Ernest’s API informed excellent dynesty python package. Speagle, J. (2020). DYNESTY: Dynamic Nested Sampling Package Estimating Bayesian Posteriors Evidences. Monthly Notices Royal Astronomical Society, 493(3), 3132–3158. https://doi.org/10.1093/mnras/staa278. Beyond dynesty, exist several nested sampling implementations popular, non-R programming languages. implementations listed popular, well-maintained, well-documented. addition, nestcheck python package provides methods creating diagnostic plots nested sampling runs. Higson, E., Handley, W., Hobson, M., & Lasenby, . (2019). nestcheck: Diagnostic Tests Nested Sampling Calculations. Monthly Notices Royal Astronomical Society, 483(2), 2044–2056. https://doi.org/10.1093/mnras/sty3090","code":""},{"path":"https://kylesnap.github.io/ernest/reference/as_draws.ernest.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform nested sampling runs to draws objects — as_draws.ernest_run","title":"Transform nested sampling runs to draws objects — as_draws.ernest_run","text":"Try transform ernest_run format supported posterior package.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/as_draws.ernest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform nested sampling runs to draws objects — as_draws.ernest_run","text":"","code":"# S3 method for class 'ernest_run' as_draws(x, ..., units = c(\"original\", \"unit_cube\"), radial = FALSE)  # S3 method for class 'ernest_run' as_draws_matrix(x, ..., units = c(\"original\", \"unit_cube\"), radial = FALSE)  # S3 method for class 'ernest_run' as_draws_rvars(x, ..., units = c(\"original\", \"unit_cube\"), radial = FALSE)"},{"path":"https://kylesnap.github.io/ernest/reference/as_draws.ernest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform nested sampling runs to draws objects — as_draws.ernest_run","text":"x (ernest_run) ernest_run object. ... dots future extensions must empty. units (case-sensitive string) scale return sampled points: \"original\": Points expressed scale prior space. \"unit_cube\": Points expressed scale (0-1)-unit hypercube. radial (logical) Whether return additional column .radial, containing radial coordinate (.e., squared sum squares) sampled point.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/as_draws.ernest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform nested sampling runs to draws objects — as_draws.ernest_run","text":"draws object, containing posterior samples nested sampling run. samples also bound importance weight (log. units). exact type returned object depends function used: as_draws as_draws_matrix, posterior::draws_matrix() object, classes c(\"draws_matrix\", \"draws\", \"matrix\"). as_draws_rvars, posterior::draws_rvars() object, classes c(\"draws_rvars\", \"draws\", \"list\").","code":""},{"path":"https://kylesnap.github.io/ernest/reference/as_draws.ernest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform nested sampling runs to draws objects — as_draws.ernest_run","text":"","code":"# Load example run library(posterior) #> This is posterior version 1.6.1 #>  #> Attaching package: ‘posterior’ #> The following objects are masked from ‘package:stats’: #>  #>     mad, sd, var #> The following objects are masked from ‘package:base’: #>  #>     %in%, match data(example_run)  # View importance weights dm <- as_draws(example_run) weights(dm) |> head() #> [1] 3.683541e-63 2.664969e-62 5.223388e-60 1.228488e-56 1.237960e-55 #> [6] 1.292101e-54  # Summarize points after resampling dm |>  resample_draws() |>  summarize_draws() #> # A tibble: 3 × 10 #>   variable     mean  median    sd   mad    q5   q95  rhat ess_bulk ess_tail #>   <chr>       <dbl>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>    <dbl>    <dbl> #> 1 x         0.00512  0.0209 0.975 0.970 -1.64  1.59  1.18    2117.     14.2 #> 2 y        -0.00754 -0.0113 0.986 0.977 -1.61  1.65  1.23    2090.     14.6 #> 3 z         0.0314   0.0243 1.00  1.01  -1.63  1.62  1.19    2207.     14.4  # View the radial coordinate in the unit-space over the run dm_rad <- as_draws_rvars(  example_run,  units = \"unit_cube\",  radial = TRUE ) plot(   x = example_run$log_volume,   y = draws_of(dm_rad$.radial),   xlab = \"Log volume\",   ylab = \"Radial coordinate\" )"},{"path":"https://kylesnap.github.io/ernest/reference/calculate.ernest_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate Evidence using a Nested Sampling Run — calculate.ernest_run","title":"Estimate Evidence using a Nested Sampling Run — calculate.ernest_run","text":"Computes evidence related quantities nested sampling run, optionally simulating volumes nested likelihood shell.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/calculate.ernest_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate Evidence using a Nested Sampling Run — calculate.ernest_run","text":"","code":"# S3 method for class 'ernest_run' calculate(x, ..., ndraws = NULL)"},{"path":"https://kylesnap.github.io/ernest/reference/calculate.ernest_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate Evidence using a Nested Sampling Run — calculate.ernest_run","text":"x (ernest_run) ernest_run object. ... dots future extensions must empty. ndraws (positive integer zero, optional) number log volume sequences simulate. equal zero, simulations made, one draw vector log volumes produced estimates contained x. NULL, getOption(\"posterior.rvar_ndraws\") used (default 4000).","code":""},{"path":"https://kylesnap.github.io/ernest/reference/calculate.ernest_run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate Evidence using a Nested Sampling Run — calculate.ernest_run","text":"tibble, containing run$n_iter + run$n_points rows following columns: log_lik: log-likelihood model. log_volume: log volume prior space. log_weight: log weights live points. log_evidence: log evidence model. log_evidence_err: standard error log evidence (available ndraws = 0). tibble additional class ernest_estimate, plot method. column returned posterior::rvar() vector.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/calculate.ernest_run.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate Evidence using a Nested Sampling Run — calculate.ernest_run","text":"Use calculate() simulate estimation error nested sampling runs caused approximating change log volume iterations. Given use ordered log likelihood restricted prior sampling, volumes can modelled order statistics uniform random variable. Ernest uses following distributions perform simulation: Constant number live points: iteration, point lowest likelihood replaced new sample constrained higher likelihood region. setup, shrinkage prior volume iteration can shown follow Beta distribution. Decreasing number live points: end sampling run, remaining live points added dead point set. introduces discrete stepwise behavior volume shrinkage. Ernest uses transformation variables drawn exponential distribution simulate corresponding changes volume.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/calculate.ernest_run.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimate Evidence using a Nested Sampling Run — calculate.ernest_run","text":"See Appendix A6 Speagle, J. (2020).","code":""},{"path":"https://kylesnap.github.io/ernest/reference/calculate.ernest_run.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate Evidence using a Nested Sampling Run — calculate.ernest_run","text":"","code":"# Load an example run data(example_run)  # View results as a tibble with `ndraws = FALSE` (the default). calculate(example_run) #> An <ernest_calculate>: 4000 draws x 5225 iterations  # Generate 100 simulated log volume values for each iteration. calculate(example_run, ndraws = 100) #> An <ernest_calculate>: 100 draws x 5225 iterations"},{"path":"https://kylesnap.github.io/ernest/reference/compile.ernest_sampler.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare an ernest_sampler object for nested sampling — compile.ernest_sampler","title":"Prepare an ernest_sampler object for nested sampling — compile.ernest_sampler","text":"Create new set live points/particles new nested sampling run, check current state live points continuing previous run.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/compile.ernest_sampler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare an ernest_sampler object for nested sampling — compile.ernest_sampler","text":"","code":"# S3 method for class 'ernest_sampler' compile(object, ..., seed = NA)  # S3 method for class 'ernest_run' compile(object, ..., seed = NA, clear = FALSE)"},{"path":"https://kylesnap.github.io/ernest/reference/compile.ernest_sampler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare an ernest_sampler object for nested sampling — compile.ernest_sampler","text":"object (ernest_sampler ernest_run) object class ernest_sampler ernest_run. ... dots future extensions must empty. seed (integer NA, optional) Specification random number generator. integer NULL: Passed set.seed(). NULL, reinitializes generator seed yet set. NA: Make changes current seed. compile called object , NA ensure seed remain identical runs. clear (boolean) Whether clear results previous runs compiling. TRUE: Previous results stored object removed, live points generated validated. FALSE: Previous results stored object retained, live points validated.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/compile.ernest_sampler.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare an ernest_sampler object for nested sampling — compile.ernest_sampler","text":"object, valid set live points stored live_points environment.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/compile.ernest_sampler.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prepare an ernest_sampler object for nested sampling — compile.ernest_sampler","text":"compile function prepares ernest_sampler object nested sampling ensuring set live points valid ready use. addition constructing live point set runs, compile also ensures : live points represented within unit hypercube. wrapped likelihood function ernest_likelihood valid return value point (either finite double -Inf). live points represent perfect plateau (.e., points share likelihood). warned 25% points share likelihood value. compile fails validation steps, set live points removed object, preventing calling generate() malformed sampler.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/compile.ernest_sampler.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare an ernest_sampler object for nested sampling — compile.ernest_sampler","text":"","code":"prior <- create_uniform_prior(n_dim = 2, lower = -1, upper = 1) ll_fn <- function(x) -sum(x^2) sampler <- nested_sampling(ll_fn, prior, n_point = 100)  # Add live points to the sampler compile(sampler) #> Creating new live points. #> An <ernest_sampler>: 100 points, 2 variables.  head(sampler$live_points$unit) #>            [,1]      [,2] #> [1,] 0.09835554 0.9962997 #> [2,] 0.63156029 0.2758369 #> [3,] 0.52607535 0.8661605 #> [4,] 0.29708323 0.8997379 #> [5,] 0.90305406 0.2023974 #> [6,] 0.76257754 0.6061582  # Check the status of the sampler with `clear = FALSE` compile(sampler, clear = FALSE) #> Error in compile(sampler, clear = FALSE): `...` must be empty. #> ✖ Problematic argument: #> • clear = FALSE head(sampler$live_points$unit) #>            [,1]      [,2] #> [1,] 0.09835554 0.9962997 #> [2,] 0.63156029 0.2758369 #> [3,] 0.52607535 0.8661605 #> [4,] 0.29708323 0.8997379 #> [5,] 0.90305406 0.2023974 #> [6,] 0.76257754 0.6061582  # Reset the sampler with new live points with `clear = TRUE` compile(sampler, clear = TRUE) #> Error in compile(sampler, clear = TRUE): `...` must be empty. #> ✖ Problematic argument: #> • clear = TRUE head(sampler$live_points$unit) #>            [,1]      [,2] #> [1,] 0.09835554 0.9962997 #> [2,] 0.63156029 0.2758369 #> [3,] 0.52607535 0.8661605 #> [4,] 0.29708323 0.8997379 #> [5,] 0.90305406 0.2023974 #> [6,] 0.76257754 0.6061582"},{"path":"https://kylesnap.github.io/ernest/reference/create_cauchy_prior.html","id":null,"dir":"Reference","previous_headings":"","what":"Specify a prior with Cauchy-distributed marginals — create_cauchy_prior","title":"Specify a prior with Cauchy-distributed marginals — create_cauchy_prior","text":"specialization create_prior(), parameter space described independently distributed Cauchy marginals possibly truncated.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/create_cauchy_prior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify a prior with Cauchy-distributed marginals — create_cauchy_prior","text":"","code":"create_cauchy_prior(   n_dim,   location = 0,   scale = 1,   varnames = NULL,   lower = -Inf,   upper = Inf )"},{"path":"https://kylesnap.github.io/ernest/reference/create_cauchy_prior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify a prior with Cauchy-distributed marginals — create_cauchy_prior","text":"n_dim (positive integer) dimensionality prior distribution. location, scale location scale parameters. varnames (optional character vector) character vector names variables prior distribution. lower, upper (optional numeric vector) values retain truncated distribution.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/create_cauchy_prior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specify a prior with Cauchy-distributed marginals — create_cauchy_prior","text":"cauchy_prior, subclass ernest_prior efficient implementation unit hypercube transformation.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/create_cauchy_prior.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Specify a prior with Cauchy-distributed marginals — create_cauchy_prior","text":"truncation routine: Nadarajah, S., & Kotz, S. (2006). R Programs Truncated Distributions. Journal Statistical Software, Code Snippets, 16(2), 1–8. https://doi.org/10.18637/jss.v016.c02","code":""},{"path":[]},{"path":"https://kylesnap.github.io/ernest/reference/create_cauchy_prior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Specify a prior with Cauchy-distributed marginals — create_cauchy_prior","text":"","code":"prior <- create_cauchy_prior(3, location = c(0, 0, -2), scale = c(0.5, 1, 1)) prior$fn(c(0.25, 0.5, 0.75)) #> [1] -0.5  0.0 -1.0"},{"path":"https://kylesnap.github.io/ernest/reference/create_likelihood.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare a likelihood function for nested sampling — create_likelihood","title":"Prepare a likelihood function for nested sampling — create_likelihood","text":"Creates modified version log. likelihood function always returns either finite value -Inf vector parameters provided.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/create_likelihood.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare a likelihood function for nested sampling — create_likelihood","text":"","code":"create_likelihood(fn, ...)  # S3 method for class 'ernest_likelihood' create_likelihood(   fn,   error_action = c(\"abort\", \"warn\"),   nonfinite_action = c(\"warn\", \"pass\", \"abort\"),   auto_batch = TRUE,   ... )  # S3 method for class '`function`' create_likelihood(   fn,   error_action = c(\"abort\", \"warn\"),   nonfinite_action = c(\"warn\", \"pass\", \"abort\"),   auto_batch = TRUE,   ... )"},{"path":"https://kylesnap.github.io/ernest/reference/create_likelihood.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare a likelihood function for nested sampling — create_likelihood","text":"fn (uni-variate function) log-likelihood function (see Details). ... dots future extensions must empty. error_action (case-sensitive string) Action perform fn throws error. \"abort\": Stop execution signal error. \"warn\": Issue warning replace output -Inf. nonfinite_action (case-sensitive string) Action perform fn passes value finite double -Inf. \"warn\": Issue warning replace values -Inf. \"pass\": Silently replace values -Inf. \"abort\": Stop execution signal error. auto_batch (logical) Whether prepare fn may called matrix parameter values. FALSE, assumed fn can already produce vector likelihood values matrix rows parameter vectors.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/create_likelihood.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare a likelihood function for nested sampling — create_likelihood","text":"function additional class ernest_likelihood. function accept vectors parameters, matrices parameters, row represents single parameter vector. ernest_likelihood always produce either scalar vector doubles containing finite values -Inf; values outside range either replaced -Inf cause errors.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/create_likelihood.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prepare a likelihood function for nested sampling — create_likelihood","text":"Model likelihoods provided log density function. expected fn take exactly one argument; likelihood functions take multiple non-default arguments entered anonymous functions (see rlang::as_function()). See vignettes example entering data anonymous function. expected fn returns scalar finite values -Inf parameter vector. Use error_action nonfinite_action decide ernest_likelihood handles errors, non-finite, non-numeric return values fn. default, auto_batch expects fn incapable handling matrices parameter values. resolves wrapping fn call base::apply(). efficient implementation likelihood function, consider setting auto_batch FALSE.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/create_likelihood.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare a likelihood function for nested sampling — create_likelihood","text":"","code":"# A 3D Gaussian likelihood function n_dim <- 3 sigma <- diag(0.95, nrow = 3) det_sigma <- determinant(sigma, logarithm = TRUE)$modulus attributes(det_sigma) <- NULL prec <- solve(sigma) log_norm <- -0.5 * (log(2 * pi) * n_dim + det_sigma)  fn <- function(theta) {   drop(-0.5 * crossprod(theta, crossprod(prec, theta)) + log_norm) } log_lik <- create_likelihood(fn) log_lik(c(0, 0, 0)) #> [1] -2.679876  # As default, `log_lik` will loudly replace non-finite, non-`-Inf` values. try(log_lik(c(Inf, 0, 0))) #> Warning: `fn` must return finite numeric values or `-Inf`. #> ! Replacing `NaN` with `-Inf`. #> [1] -Inf  # Silence warnings with `nonfinite_action = \"pass\"` quiet_lik <- create_likelihood(log_lik, nonfinite_action = \"pass\") quiet_lik(c(Inf, 0, 0)) #> [1] -Inf"},{"path":"https://kylesnap.github.io/ernest/reference/create_normal_prior.html","id":null,"dir":"Reference","previous_headings":"","what":"Specify a prior with normally-distributed marginals. — create_normal_prior","title":"Specify a prior with normally-distributed marginals. — create_normal_prior","text":"specialization create_prior(), parameter space described independently distributed normal variables possibly truncated.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/create_normal_prior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify a prior with normally-distributed marginals. — create_normal_prior","text":"","code":"create_normal_prior(   n_dim,   mean = 0,   sd = 1,   varnames = NULL,   lower = -Inf,   upper = Inf )"},{"path":"https://kylesnap.github.io/ernest/reference/create_normal_prior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify a prior with normally-distributed marginals. — create_normal_prior","text":"n_dim (positive integer) dimensionality prior distribution. mean vector means. sd vector standard deviations. varnames (optional character vector) character vector names variables prior distribution. lower, upper (optional numeric vector) values retain truncated distribution.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/create_normal_prior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specify a prior with normally-distributed marginals. — create_normal_prior","text":"normal_prior, subclass ernest_prior efficient implementation unit hypercube transformation.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/create_normal_prior.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Specify a prior with normally-distributed marginals. — create_normal_prior","text":"truncation routine: Nadarajah, S., & Kotz, S. (2006). R Programs Truncated Distributions. Journal Statistical Software, Code Snippets, 16(2), 1–8. https://doi.org/10.18637/jss.v016.c02","code":""},{"path":[]},{"path":"https://kylesnap.github.io/ernest/reference/create_normal_prior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Specify a prior with normally-distributed marginals. — create_normal_prior","text":"","code":"prior <- create_normal_prior(3) prior$fn(c(0.25, 0.5, 0.75)) #> [1] -0.6744898  0.0000000  0.6744898"},{"path":"https://kylesnap.github.io/ernest/reference/create_prior.html","id":null,"dir":"Reference","previous_headings":"","what":"Specify a prior distribution for nested sampling — create_prior","title":"Specify a prior distribution for nested sampling — create_prior","text":"Use R function specify prior distribution parameters nested sampling run.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/create_prior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify a prior distribution for nested sampling — create_prior","text":"","code":"create_prior(   fn,   n_dim,   varnames = \"X\",   lower = NULL,   upper = NULL,   auto_batch = TRUE )"},{"path":"https://kylesnap.github.io/ernest/reference/create_prior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify a prior distribution for nested sampling — create_prior","text":"fn (function) unit hypercube transformation (see Details). n_dim (positive integer) dimensionality prior distribution. varnames (optional character vector) character vector names variables prior distribution. lower, upper (optional numeric vector) expected bounds parameter vectors hypercube transformation. Set -Inf Inf default. auto_batch (logical) Whether prepare fn may called matrix parameter values. FALSE, assumed fn can already produce vector likelihood values matrix rows parameter vectors.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/create_prior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specify a prior distribution for nested sampling — create_prior","text":"named list class ernest_prior. list contains following: fn: prior transformation function. n_dim: number dimensions prior space. varnames: Names variables prior distribution, recycled length n_dim transformed make.unique(). lower upper: Bounds prior distribution, recycled length n_dim.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/create_prior.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Specify a prior distribution for nested sampling — create_prior","text":"unit hypercube transformation encodes points within parameter space independent identically distributed points within unit hypercube. Implementations nested sampling, including ernest, use transformation simplify likelihood-restricted prior sampling, avoiding uncessary rejection steps. ernest, create_prior function allows specify prior distribution. requires provide transformation function. many cases, prior can factorized, function can simply transforming vector values (0, 1) transforming elementwise inverse cumulative distribution function (CDF) parameter. complex cases, can specify hierarchical conditionally-dependent prior (see Examples). ernest perform several regularity checks fn prior created. checks passed : fn function; fn(rep(0.5, n_dim)) returns finite double vector length n_dim; fn, given matrix random unit cube coordinates, returns finite double matrix dimensions respect specified bounds. default, auto_batch expects fn incapable handling matrices unit cube values. resolves wrapping fn call base::apply(). efficient implementation likelihood function, consider setting auto_batch == FALSE. Failing checks fn auto_batch = FALSE remind user setting.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/create_prior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Specify a prior distribution for nested sampling — create_prior","text":"","code":"# 3D uniform prior in the range [-10, 10] unif <- function(x) {    -10 + x * 20 }  prior <- create_prior(unif, n_dim = 3, lower = -10, upper = 10) prior$fn(c(0.25, 0.5, 0.75)) #> [1] -5  0  5 mat <- matrix(c(0.25, 0.5, 0.75, 0.1, 0.2, 0.3), ncol = 3, byrow = TRUE) prior$fn(mat) #>      [,1] [,2] [,3] #> [1,]   -5    0    5 #> [2,]   -8   -6   -4  # A normal prior, with a parameterized mean and standard deviation hier_f <- function(theta) {   mu <- qnorm(theta[1], mean = 5) # mu ~ N(5, 1)   sigma <- 10 ^ qunif(theta[2], min = -1, max = 1) # log10(sigma) ~ U[-1, 1]    x <- qnorm(theta[3], mu, sigma) # X ~ N(mu, sigma)   c(mu, sigma, x) } create_prior(   hier_f,   n_dim = 3,   varnames = c(\"mu\", \"sigma\", \"x\"),   lower = c(-Inf, 0, -Inf) ) #> An <ernest_prior>: 3 variables  # Setting `auto_batch = FALSE` should be done with care bb_p <- function(x) {   beta <- stats::qbeta(x[1], 5, 5)   bern <- stats::qbinom(x[2], size = 1, beta)   c(beta, bern) } try(  create_prior(   bb_p,   n_dim = 2,   varnames = c(\"beta\", \"bern\"),   auto_batch = FALSE  ) ) #> Error in create_prior(bb_p, n_dim = 2, varnames = c(\"beta\", \"bern\"), auto_batch = FALSE) :  #>   Can't transform values in a test matrix. #> ℹ Can `fn` handle matrices without setting `auto_batch = TRUE`? #> Caused by error in `create_prior()`: #> ! `fn(test_matrix)` must be of type 'matrix', not 'double'. create_prior(bb_p, n_dim = 2, varnames = c(\"beta\", \"bern\")) #> An <ernest_prior>: 2 variables"},{"path":"https://kylesnap.github.io/ernest/reference/create_t_prior.html","id":null,"dir":"Reference","previous_headings":"","what":"Specify a prior with Student's t-distributed marginals — create_t_prior","title":"Specify a prior with Student's t-distributed marginals — create_t_prior","text":"specialization create_prior(), parameter space described independently distributed Student's t marginals possibly truncated.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/create_t_prior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify a prior with Student's t-distributed marginals — create_t_prior","text":"","code":"create_t_prior(   n_dim,   df,   mu = 0,   sigma = 1,   varnames = NULL,   lower = -Inf,   upper = Inf )"},{"path":"https://kylesnap.github.io/ernest/reference/create_t_prior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify a prior with Student's t-distributed marginals — create_t_prior","text":"n_dim (positive integer) dimensionality prior distribution. df degrees freedom (\\(> 0\\), maybe non-integer).  df       = Inf allowed. mu location parameter distribution. ncp == 0 (NULL), median. sigma scale parameter distribution. varnames (optional character vector) character vector names variables prior distribution. lower, upper (optional numeric vector) values retain truncated distribution.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/create_t_prior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specify a prior with Student's t-distributed marginals — create_t_prior","text":"student_t_prior, subclass ernest_prior efficient implementation unit hypercube transformation.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/create_t_prior.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Specify a prior with Student's t-distributed marginals — create_t_prior","text":"parameters used specify prior location-scale t-distribution location \\(\\mu\\), scale \\(\\sigma\\), degrees freedom \\(\\nu\\). random variable \\(X\\) Student-T distributed, $$X \\sim \\mu + \\sigma T$$ \\(T\\) follows Student-T distribution \\(\\nu\\) degrees freedom.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/create_t_prior.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Specify a prior with Student's t-distributed marginals — create_t_prior","text":"truncation routine: Nadarajah, S., & Kotz, S. (2006). R Programs Truncated Distributions. Journal Statistical Software, Code Snippets, 16(2), 1–8. https://doi.org/10.18637/jss.v016.c02","code":""},{"path":[]},{"path":"https://kylesnap.github.io/ernest/reference/create_t_prior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Specify a prior with Student's t-distributed marginals — create_t_prior","text":"","code":"prior <- create_t_prior(3, df = c(1,2,5), mu = c(0,1,2), sigma = c(1,2,3)) prior$fn(c(0.25, 0.5, 0.75)) #> [1] -1.000000  1.000000  4.180061"},{"path":"https://kylesnap.github.io/ernest/reference/create_uniform_prior.html","id":null,"dir":"Reference","previous_headings":"","what":"Specify a prior with Uniformly-distributed marginals — create_uniform_prior","title":"Specify a prior with Uniformly-distributed marginals — create_uniform_prior","text":"specialization create_prior(), parameter space described independently distributed uniform marginals.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/create_uniform_prior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify a prior with Uniformly-distributed marginals — create_uniform_prior","text":"","code":"create_uniform_prior(n_dim, lower = 0, upper = 1, varnames = NULL)"},{"path":"https://kylesnap.github.io/ernest/reference/create_uniform_prior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify a prior with Uniformly-distributed marginals — create_uniform_prior","text":"n_dim (positive integer) dimensionality prior distribution. lower, upper (Numeric vectors) bounds distribution. varnames (optional character vector) character vector names variables prior distribution.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/create_uniform_prior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specify a prior with Uniformly-distributed marginals — create_uniform_prior","text":"uniform_prior, subclass ernest_prior efficient implementation unit hypercube transformation.","code":""},{"path":[]},{"path":"https://kylesnap.github.io/ernest/reference/create_uniform_prior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Specify a prior with Uniformly-distributed marginals — create_uniform_prior","text":"","code":"prior <- create_uniform_prior(2, lower = c(3, -2), upper = c(5, 4)) prior$fn(c(0.33, 0.67)) #> [1] 3.66 2.02"},{"path":"https://kylesnap.github.io/ernest/reference/ernest-package.html","id":null,"dir":"Reference","previous_headings":"","what":"ernest: The R Nested Sampling Toolkit — ernest-package","title":"ernest: The R Nested Sampling Toolkit — ernest-package","text":"TODO.","code":""},{"path":[]},{"path":"https://kylesnap.github.io/ernest/reference/ernest-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ernest: The R Nested Sampling Toolkit — ernest-package","text":"Maintainer: Kyle Dewsnap kyle.dewsnap@ubc.ca (ORCID)","code":""},{"path":"https://kylesnap.github.io/ernest/reference/ernest_run-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Results from nested sampling runs — ernest_run-class","title":"Results from nested sampling runs — ernest_run-class","text":"ernest_run object contains results nested sampling run. methods summary, plotting, simulating uncertainty around run's estimates.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/ernest_run-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Results from nested sampling runs — ernest_run-class","text":"ernest_run object returned running nested sampling procedure ernest package. can used posterior analysis, evidence estimation, diagnostic plotting.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/ernest_run-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Results from nested sampling runs — ernest_run-class","text":"n_iter Total number iterations performed. n_points Number points drawn live set. n_calls Number calls log likelihood function. log_lik vector log likelihood values associated point generated run. log_volume vector estimated prior volumes associated removal point live set. log_weight vector unnormalized posterior weights point. log_evidence vector log. evidence estimates, generated removal point. log_evidence_var vector uncertainty values associated entry log_evidence. 1. information vector estimated KL-divergence (information) prior posterior distributions. id index point within live set. points number live points associated point's removal. calls number likelihood calls made generating replacement live point. birth iteration point created added live set. samples matrix sampled points, expressed units prior space. samples_unit Identical samples, expressed units 0-1 hypercube. spec pairlist, describing log_lik, prior, sampler, first_update, update_interval used produce run, well min_logz value run terminated .","code":""},{"path":[]},{"path":"https://kylesnap.github.io/ernest/reference/ernest_run-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Results from nested sampling runs — ernest_run-class","text":"","code":"# Load an example of a nested sampling run data(example_run) example_run #> An <ernest_run>: 500 points, variables #> • 4725 iterations, 110076 likelihood calls #> • Log. Evidence ≈ -9.11 (± 0.115)"},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampling.html","id":null,"dir":"Reference","previous_headings":"","what":"Specify a likelihood-restricted prior sampler (LRPS) — ernest_sampling","title":"Specify a likelihood-restricted prior sampler (LRPS) — ernest_sampling","text":"Choose method replacing worst point live set possible parameter values. unif_cube() region-based sampler, points generated sampling uniformly within unit hypercube, returning point sampled point exceeds  prior likelihood constraint sample randomly prior reject point likelihood constraint fulfilled. method horribly inefficient even moderately-large dimensions, useful testing debugging. rwmh_cube MCMC-based sampler, points generated taking random steps within unit hypercube.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify a likelihood-restricted prior sampler (LRPS) — ernest_sampling","text":"","code":"unif_cube()  rwmh_cube(steps = 25L, target_acceptance = 0.5)"},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify a likelihood-restricted prior sampler (LRPS) — ernest_sampling","text":"steps (positive integer) Number steps take generating proposal point. target_acceptance (double 0 1) target acceptance rate sampler.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampling.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specify a likelihood-restricted prior sampler (LRPS) — ernest_sampling","text":"ernest_sampling object, used ernest_sampler initialization create R environment LRPS.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampling.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Specify a likelihood-restricted prior sampler (LRPS) — ernest_sampling","text":"Nested sampling first generates set independently distributed live points within prior space, iteratively improves set replacing point worst likelihood new, improved point. ernest, strategies evolving points collectively called likelihood-restricted prior samplers. present, ernest offers two LRPS: naive region-based sampler, randomly samples unit cube, sophisticated random walk Metropolis-Hastings sampler, takes random point live set walks number steps. updated run (see nested_sampling()), sampler adjust step-size target specified acceptance rate.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampling.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Specify a likelihood-restricted prior sampler (LRPS) — ernest_sampling","text":"unif_cube rw_walk based implementations found dynesty python package.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampling.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Specify a likelihood-restricted prior sampler (LRPS) — ernest_sampling","text":"","code":"rwmh_cube() #> $parameters #> $parameters$steps #> [1] 25 #>  #> $parameters$target_acceptance #> [1] 0.5 #>  #>  #> $name #> [1] \"Random Walk Cube\" #>  #> $class #> <rwcube_lrps> object generator #>   Inherits from: <ernest_lrps> #>   Public: #>     initialize: function (log_lik, prior_fn, n_dim, steps = 25L, target_acceptance = 0.5)  #>     clear: function ()  #>     update: function ()  #>     propose_live: function (original, criteria)  #>     as_string: function ()  #>     clone: function (deep = FALSE)  #>   Active bindings: #>     history: function ()  #>     epsilon: function ()  #>     acceptance_ratio: function ()  #>   Private: #>     steps: NULL #>     target_acceptance: NULL #>     cur_epsilon: 1 #>     n_accept: 0 #>     hist_accept: vctrs_list_of, vctrs_vctr, list #>     hist_epsilon: vctrs_list_of, vctrs_vctr, list #>     increment: function (res)  #>   Parent env: <environment: namespace:ernest> #>   Locked objects: TRUE #>   Locked class: TRUE #>   Portable: FALSE #>  #> attr(,\"class\") #> [1] \"ernest_sampling\" rwmh_cube(steps = 20) #> $parameters #> $parameters$steps #> [1] 20 #>  #> $parameters$target_acceptance #> [1] 0.5 #>  #>  #> $name #> [1] \"Random Walk Cube\" #>  #> $class #> <rwcube_lrps> object generator #>   Inherits from: <ernest_lrps> #>   Public: #>     initialize: function (log_lik, prior_fn, n_dim, steps = 25L, target_acceptance = 0.5)  #>     clear: function ()  #>     update: function ()  #>     propose_live: function (original, criteria)  #>     as_string: function ()  #>     clone: function (deep = FALSE)  #>   Active bindings: #>     history: function ()  #>     epsilon: function ()  #>     acceptance_ratio: function ()  #>   Private: #>     steps: NULL #>     target_acceptance: NULL #>     cur_epsilon: 1 #>     n_accept: 0 #>     hist_accept: vctrs_list_of, vctrs_vctr, list #>     hist_epsilon: vctrs_list_of, vctrs_vctr, list #>     increment: function (res)  #>   Parent env: <environment: namespace:ernest> #>   Locked objects: TRUE #>   Locked class: TRUE #>   Portable: FALSE #>  #> attr(,\"class\") #> [1] \"ernest_sampling\" unif_cube() #> $parameters #> list() #>  #> $name #> [1] \"Uniform Cube\" #>  #> $class #> <uniform_lrps> object generator #>   Inherits from: <ernest_lrps> #>   Public: #>     initialize: function (log_lik, prior_fn, n_dim)  #>     clear: function ()  #>     update: function (...)  #>     propose_live: function (original, criteria)  #>     as_string: function ()  #>     clone: function (deep = FALSE)  #>   Parent env: <environment: namespace:ernest> #>   Locked objects: TRUE #>   Locked class: TRUE #>   Portable: FALSE #>  #> attr(,\"class\") #> [1] \"ernest_sampling\""},{"path":"https://kylesnap.github.io/ernest/reference/example_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Nested Sampling Run with Ernest — example_run","title":"Example Nested Sampling Run with Ernest — example_run","text":"Load precomputed example nested sampling run generated using ernest package. demonstrates typical output nested sampling run simple 3-dimensional Gaussian likelihood, uniform prior dimension. dataset intended use documentation, tutorials, gainining experience ernest_run's S3 methods.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/example_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Nested Sampling Run with Ernest — example_run","text":"","code":"example_run"},{"path":"https://kylesnap.github.io/ernest/reference/example_run.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example Nested Sampling Run with Ernest — example_run","text":"object class ernest_run containing results nested sampling run.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/example_run.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example Nested Sampling Run with Ernest — example_run","text":"example problem comes crash course dynesty Python-based nested sampling software.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/example_run.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example Nested Sampling Run with Ernest — example_run","text":"likelihood used generate points \\(MVN(0, \\Sigma)\\), variance \\(\\Sigma\\) set 1 covariance set 0.95. prior parameter uniform interval [-10, 10\\]. run uses following non-default settings: log_lik: 3D multivariate Gaussian mean zero covariance matrix diag(0.95, 3). prior: Uniform dimension (x, y, z) range [-10, 10]. Seed: 42 View $spec element example_run see full R specification likelihood prior. [-10, 10]: R:-10,%2010%5C [-10, 10]: R:-10,%2010","code":""},{"path":[]},{"path":"https://kylesnap.github.io/ernest/reference/generate.ernest_sampler.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform nested sampling — generate.ernest_sampler","title":"Perform nested sampling — generate.ernest_sampler","text":"Execute nested sampling loop. Iteratively replaces worst live point set point drawn likelihood-restricted prior sampler, provided stopping criterion met.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/generate.ernest_sampler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform nested sampling — generate.ernest_sampler","text":"","code":"# S3 method for class 'ernest_sampler' generate(   x,   ...,   max_iterations = NULL,   max_calls = NULL,   min_logz = 0.05,   show_progress = FALSE )"},{"path":"https://kylesnap.github.io/ernest/reference/generate.ernest_sampler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform nested sampling — generate.ernest_sampler","text":"x (ernest_sampler) object class ernest_sampler. ... Arguments passed compile.ernest_run seed (integer NA, optional) Specification random number generator. integer NULL: Passed set.seed(). NULL, reinitializes generator seed yet set. NA: Make changes current seed. compile called object , NA ensure seed remain identical runs. clear (boolean) Whether clear results previous runs compiling. TRUE: Previous results stored object removed, live points generated validated. FALSE: Previous results stored object retained, live points validated. max_iterations (positive integer) maximum number iterations perform. set Inf, stopping criterion ignored. max_calls (positive integer) maximum number calls likelihood function. set Inf, stopping criterion ignored. min_logz (positive double zero) minimum ratio current log evidence remaining log evidence (see Details). set zero, stopping criterion ignored. show_progress Whether show simple progress spinner iteration counter run.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/generate.ernest_sampler.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform nested sampling — generate.ernest_sampler","text":"object class ernest_run, containing results nested sampling run.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/generate.ernest_sampler.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform nested sampling — generate.ernest_sampler","text":"least one max_iterations, max_calls, min_logz  must represent non-ignored stopping criterion. iteration \\(\\), remaining log evidence within prior space bound minimum likelihood criterion can estimated $$Z^*_i \\approx L^{(max)}_i V_i$$ \\(L^{(max)}_i\\) maximum likelihood current live points \\(V_i\\) estimated remaining volume. estimate can used define relative stopping criterion based log-ratio current estimated evidence \\(\\hat{Z_i}\\) remaining evidence, $$\\delta \\log(Z) = \\log(\\hat{Z_i} - Z^*_i) - \\log(\\hat{Z_i})$$ setting min_logz, can vary minimum log-ratio sampling stops. \\(\\delta \\log(Z)\\) falls value, can assume negligible fraction evidence remains unaccounted final evidence estimates. x already contains results previous calls generate(), generate() ensure stopping criterion already surpassed previous runs. Control verbosity messages ernest runs rlib_message_verbosity enviroment option.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/generate.ernest_sampler.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform nested sampling — generate.ernest_sampler","text":"","code":"prior <- create_uniform_prior(n_dim = 2, lower = -1, upper = 1) ll_fn <- function(x) -sum(x^2) sampler <- nested_sampling(ll_fn, prior, n_point = 100) sampler #> An <ernest_sampler>: 100 points, 2 variables.   # Stop sampling after a set number of iterations or calls to the lik. func. generate(sampler, max_iterations = 100) #> Creating new live points. #> An <ernest_run>: 100 points, 2 variables #> • 100 iterations, 168 likelihood calls #> • Log. Evidence ≈ -0.612 (± 0.124)  # The final number of calls may be larger than `max_calls`, as `generate` # only checks the number of calls when removing a live point. generate(sampler, max_calls = 2600) #> Creating new live points. #> Error in \"lapply(text, glue_cmd, .envir = .envir)\": ! Could not evaluate cli `{}` expression: `max_c`. #> Caused by error in `eval(expr, envir = envir)`: #> ! object 'max_c' not found  # Use the default stopping criteria if (FALSE)  generate(sampler)  # \\dontrun{}"},{"path":"https://kylesnap.github.io/ernest/reference/nested_sampling.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare a nested sampler to evaluate Bayesian evidence — nested_sampling","title":"Prepare a nested sampler to evaluate Bayesian evidence — nested_sampling","text":"Initialize ernest_sampler object perform nested sampling given log-likelihood function, prior distribution, likelihood-restricted prior specification.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/nested_sampling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare a nested sampler to evaluate Bayesian evidence — nested_sampling","text":"","code":"nested_sampling(   log_lik,   prior,   sampler = rwmh_cube(),   n_points = 500,   first_update = NULL,   update_interval = NULL,   ... )"},{"path":"https://kylesnap.github.io/ernest/reference/nested_sampling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare a nested sampler to evaluate Bayesian evidence — nested_sampling","text":"log_lik (function) function ernest_likelihood takes vector parameters returns log-likelihood. function return finite value -Inf invalid parameters (see create_likelihood()). prior (ernest_prior) object class ernest_prior, created create_prior() specializations. sampler (ernest_sampling) ernest_sampling object, declaring likelihood-restricted prior sampler (LRPS) use. n_points (positive integer) number live points use nested sampling run. first_update (optional positive integer) number likelihood calls adopting LRPS behaviour. NULL, set n_points * 2.5. update_interval (optional positive integer) number likelihood calls updates LRPS behaviour. NULL, set n_points * 1.5. ... Arguments passed create_likelihood.function error_action (case-sensitive string) Action perform fn throws error. \"abort\": Stop execution signal error. \"warn\": Issue warning replace output -Inf. nonfinite_action (case-sensitive string) Action perform fn passes value finite double -Inf. \"warn\": Issue warning replace values -Inf. \"pass\": Silently replace values -Inf. \"abort\": Stop execution signal error. auto_batch (logical) Whether prepare fn may called matrix parameter values. FALSE, assumed fn can already produce vector likelihood values matrix rows parameter vectors.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/nested_sampling.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare a nested sampler to evaluate Bayesian evidence — nested_sampling","text":"ernest_sampler object, prepared nested sampling.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/nested_sampling.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prepare a nested sampler to evaluate Bayesian evidence — nested_sampling","text":"function prepares ernest_sampler object performing nested sampling, given log-likelihood function, prior, sampler specification. checks provided log-likelihood prior compatible performing basic sanity check evaluating log-likelihood center prior space. check ensures log-likelihood returns finite value -Inf typical parameter values.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/nested_sampling.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare a nested sampler to evaluate Bayesian evidence — nested_sampling","text":"","code":"prior <- create_uniform_prior(n_dim = 2, lower = -1, upper = 1) ll_fn <- function(x) -sum(x^2) sampler <- nested_sampling(ll_fn, prior, n_points = 100) sampler #> An <ernest_sampler>: 100 points, 2 variables."},{"path":"https://kylesnap.github.io/ernest/reference/plot.ernest.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot diagnostics for a nested sampling run — plot.ernest_estimate","title":"Plot diagnostics for a nested sampling run — plot.ernest_estimate","text":"Show normalized likelihood, importance weights, evidence functions log. volume.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/plot.ernest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot diagnostics for a nested sampling run — plot.ernest_estimate","text":"","code":"# S3 method for class 'ernest_estimate' plot(x, ...)  # S3 method for class 'ernest_run' plot(x, ..., ndraws = 0)"},{"path":"https://kylesnap.github.io/ernest/reference/plot.ernest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot diagnostics for a nested sampling run — plot.ernest_estimate","text":"x (ernest_estimate ernest_run) object either class ernest_estimate (containing uncertainty simulations) class ernest_run (containing nested sampling run). ... dots future extensions must empty. ndraws (positive integer zero, optional) number log volume sequences simulate. equal zero, simulations made, one draw vector log volumes produced estimates contained x. NULL, getOption(\"posterior.rvar_ndraws\") used (default 4000).","code":""},{"path":"https://kylesnap.github.io/ernest/reference/plot.ernest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot diagnostics for a nested sampling run — plot.ernest_estimate","text":"x, invisibly. ggplot2::ggplot() object printed side effect. plot faceted three frames. horizontal axis shows values log. volume: x ernest_run estimates derived run, x ernest_estimate (ndraws != 0), values simulated. three y axes follows: Evidence: Estimate corresponding error ribbon drawn either estimated standard error (ernest_run) drawn high density credible interval (HDCI) (ernest_sampler); Normalized Likelihood: likelihood value criteria used draw new points likelihood-restricted prior sampler, normalized maximum likelihood generated run, ; Posterior Weight: density posterior weights attributed regions volume within prior. using ernest_estimate object, error ribbon drawn HDCI estimate.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/plot.ernest.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Plot diagnostics for a nested sampling run — plot.ernest_estimate","text":"ernest_estimate, ndraws must sufficiently large calculate HDI. HDI calculation fails, user warned ernest_run plot generated instead.","code":""},{"path":[]},{"path":"https://kylesnap.github.io/ernest/reference/plot.ernest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot diagnostics for a nested sampling run — plot.ernest_estimate","text":"","code":"# Plot integration results from a run. data(example_run) plot(example_run)   # Simulate results before plotting. plot(example_run, ndraws = 50)  # Simulate results from a run, then plot simulated results. sim <- calculate(example_run, ndraws = 50) plot(sim)"},{"path":"https://kylesnap.github.io/ernest/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. generics calculate, compile, generate, visualize posterior as_draws, as_draws_matrix, as_draws_rvars","code":""},{"path":"https://kylesnap.github.io/ernest/reference/summary.ernest_estimate.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise an evidence estimate from nested sampling — summary.ernest_estimate","title":"Summarise an evidence estimate from nested sampling — summary.ernest_estimate","text":"Provides summary ernest_estimate object.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/summary.ernest_estimate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise an evidence estimate from nested sampling — summary.ernest_estimate","text":"","code":"# S3 method for class 'ernest_estimate' summary(object, ...)"},{"path":"https://kylesnap.github.io/ernest/reference/summary.ernest_estimate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise an evidence estimate from nested sampling — summary.ernest_estimate","text":"object ernest_estimate object. ... dots future extensions must empty.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/summary.ernest_estimate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise an evidence estimate from nested sampling — summary.ernest_estimate","text":"list summary statistics evidence estimate: n_iter: Number iterations. n_points: Number live points. log_volume: Mean log volume final iteration. log_evidence: Mean log evidence final iteration. log_evidence_err: Standard error log evidence. ** ndraws = 0, computed analytically. ** ndraws 1 greater, estimated standard deviation log_evidence across draws. run: posterior::draws_rvars draws variables.","code":""},{"path":[]},{"path":"https://kylesnap.github.io/ernest/reference/summary.ernest_estimate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarise an evidence estimate from nested sampling — summary.ernest_estimate","text":"","code":"data(example_run) calc <- calculate(example_run, ndraws = 2000) summary(calc) #>  #> ── Simulated Evidence Estimate from <ernest_estimate> ────────────────────────── #> No. Draws: 2000 #> Log. Evidence: -9.006 (± 0.3844)"},{"path":"https://kylesnap.github.io/ernest/reference/summary.ernest_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise a nested sampling run — summary.ernest_run","title":"Summarise a nested sampling run — summary.ernest_run","text":"Provides summary ernest_run object.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/summary.ernest_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise a nested sampling run — summary.ernest_run","text":"","code":"# S3 method for class 'ernest_run' summary(object, ...)"},{"path":"https://kylesnap.github.io/ernest/reference/summary.ernest_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise a nested sampling run — summary.ernest_run","text":"object (ernest_run) object class ernest_run. ... dots future extensions must empty.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/summary.ernest_run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise a nested sampling run — summary.ernest_run","text":"object class summary.ernest_run, list : n_iter: Number iterations (number dead points). n_points: Number live points end run. log_volume, log_evidence, log_evidence_err: final estimates quantities performed run generated object. run, tibble n_iter + n_points rows, containing vectors call, log_lik, log_volume, log_weight, log_evidence, log_evidence_err, information.","code":""},{"path":[]},{"path":"https://kylesnap.github.io/ernest/reference/summary.ernest_run.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarise a nested sampling run — summary.ernest_run","text":"","code":"# Load an example run data(example_run)  # Summarise the run and view a tibble of its results. run_sm <- summary(example_run) run_sm #>  #> ── Nested Sampling Results from <ernest_run> ─────────────────────────────────── #> No. Points: 500 #> No. Iterations: 4725 #> No. Lik. Calls: 110076 #> Log. Evidence: -9.11 (± 0.1153) run_sm$run #> # A tibble: 5,225 × 7 #>     call log_lik log_volume log_weight log_evidence log_evidence_err information #>    <int>   <dbl>      <dbl>      <dbl>        <dbl>            <dbl>       <dbl> #>  1     1   -146.     -0.002      -144.        -153.         3.18e-32   -5.04e-61 #>  2     2   -144.     -0.004      -142.        -151.         9.07e-32   -4.11e-60 #>  3     3   -139.     -0.006      -137.        -146.         1.17e-30   -6.81e-58 #>  4     4   -131.     -0.008      -129.        -138.         5.47e-29   -1.50e-54 #>  5     5   -129.     -0.01       -126.        -135.         1.81e-28   -1.63e-53 #>  6     6   -126.     -0.012      -124.        -133.         5.80e-28   -1.68e-52 #>  7     7   -125.     -0.014      -123.        -131.         1.33e-27   -8.86e-52 #>  8     8   -125.     -0.016      -122.        -130.         2.11e-27   -2.22e-51 #>  9     9   -118.     -0.018      -116.        -125.         2.95e-26   -4.34e-49 #> 10    10   -118.     -0.02       -115.        -124.         5.49e-26   -1.51e-48 #> # ℹ 5,215 more rows"},{"path":"https://kylesnap.github.io/ernest/reference/visualize.ernest_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the posterior distribution of an ernest_run — visualize.ernest_run","title":"Plot the posterior distribution of an ernest_run — visualize.ernest_run","text":"Create plot posterior distributions nested sampling run, trace evolution discarded live points along log prior volume.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/visualize.ernest_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the posterior distribution of an ernest_run — visualize.ernest_run","text":"","code":"# S3 method for class 'ernest_run' visualize(x, ..., type = c(\"density\", \"trace\"), vars = NULL, plot = TRUE)"},{"path":"https://kylesnap.github.io/ernest/reference/visualize.ernest_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the posterior distribution of an ernest_run — visualize.ernest_run","text":"x (ernest_run) ernest_run object. ... Arguments passed as_draws_rvars.ernest_run units (case-sensitive string) scale return sampled points: \"original\": Points expressed scale prior space. \"unit_cube\": Points expressed scale (0-1)-unit hypercube. radial (logical) Whether return additional column .radial, containing radial coordinate (.e., squared sum squares) sampled point. type (case-sensitive string) type plot create. \"density\": Shows posterior density distribution. \"trace\": Shows distribution points along estimates log prior volume. vars <tidy-select> variables plot run. left NULL, every variable plotted. plot Logical, whether return ggplot visualization, tibble data used create plot.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/visualize.ernest_run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the posterior distribution of an ernest_run — visualize.ernest_run","text":"Either ggplot object plot = TRUE, tibble.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/visualize.ernest_run.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Plot the posterior distribution of an ernest_run — visualize.ernest_run","text":"method requires ggdist tidyselect optional packages.","code":""},{"path":[]},{"path":"https://kylesnap.github.io/ernest/reference/visualize.ernest_run.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the posterior distribution of an ernest_run — visualize.ernest_run","text":"","code":"# Load example run library(ggdist) data(example_run)  # Plot posterior distributions of the parameters visualize(example_run, type = \"density\")   # Plot the trace of the radial coordinate in unit scale visualize(   example_run,   type = \"trace\",   vars = \".radial\",   units = \"unit_cube\",   radial = TRUE )"}]
