[{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://kylesnap.github.io/ernest/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kyle Dewsnap. Author, maintainer.","code":""},{"path":"https://kylesnap.github.io/ernest/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Dewsnap K (2025). ernest: R Nested Sampling Toolkit. R package version 0.0.0.9000, https://kylesnap.github.io/ernest/.","code":"@Manual{,   title = {ernest: The R Nested Sampling Toolkit},   author = {Kyle Dewsnap},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://kylesnap.github.io/ernest/}, }"},{"path":"https://kylesnap.github.io/ernest/index.html","id":"ernest-nested-sampling-in-r","dir":"","previous_headings":"","what":"The R Nested Sampling Toolkit","title":"The R Nested Sampling Toolkit","text":"ernest provides toolkit performing nested sampling algorithm estimate marginal likelihood (.e., evidence) posterior distributions statistical models. end, ernest aims accomplish two different goals: ’re unfamiliar nested sampling, ernest documentation allow learn nested sampling works might incorporate within analyses. ’re already familiar nested sampling, ernest provides powerful reliable implementation algorithm different likelihood-restricted prior samplers, allowing complete analyse runs existing tools offered ggplot posterior.","code":""},{"path":"https://kylesnap.github.io/ernest/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"The R Nested Sampling Toolkit","text":"can install development version ernest GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"kylesnap/ernest\")"},{"path":"https://kylesnap.github.io/ernest/index.html","id":"status","dir":"","previous_headings":"","what":"Status","title":"The R Nested Sampling Toolkit","text":"ernest still quite experimental, additional features intended added future. hope avoid , mean certain components ernest may subject breaking changes. encounter issues suggestions, please feel free open issue.","code":""},{"path":"https://kylesnap.github.io/ernest/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"The R Nested Sampling Toolkit","text":"nested sampling algorithm first developed introduced J. Skilling across two major papers: Skilling, J. (2004). Nested sampling. R. Fischer R. Preuss U. V. Toussaint (Eds.), Bayesian Inference Maximum Entropy Methods Science Engineering (pp. 395-405). AIP. 10.1063/1.1835238 Skilling, J. (2006). Nested sampling general Bayesian computation. Bayesian Analysis, 1(4), 833-859. 10.1214/06-BA127 ernest’s design takes much inspiration well-documented dynesty package: Speagle, J. S. (2020). DYNESTY: dynamic nested sampling package estimating Bayesian posteriors evidences. Monthly Notices Royal Astronomical Society, 493(3), 3132-3158. 10.1093/mnras/staa278 Koposov, S., Speagle, J. S., Barbary, K., Ashton, G., Bennett, E., Buchner, J., Scheffler, C., Cook, B., Talbot, C., Guillochon, J., Cubillos, P., Ramos, . ., Dartiailh, M., Ilya., Tollerud, E., Lang, D., Johnson, B., jtmendel, Higson, E., … Goldstein, D. (2021). dynesty (Version 1.1.1.) [Python package]. 10.5281/zenodo.4543937 addition, nestle python package article J. Buchner provide consistent clear terminology describe organize components nested sampling algorithm: Buchner, J. (2023). Nested sampling methods. Statistics Surveys, 17, 169-215. 10.1214/23-SS144","code":""},{"path":"https://kylesnap.github.io/ernest/reference/as_draws.ernest.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform nested sampling runs to draws objects — as_draws.ernest_run","title":"Transform nested sampling runs to draws objects — as_draws.ernest_run","text":"Try transform ernest_run format supported posterior package.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/as_draws.ernest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform nested sampling runs to draws objects — as_draws.ernest_run","text":"","code":"# S3 method for class 'ernest_run' as_draws(x, ..., units = c(\"original\", \"unit_cube\"), radial = FALSE)  # S3 method for class 'ernest_run' as_draws_matrix(x, ..., units = c(\"original\", \"unit_cube\"), radial = FALSE)  # S3 method for class 'ernest_run' as_draws_rvars(x, ..., units = c(\"original\", \"unit_cube\"), radial = FALSE)"},{"path":"https://kylesnap.github.io/ernest/reference/as_draws.ernest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform nested sampling runs to draws objects — as_draws.ernest_run","text":"x ernest_run object. ... dots future extensions must empty. units units express sampled points. \"original\", points expressed scale prior space. \"unit_cube\", points expressed scale (0-1)-unit hypercube. radial Whether return additional column .radial, containing radial coordinate (.e., squared sum squares) sampled point.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/as_draws.ernest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform nested sampling runs to draws objects — as_draws.ernest_run","text":"draws object, containing posterior samples nested sampling run. samples also bound importance weight (log. units). exact type returned object depends function used: as_draws as_draws_matrix, posterior::draws_matrix() object, classes c(\"draws_matrix\", \"draws\", \"matrix\"). as_draws_rvars, posterior::draws_rvars() object, classes c(\"draws_rvars\", \"draws\", \"list\").","code":""},{"path":"https://kylesnap.github.io/ernest/reference/as_draws.ernest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform nested sampling runs to draws objects — as_draws.ernest_run","text":"","code":"# Load example run library(posterior) #> This is posterior version 1.6.1 #>  #> Attaching package: ‘posterior’ #> The following objects are masked from ‘package:stats’: #>  #>     mad, sd, var #> The following objects are masked from ‘package:base’: #>  #>     %in%, match data(ernest_run_example)  # View importance weights dm <- as_draws(ernest_run_example) weights(dm) |> head() #> [1] 7.184345e-65 1.412461e-63 1.488124e-61 6.495823e-61 7.162504e-60 #> [6] 1.095203e-57  # Summarize points after resampling dm |>  resample_draws() |>  summarize_draws() #> # A tibble: 3 × 10 #>   variable          mean  median    sd   mad    q5   q95  rhat ess_bulk ess_tail #>   <chr>            <dbl>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>    <dbl>    <dbl> #> 1 Uniform(-10,…  0.00700  0.0199 0.974 0.989 -1.57  1.61  1.18    4252.     12.7 #> 2 Uniform(-10,… -0.0186  -0.0171 0.970 0.966 -1.62  1.58  1.16    4043.     12.9 #> 3 Uniform(-10,…  0.0116   0.0202 0.983 1.00  -1.59  1.59  1.20    4159.     13.5  # View the radial coordinate in the unit-space over the run dm_rad <- as_draws_rvars(ernest_run_example, units = \"unit_cube\", radial = TRUE) plot(   x = ernest_run_example$log_volume,   y = draws_of(dm_rad$.radial),   xlab = \"Log volume\",   ylab = \"Radial coordinate\" )"},{"path":"https://kylesnap.github.io/ernest/reference/calculate.ernest_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate Evidence using a Nested Sampling Run — calculate.ernest_run","title":"Estimate Evidence using a Nested Sampling Run — calculate.ernest_run","text":"Estimate Evidence using Nested Sampling Run","code":""},{"path":"https://kylesnap.github.io/ernest/reference/calculate.ernest_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate Evidence using a Nested Sampling Run — calculate.ernest_run","text":"","code":"# S3 method for class 'ernest_run' calculate(x, ..., ndraws = FALSE)"},{"path":"https://kylesnap.github.io/ernest/reference/calculate.ernest_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate Evidence using a Nested Sampling Run — calculate.ernest_run","text":"x ernest_run object. ... dots future extensions must empty. ndraws positive integer boolean. FALSE, log volumes derived expected values. FALSE, log volumes simulated using ndraws samples volume's joint distribution.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/calculate.ernest_run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate Evidence using a Nested Sampling Run — calculate.ernest_run","text":"tibble, containing run$n_iter + run$n_points rows following columns: log_lik: log-likelihood model. log_volume: log volume prior space. log_weight: log weights live points. log_evidence: log evidence model. log_evidence.err: standard error log evidence (available ndraws = 0). tibble additional class ernest_estimates, plot method. column returned posterior::rvar() vector.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/calculate.ernest_run.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate Evidence using a Nested Sampling Run — calculate.ernest_run","text":"","code":"# Load an example run data(ernest_run_example)  # View results as a tibble with `ndraws = FALSE` (the default). calculate(ernest_run_example) #> # A tibble: 10,315 × 5 #>       log_lik   log_volume log_weight log_evidence log_evidence.err #>    <rvar[1d]>   <rvar[1d]> <rvar[1d]>   <rvar[1d]>       <rvar[1d]> #>  1  -149 ± NA  -0.001 ± NA  -157 ± NA    -157 ± NA     3.2e-33 ± NA #>  2  -146 ± NA  -0.002 ± NA  -154 ± NA    -154 ± NA     1.4e-32 ± NA #>  3  -141 ± NA  -0.003 ± NA  -149 ± NA    -149 ± NA     1.4e-31 ± NA #>  4  -140 ± NA  -0.004 ± NA  -148 ± NA    -147 ± NA     3.2e-31 ± NA #>  5  -138 ± NA  -0.005 ± NA  -145 ± NA    -145 ± NA     1.0e-30 ± NA #>  6  -133 ± NA  -0.006 ± NA  -140 ± NA    -140 ± NA     1.2e-29 ± NA #>  7  -130 ± NA  -0.007 ± NA  -137 ± NA    -137 ± NA     5.1e-29 ± NA #>  8  -129 ± NA  -0.008 ± NA  -136 ± NA    -136 ± NA     8.7e-29 ± NA #>  9  -127 ± NA  -0.009 ± NA  -134 ± NA    -134 ± NA     2.1e-28 ± NA #> 10  -127 ± NA  -0.010 ± NA  -134 ± NA    -133 ± NA     3.7e-28 ± NA #> # ℹ 10,305 more rows  # Generate 100 simulated log volume values for each iteration. calculate(ernest_run_example, ndraws = 100) #> # A tibble: 10,315 × 4 #>       log_lik          log_volume  log_weight log_evidence #>    <rvar[1d]>          <rvar[1d]>  <rvar[1d]>   <rvar[1d]> #>  1  -149 ± NA  -0.00078 ± 0.00073  -157 ± 1.1  -157 ± 1.09 #>  2  -146 ± NA  -0.00190 ± 0.00114  -154 ± 1.1  -154 ± 0.95 #>  3  -141 ± NA  -0.00283 ± 0.00138  -150 ± 1.1  -150 ± 1.04 #>  4  -140 ± NA  -0.00377 ± 0.00160  -148 ± 1.1  -148 ± 0.82 #>  5  -138 ± NA  -0.00479 ± 0.00188  -146 ± 1.4  -145 ± 0.97 #>  6  -133 ± NA  -0.00590 ± 0.00227  -141 ± 1.2  -141 ± 1.20 #>  7  -130 ± NA  -0.00684 ± 0.00241  -138 ± 1.3  -138 ± 1.15 #>  8  -129 ± NA  -0.00770 ± 0.00259  -137 ± 1.4  -137 ± 0.94 #>  9  -127 ± NA  -0.00882 ± 0.00274  -135 ± 1.3  -135 ± 0.90 #> 10  -127 ± NA  -0.00983 ± 0.00288  -134 ± 1.2  -133 ± 0.69 #> # ℹ 10,305 more rows"},{"path":"https://kylesnap.github.io/ernest/reference/compile.ernest_sampler.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare an ernest_sampler object for nested sampling — compile.ernest_sampler","title":"Prepare an ernest_sampler object for nested sampling — compile.ernest_sampler","text":"Create new set live points/particles new nested sampling run, check current state live points continuing previous run.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/compile.ernest_sampler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare an ernest_sampler object for nested sampling — compile.ernest_sampler","text":"","code":"# S3 method for class 'ernest_sampler' compile(object, ..., clear = FALSE)"},{"path":"https://kylesnap.github.io/ernest/reference/compile.ernest_sampler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare an ernest_sampler object for nested sampling — compile.ernest_sampler","text":"object object class ernest_sampler. ... dots future extensions must empty. clear logical value indicating whether reload object creating new live points. TRUE, former results sampler removed object. FALSE, sampler drop prior results, continue using live points last sampling iteration performed.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/compile.ernest_sampler.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare an ernest_sampler object for nested sampling — compile.ernest_sampler","text":"object, invisibly.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/compile.ernest_sampler.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prepare an ernest_sampler object for nested sampling — compile.ernest_sampler","text":"compile checks whether live points within nested sampler expected structure (e.g., matrix contains proper dimensions, every live point described finite values, likelihood values either finite -Inf). checks fail, clear = TRUE, sampler reset new set live points generated.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/compile.ernest_sampler.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare an ernest_sampler object for nested sampling — compile.ernest_sampler","text":"","code":"prior <- create_uniform_prior(n_dim = 2, lower = -1, upper = 1) ll_fn <- function(x) -sum(x^2) sampler <- nested_sampling(ll_fn, prior, n_point = 100)  # Add live points to the sampler compile(sampler) head(sampler$live_points$unit) #>             [,1]       [,2] #> [1,] 0.836140221 0.88949489 #> [2,] 0.909568916 0.07974891 #> [3,] 0.005724923 0.25286010 #> [4,] 0.160214206 0.43794499 #> [5,] 0.968936877 0.23176413 #> [6,] 0.984778127 0.31933229  # Check the status of the sampler with `clear = FALSE` compile(sampler, clear = FALSE) head(sampler$live_points$unit) #>             [,1]       [,2] #> [1,] 0.836140221 0.88949489 #> [2,] 0.909568916 0.07974891 #> [3,] 0.005724923 0.25286010 #> [4,] 0.160214206 0.43794499 #> [5,] 0.968936877 0.23176413 #> [6,] 0.984778127 0.31933229  # Reset the sampler with new live points with `clear = TRUE` compile(sampler, clear = TRUE) head(sampler$live_points$unit) #>           [,1]      [,2] #> [1,] 0.7132885 0.3611381 #> [2,] 0.8761787 0.0115667 #> [3,] 0.7810689 0.1651609 #> [4,] 0.1082668 0.5730944 #> [5,] 0.5233944 0.3103647 #> [6,] 0.9491375 0.4526721"},{"path":"https://kylesnap.github.io/ernest/reference/create_likelihood.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare a likelihood function for nested sampling — create_likelihood","title":"Prepare a likelihood function for nested sampling — create_likelihood","text":"Creates modified version log. likelihood function always returns either finite value -Inf vector parameters provided.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/create_likelihood.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare a likelihood function for nested sampling — create_likelihood","text":"","code":"create_likelihood(fn, ...)"},{"path":"https://kylesnap.github.io/ernest/reference/create_likelihood.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare a likelihood function for nested sampling — create_likelihood","text":"fn function object class ernest_likelihood. function, take single numeric vector parameters return either finite log likelihood value -Inf. ... dots future extensions must empty.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/create_likelihood.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare a likelihood function for nested sampling — create_likelihood","text":"function additional class ernest_likelihood. success, function guaranteed return finite value -Inf. Non-finite, non--Inf values coerced -Inf warning. Non-numeric returns reported errors.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/create_likelihood.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare a likelihood function for nested sampling — create_likelihood","text":"","code":"# A 3D Gaussian likelihood function n_dim <- 3 sigma <- diag(0.95, nrow = 3) det_sigma <- determinant(sigma, logarithm = TRUE)$modulus attributes(det_sigma) <- NULL prec <- solve(sigma) log_norm <- -0.5 * (log(2 * pi) * n_dim + det_sigma)  log_lik <- function(theta) {   drop(-0.5 * crossprod(theta, crossprod(prec, theta)) + log_norm) } log_lik(c(0, 0, 0)) #> [1] -2.679876  # ernest catches and warns the user about non-finite, non-`-Inf` values try(log_lik(c(Inf, 0, 0))) #> [1] NaN  # ernest will quit when receiving unexpected values from the likelihood function log_lik_2 <- function(theta) {  if (theta[1] < 1) \"Odd value.\" else log_lik(theta) } log_lik_2(c(1, 0, 0)) #> [1] -3.206191 try(log_lik_2(c(0, 0, 0))) #> [1] \"Odd value.\""},{"path":"https://kylesnap.github.io/ernest/reference/create_prior.html","id":null,"dir":"Reference","previous_headings":"","what":"Specify a prior distribution for nested sampling — create_prior","title":"Specify a prior distribution for nested sampling — create_prior","text":"Create prior specification ernest using R function transforms coordinates unit cube space coordinates prior distribution (see Details).","code":""},{"path":"https://kylesnap.github.io/ernest/reference/create_prior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify a prior distribution for nested sampling — create_prior","text":"","code":"create_prior(fn, n_dim, varnames = NULL, lower = NULL, upper = NULL)"},{"path":"https://kylesnap.github.io/ernest/reference/create_prior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify a prior distribution for nested sampling — create_prior","text":"fn function takes vector probabilities p returns vector quantiles. n_dim number dimensions prior distribution. varnames Optional names variables prior distribution. lower Optional lower bounds prior distribution. upper Optional upper bounds prior distribution.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/create_prior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specify a prior distribution for nested sampling — create_prior","text":"object type ernest_prior represents prior distribution, including: fn: function performs transformation unit cube coordinates coordinates prior space. n_dim: number dimensions prior space. varnames: Names variables prior distribution. lower: Lower bounds prior distribution. upper: Upper bounds prior distribution.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/create_prior.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Specify a prior distribution for nested sampling — create_prior","text":"Nested sampling ernest requires prior transformation function takes vector values 0 1, returns -length vector parameters expressed scale model's prior distribution. calling create_prior, ernest test fn presenting 1000 n_dim-length vectors generated runif(). checks passed : Every input returns vector n_dim finite values. Every input returns vector respects lower upper bounds, provided. Users encouraged run additional checks behaviour prior calling fn object bound produced ernest_prior.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/create_prior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Specify a prior distribution for nested sampling — create_prior","text":"","code":"# 3D uniform prior in the range [-10, 10] unif <- \\(x) { -10 + x * 20 } prior <- create_prior(unif, n_dim = 3, lower = -10, upper = 10)  # `ernest_prior` wraps `fn` in guards to prevent unexpected behaviour. prior$fn(c(0.25, 0.5, 0.75)) # OK #> [1] -5  0  5 try(prior$fn(c(0.33, 0.67))) # Input length is only length 3. #> Error in prior$fn(c(0.33, 0.67)) :  #>   `p` must be a double vector of length TRUE.  # A prior for a simple linear regression model lm_f <- function(theta) {   beta_0 <- qnorm(theta[1], mean = 0, sd = 10) # (Beta0, Beta1) ~ N(0, 10)   beta_1 <- qnorm(theta[1], mean = 0, sd = 10) # Sigma ~ Exp(1)   sigma <- qexp(theta[1], rate = 1)   c(beta_0, beta_1, sigma) } create_prior(   lm_f,   n_dim = 3,   varnames = c(\"beta_0\", \"beta_1\", \"sigma\"),   lower = c(-Inf, -Inf, 0) ) #> An <ernest_prior>: 3 variables  # A normal prior with hyperprior parameters hier_f <- function(theta) {   mu <- qnorm(theta[1], mean = 5) # mu ~ N(5, 1)   sigma <- 10 ^ qunif(theta[2], min = -1, max = 1) # log10(sigma) ~ U[-1, 1]    x <- qnorm(theta[3], mu, sigma) # X ~ N(mu, sigma)   c(mu, sigma, x) } create_prior(   hier_f,   n_dim = 3,   varnames = c(\"mu\", \"sigma\", \"x\"),   lower = c(-Inf, 0, -Inf) ) #> An <ernest_prior>: 3 variables  # ernest will catch mistakes when provided with bounds try(create_prior(   hier_f,   n_dim = 3,   varnames = c(\"mu\", \"sigma\", \"x\"),   lower = c(-Inf, -Inf, -1) )) #> An <ernest_prior>: 3 variables"},{"path":"https://kylesnap.github.io/ernest/reference/create_special_prior.html","id":null,"dir":"Reference","previous_headings":"","what":"Specify a common prior distribution — create_normal_prior","title":"Specify a common prior distribution — create_normal_prior","text":"Create specialized version create_prior() prior spaces marginally independent share common marginal distribution.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/create_special_prior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify a common prior distribution — create_normal_prior","text":"","code":"create_normal_prior(   n_dim,   mean = 0,   sd = 1,   varnames = NULL,   lower = -Inf,   upper = Inf )  create_t_prior(   n_dim,   df,   mu = 0,   sigma = 1,   ncp = NULL,   varnames = NULL,   lower = -Inf,   upper = Inf )  create_cauchy_prior(   n_dim,   location = 0,   scale = 1,   varnames = NULL,   lower = -Inf,   upper = Inf )  create_uniform_prior(lower = 0, upper = 1, n_dim, varnames = NULL)"},{"path":"https://kylesnap.github.io/ernest/reference/create_special_prior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify a common prior distribution — create_normal_prior","text":"n_dim number dimensions prior distribution. mean vector means. sd vector standard deviations. varnames Optional names variables prior distribution. lower Optional lower bounds prior distribution. upper Optional upper bounds prior distribution. df degrees freedom (\\(> 0\\), maybe non-integer).  df       = Inf allowed. mu location parameter distribution. ncp == 0 (NULL), median. sigma scale parameter distribution. ncp non-centrality parameter \\(\\delta\\);     currently except rt(), abs(ncp) <= 37.62.     omitted, use central t distribution. location, scale location scale parameters.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/create_special_prior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specify a common prior distribution — create_normal_prior","text":"special instance ernest_prior efficient implementation prior transformation function.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/create_special_prior.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Specify a common prior distribution — create_normal_prior","text":"create_t_prior differs stats::qt() due inclusion location scale parameters. df \\(\\nu\\), create_t_prior returns prior equivalent $$T(\\nu) * \\sigma + \\mu$$","code":""},{"path":"https://kylesnap.github.io/ernest/reference/create_special_prior.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Specify a common prior distribution — create_normal_prior","text":"truncation routine: Nadarajah, S., & Kotz, S. (2006). R Programs Truncated Distributions. Journal Statistical Software, Code Snippets, 16(2), 1–8. https://doi.org/10.18637/jss.v016.c02","code":""},{"path":[]},{"path":"https://kylesnap.github.io/ernest/reference/create_special_prior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Specify a common prior distribution — create_normal_prior","text":"","code":"prior <- create_normal_prior(3) prior$fn(c(0.25, 0.5, 0.75)) #> [1] -0.6744898  0.0000000  0.6744898  bound_prior <- create_normal_prior(3, lower = -1, upper = 1) bound_prior$fn(c(0.25, 0.5, 0.75)) #> [1] -0.4417705  0.0000000  0.4417705  # A prior for a simple linear regression model create_t_prior(  3,  df = 3,  varnames = c(\"beta0\", \"beta1\", \"sigma\"),  lower = c(-Inf, -Inf, 0) ) #> An <ernest_prior>: 3 variables"},{"path":"https://kylesnap.github.io/ernest/reference/ernest-package.html","id":null,"dir":"Reference","previous_headings":"","what":"ernest: The R Nested Sampling Toolkit — ernest-package","title":"ernest: The R Nested Sampling Toolkit — ernest-package","text":"complete implementation nested sampling algorithm R, allowing users estimate evidence posterior statistical model.","code":""},{"path":[]},{"path":"https://kylesnap.github.io/ernest/reference/ernest-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ernest: The R Nested Sampling Toolkit — ernest-package","text":"Maintainer: Kyle Dewsnap kyle.dewsnap@ubc.ca (ORCID)","code":""},{"path":"https://kylesnap.github.io/ernest/reference/ernest_run-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Results from nested sampling runs — ernest_run-class","title":"Results from nested sampling runs — ernest_run-class","text":"ernest_run object contains results nested sampling run. methods summary, plotting, simulating uncertainty around run's estimates.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/ernest_run-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Results from nested sampling runs — ernest_run-class","text":"ernest_run object returned running nested sampling procedure ernest package. can used posterior analysis, evidence estimation, diagnostic plotting.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/ernest_run-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Results from nested sampling runs — ernest_run-class","text":"n_iter Total number iterations performed. n_points Number points drawn live set. n_calls Number calls log likelihood function. log_lik vector log likelihood values associated point generated run. log_volume vector estimated prior volumes associated removal point live set. log_weight vector unnormalized posterior weights point. log_evidence vector log. evidence estimates, generated removal point. log_evidence_var vector uncertainty values associated entry log_evidence. 1. information vector estimated KL-divergence (information) prior posterior distributions. id index point within live set. points number live points associated point's removal. calls number likelihood calls made generating replacement live point. birth iteration point created added live set. samples matrix sampled points, expressed units prior space. samples_unit Identical samples, expressed units 0-1 hypercube.","code":""},{"path":[]},{"path":"https://kylesnap.github.io/ernest/reference/ernest_run_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Nested Sampling Run with Ernest — ernest_run_example","title":"Example Nested Sampling Run with Ernest — ernest_run_example","text":"dataset contains results nested sampling run performed three-dimensional Gaussian likelihood independent uniform priors parameter.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/ernest_run_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Nested Sampling Run with Ernest — ernest_run_example","text":"","code":"data(ernest_run_example)"},{"path":"https://kylesnap.github.io/ernest/reference/ernest_run_example.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example Nested Sampling Run with Ernest — ernest_run_example","text":"ernest_run object containing results nested sampling run. Users can build run scratch using vignette(\"nested-sampling--ernest\", package = \"ernest\").","code":""},{"path":"https://kylesnap.github.io/ernest/reference/ernest_run_example.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example Nested Sampling Run with Ernest — ernest_run_example","text":"likelihood used generate points \\(MVN(0, \\Sigma)\\), variance \\(\\Sigma\\) set 1 covariance set 0.95. prior parameter uniform interval [-10, 10\\]. [-10, 10]: R:-10,%2010%5C","code":""},{"path":[]},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampler-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal: The Ernest Nested Sampler R6 Class — ernest_sampler","title":"Internal: The Ernest Nested Sampler R6 Class — ernest_sampler","text":"ernest_sampler R6 class implements core logic nested sampling run.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampler-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Internal: The Ernest Nested Sampler R6 Class — ernest_sampler","text":"class primarily intended internal use within ernest package. Users interact nested sampling samplers via provided S3 generics, rather calling R6 methods directly. R6 interface documented developers advanced users want extend debug ernest.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampler-class.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal: The Ernest Nested Sampler R6 Class — ernest_sampler","text":"Users able instantiate class, exported. Instead, use following functions: create new sampler, use nested_sampling(). compile live points, use compile(). run nested sampling, use generate(). access latest results, use $run active binding.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampler-class.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Internal: The Ernest Nested Sampler R6 Class — ernest_sampler","text":"niterations total number sampling iterations. ncalls total calls made likelihood function. live_points list, containing matrix live points currently sampler unit-cube units, vector associated log likelihood values. run ernest_run object binding results previous sampling runs. Returns NULL runs performed.","code":""},{"path":[]},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampler-class.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Internal: The Ernest Nested Sampler R6 Class — ernest_sampler","text":"ernest_sampler$new() ernest_sampler$clear() ernest_sampler$compile() ernest_sampler$generate() ernest_sampler$print() ernest_sampler$clone()","code":""},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampler-class.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Internal: The Ernest Nested Sampler R6 Class — ernest_sampler","text":"(Internal) Creates new ernest_sampler.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampler-class.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal: The Ernest Nested Sampler R6 Class — ernest_sampler","text":"","code":"ernest_sampler$new(   log_lik_fn,   prior,   sampling,   n_points,   first_update,   update_interval )"},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampler-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal: The Ernest Nested Sampler R6 Class — ernest_sampler","text":"log_lik_fn ernest_likelihood object. prior ernest_prior object. sampling ernest_sampling object. n_points number live points. first_update first update interval. update_interval subsequent update interval.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampler-class.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Internal: The Ernest Nested Sampler R6 Class — ernest_sampler","text":", invisibly.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampler-class.html","id":"method-clear-","dir":"Reference","previous_headings":"","what":"Method clear()","title":"Internal: The Ernest Nested Sampler R6 Class — ernest_sampler","text":"(Internal) Clears previous runs sampler, including sampler's live points.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampler-class.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal: The Ernest Nested Sampler R6 Class — ernest_sampler","text":"","code":"ernest_sampler$clear()"},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampler-class.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Internal: The Ernest Nested Sampler R6 Class — ernest_sampler","text":", invisibly.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampler-class.html","id":"method-compile-","dir":"Reference","previous_headings":"","what":"Method compile()","title":"Internal: The Ernest Nested Sampler R6 Class — ernest_sampler","text":"(Internal) Generates sample live points prior validates .","code":""},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampler-class.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal: The Ernest Nested Sampler R6 Class — ernest_sampler","text":"","code":"ernest_sampler$compile(clear = FALSE)"},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampler-class.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal: The Ernest Nested Sampler R6 Class — ernest_sampler","text":"clear logical value indicating whether clear existing points.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampler-class.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Internal: The Ernest Nested Sampler R6 Class — ernest_sampler","text":", invisibly.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampler-class.html","id":"method-generate-","dir":"Reference","previous_headings":"","what":"Method generate()","title":"Internal: The Ernest Nested Sampler R6 Class — ernest_sampler","text":"(Internal) Performs nested sampling stopping criterion met.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampler-class.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal: The Ernest Nested Sampler R6 Class — ernest_sampler","text":"","code":"ernest_sampler$generate(   max_iterations = Inf,   max_calls = Inf,   min_logz = 0.05,   verbose = FALSE )"},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampler-class.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal: The Ernest Nested Sampler R6 Class — ernest_sampler","text":"max_iterations maximum number iterations perform. max_calls maximum number calls likelihood function. min_logz minimum log-evidence value achieve. verbose Whether print updates sampler's progress.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampler-class.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Internal: The Ernest Nested Sampler R6 Class — ernest_sampler","text":", invisibly.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampler-class.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Internal: The Ernest Nested Sampler R6 Class — ernest_sampler","text":"(Internal) Prints brief summary sampler.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampler-class.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal: The Ernest Nested Sampler R6 Class — ernest_sampler","text":"","code":"ernest_sampler$print(...)"},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampler-class.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal: The Ernest Nested Sampler R6 Class — ernest_sampler","text":"... Ignored.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampler-class.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Internal: The Ernest Nested Sampler R6 Class — ernest_sampler","text":", invisibly.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampler-class.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Internal: The Ernest Nested Sampler R6 Class — ernest_sampler","text":"objects class cloneable method.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampler-class.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal: The Ernest Nested Sampler R6 Class — ernest_sampler","text":"","code":"ernest_sampler$clone(deep = FALSE)"},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampler-class.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal: The Ernest Nested Sampler R6 Class — ernest_sampler","text":"deep Whether make deep clone.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampling.html","id":null,"dir":"Reference","previous_headings":"","what":"Specify a likelihood-restricted prior sampler (LRPS) — ernest_sampling","title":"Specify a likelihood-restricted prior sampler (LRPS) — ernest_sampling","text":"Choose method replacing worst point live set possible parameter values. unif_cube() region-based sampler, points generated sampling uniformly within unit hypercube, returning point sampled point exceeds  prior likelihood constraint sample randomly prior reject point likelihood constraint fulfilled. method horribly inefficient even moderately-large dimensions, useful testing debugging. rwmh_cube MCMC-based sampler, points generated taking random steps within unit hypercube.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify a likelihood-restricted prior sampler (LRPS) — ernest_sampling","text":"","code":"unif_cube()  rwmh_cube(steps = 25L, target_acceptance = 0.5)"},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify a likelihood-restricted prior sampler (LRPS) — ernest_sampling","text":"steps Number steps take generating proposal point. target_acceptance target acceptance rate sampler.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampling.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specify a likelihood-restricted prior sampler (LRPS) — ernest_sampling","text":"ernest_sampling object, used ernest_sampler initialization create R environment LRPS.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampling.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Specify a likelihood-restricted prior sampler (LRPS) — ernest_sampling","text":"Nested sampling first generates set independently distributed live points within prior space, iteratively improves set replacing point worst likelihood new, improved point. ernest, strategies evolving points collectively called likelihood-restricted prior samplers. present, ernest offers two LRPS: naive region-based sampler, randomly samples unit cube, sophisticated random walk Metropolis-Hastings sampler, takes random point live set walks number steps. updated run (see nested_sampling()), sampler adjust step-size target specified acceptance rate.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampling.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Specify a likelihood-restricted prior sampler (LRPS) — ernest_sampling","text":"different LRPS, Buchner, J. (2023). Nested Sampling Methods. Statistics Surveys, 17(none), 169–215. https://doi.org/10.1214/23-SS144","code":""},{"path":"https://kylesnap.github.io/ernest/reference/generate.ernest_sampler.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform nested sampling — generate.ernest_sampler","title":"Perform nested sampling — generate.ernest_sampler","text":"Execute nested sampling loop. Iteratively replaces worst live point set point drawn likelihood-restricted prior sampler, provided stopping criterion met.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/generate.ernest_sampler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform nested sampling — generate.ernest_sampler","text":"","code":"# S3 method for class 'ernest_sampler' generate(   x,   ...,   max_iterations = Inf,   max_calls = Inf,   min_logz = 0.05,   verbose = FALSE )"},{"path":"https://kylesnap.github.io/ernest/reference/generate.ernest_sampler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform nested sampling — generate.ernest_sampler","text":"x object class ernest_sampler. ... dots future extensions must empty. max_iterations maximum number iterations perform. set Inf, stopping criterion ignored. max_calls maximum number calls likelihood function. set Inf, stopping criterion ignored. min_logz minimum log-evidence value achieve. Must number equal larger zero. verbose Whether print updates sampler's progress.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/generate.ernest_sampler.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform nested sampling — generate.ernest_sampler","text":"object class ernest_run, containing results nested sampling run.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/generate.ernest_sampler.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform nested sampling — generate.ernest_sampler","text":"starting sampling loop, generate calls compile() check internal state sampler.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/generate.ernest_sampler.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform nested sampling — generate.ernest_sampler","text":"","code":"prior <- create_uniform_prior(n_dim = 2, lower = -1, upper = 1) ll_fn <- function(x) -sum(x^2) sampler <- nested_sampling(ll_fn, prior, n_point = 100) sampler #> An <ernest_sampler>: 100 points x 0 iter. x 0 lik. calls  # Stop sampling after a set number of iterations or calls to the lik. func. generate(sampler, max_iterations = 100) #> An <ernest_run>: 100 points x 100 iter x 2500 lik. calls #> → Log. Evidence: -0.558 ± 0.118  # The final number of calls may be larger than `max_calls`, as `generate` # only checks the number of calls when removing a live point. generate(sampler, max_calls = 2600) #> An <ernest_run>: 100 points x 105 iter x 2625 lik. calls #> → Log. Evidence: -0.557 ± 0.116  # Use the default stopping criteria if (FALSE)  generate(sampler)  # \\dontrun{}"},{"path":"https://kylesnap.github.io/ernest/reference/nested_sampling.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare a nested sampler to evaluate Bayesian evidence — nested_sampling","title":"Prepare a nested sampler to evaluate Bayesian evidence — nested_sampling","text":"Initialize ernest_sampler object perform nested sampling given log-likelihood function, prior distribution, likelihood-restricted prior specification.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/nested_sampling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare a nested sampler to evaluate Bayesian evidence — nested_sampling","text":"","code":"nested_sampling(   log_lik,   prior,   sampler = rwmh_cube(),   n_points = 500,   first_update = 2.5,   update_interval = 1.5 )"},{"path":"https://kylesnap.github.io/ernest/reference/nested_sampling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare a nested sampler to evaluate Bayesian evidence — nested_sampling","text":"log_lik Either ernest_likelihood function takes vector parameters returns corresponding log. likelihood. parameter sent create_likelihood(). prior ernest_prior object, created create_prior() specializations. sampler ernest_sampling object, declaring likelihood-restricted prior sampler use. n_points number live points use nested sampling run. first_update number calls likelihood function first update behaviour sampler. left double, first_update set first_update * n_points. update_interval number calls likelihood function updates sampler first_update reached. left double, update_interval set update_interval * n_points.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/nested_sampling.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare a nested sampler to evaluate Bayesian evidence — nested_sampling","text":"ernest_sampler object.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/nested_sampling.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare a nested sampler to evaluate Bayesian evidence — nested_sampling","text":"","code":"prior <- create_uniform_prior(n_dim = 2, lower = -1, upper = 1) ll_fn <- function(x) -sum(x^2) sampler <- nested_sampling(ll_fn, prior, n_points = 100) sampler #> An <ernest_sampler>: 100 points x 0 iter. x 0 lik. calls"},{"path":"https://kylesnap.github.io/ernest/reference/plot.ernest.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot diagnostics for a nested sampling run — plot.ernest_estimates","title":"Plot diagnostics for a nested sampling run — plot.ernest_estimates","text":"Show normalized likelihood, importance weights, evidence functions log. volume.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/plot.ernest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot diagnostics for a nested sampling run — plot.ernest_estimates","text":"","code":"# S3 method for class 'ernest_estimates' plot(x, ...)  # S3 method for class 'ernest_run' plot(x, ..., ndraws = 0)"},{"path":"https://kylesnap.github.io/ernest/reference/plot.ernest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot diagnostics for a nested sampling run — plot.ernest_estimates","text":"x Either ernest_estimates (calculate()) ernest_run object. ... dots future extensions must empty. ndraws Number simulated log. volume values generate plotting. ndraws = 0, plot log. volume estimates generated run.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/plot.ernest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot diagnostics for a nested sampling run — plot.ernest_estimates","text":"x, invisibly. ggplot2::ggplot() object printed side effect. plot faceted three frames. horizontal axis shows values log. volume: x ernest_run estimates derived run, x ernest_estimates (ndraws != 0), values simulated. three y axes follows: Evidence: Estimate corresponding error ribbon drawn either estimated standard error (ernest_run) drawn high density credible interval (HDCI) (ernest_sampler); Normalized Likelihood: likelihood value criteria used draw new points likelihood-restricted prior sampler, normalized maximum likelihood generated run, ; Posterior Weight: density posterior weights attributed regions volume within prior. using ernest_estimates object, error ribbon drawn HDCI estimate.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/plot.ernest.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Plot diagnostics for a nested sampling run — plot.ernest_estimates","text":"ernest_estimates, ndraws must sufficiently large calculate HDI. HDI calculation fails, user warned ernest_run plot generated instead.","code":""},{"path":[]},{"path":"https://kylesnap.github.io/ernest/reference/plot.ernest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot diagnostics for a nested sampling run — plot.ernest_estimates","text":"","code":"# Plot integration results from a run. data(ernest_run_example) plot(ernest_run_example)   # Simulate results before plotting. library(ggdist) data(ernest_run_example) plot(ernest_run_example, ndraws = 50)  # Simulate results from a run, then plot simulated results. library(ggdist) data(ernest_run_example)  sim <- calculate(ernest_run_example, ndraws = 50) plot(sim)"},{"path":"https://kylesnap.github.io/ernest/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. generics calculate, compile, generate, visualize posterior as_draws, as_draws_matrix, as_draws_rvars","code":""},{"path":"https://kylesnap.github.io/ernest/reference/summary.ernest_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise a nested sampling run — summary.ernest_run","title":"Summarise a nested sampling run — summary.ernest_run","text":"Provides summary ernest_run object.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/summary.ernest_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise a nested sampling run — summary.ernest_run","text":"","code":"# S3 method for class 'ernest_run' summary(object, ...)"},{"path":"https://kylesnap.github.io/ernest/reference/summary.ernest_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise a nested sampling run — summary.ernest_run","text":"object ernest_run object. ... dots future extensions must empty.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/summary.ernest_run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise a nested sampling run — summary.ernest_run","text":"object class summary.ernest_run, list : n_iter: Number iterations (number dead points). n_points: Number live points end run. log_volume, log_evidence, log_evidence_err: final estimates quantities performed run generated object. run, tibble n_iter + n_points rows, containing vectors call, log_lik, log_volume, log_weight, log_evidence, log_evidence_err, information.","code":""},{"path":[]},{"path":"https://kylesnap.github.io/ernest/reference/summary.ernest_run.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarise a nested sampling run — summary.ernest_run","text":"","code":"# Load an example run data(ernest_run_example)  # Summarise the run and view a tibble of its results. run_sm <- summary(ernest_run_example) run_sm #>  #> ── Nested Sampling Results from <ernest_run> ─────────────────────────────────── #> No. Points: 1000 #> No. Iterations: 9315 #> No. Lik. Calls: 232875 #> Log. Evidence: -8.978 (± 0.08203) #>  #> ── Weighted Posterior Distribution  #> # A tibble: 3 × 7 #>   variable               mean  median    sd   mad    q5   q95 #>   <chr>                 <dbl>   <dbl> <dbl> <dbl> <dbl> <dbl> #> 1 Uniform(-10, 10)    0.00816  0.0206 0.967 0.982 -1.57  1.59 #> 2 Uniform(-10, 10).1 -0.0235  -0.0154 0.975 0.973 -1.65  1.57 #> 3 Uniform(-10, 10).2  0.00270  0.0142 0.984 0.999 -1.60  1.58 run_sm$run #> # A tibble: 10,315 × 7 #>     call log_lik log_volume log_weight log_evidence log_evidence_err information #>    <int>   <dbl>      <dbl>      <dbl>        <dbl>            <dbl>       <dbl> #>  1    25   -149.     -0.001      -148.        -157.         3.17e-33   -1.01e-62 #>  2    50   -146.     -0.002      -145.        -154.         1.43e-32   -2.04e-61 #>  3    75   -141.     -0.003      -140.        -149.         1.41e-31   -1.99e-59 #>  4   100   -140.     -0.004      -139.        -147.         3.25e-31   -1.05e-58 #>  5   125   -138.     -0.005      -136.        -145.         1.01e-30   -1.03e-57 #>  6   150   -133.     -0.006      -131.        -140.         1.17e-29   -1.36e-55 #>  7   175   -130.     -0.007      -128.        -137.         5.06e-29   -2.56e-54 #>  8   200   -129.     -0.008      -128.        -136.         8.74e-29   -7.65e-54 #>  9   225   -127.     -0.009      -125.        -134.         2.14e-28   -4.60e-53 #> 10   250   -127.     -0.01       -125.        -133.         3.66e-28   -1.34e-52 #> # ℹ 10,305 more rows"},{"path":"https://kylesnap.github.io/ernest/reference/visualize.ernest_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the posterior distribution of an ernest_run — visualize.ernest_run","title":"Plot the posterior distribution of an ernest_run — visualize.ernest_run","text":"Create plot posterior distributions nested sampling run, trace evolution discarded live points along log prior volume.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/visualize.ernest_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the posterior distribution of an ernest_run — visualize.ernest_run","text":"","code":"# S3 method for class 'ernest_run' visualize(x, ..., type = c(\"density\", \"trace\"), vars = NULL, plot = TRUE)"},{"path":"https://kylesnap.github.io/ernest/reference/visualize.ernest_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the posterior distribution of an ernest_run — visualize.ernest_run","text":"x ernest_run object. ... Arguments passed as_draws_rvars(). type type plot create. Either \"density\", shows posterior density distribution, \"trace\", shows distribution points along estimates log prior volume. vars character vector variable names plot. plot Logical, whether return ggplot visualization, tibble data used create plot.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/visualize.ernest_run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the posterior distribution of an ernest_run — visualize.ernest_run","text":"Either ggplot object plot = TRUE, tibble.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/visualize.ernest_run.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Plot the posterior distribution of an ernest_run — visualize.ernest_run","text":"method requires ggdist package plotting posterior.","code":""},{"path":[]},{"path":"https://kylesnap.github.io/ernest/reference/visualize.ernest_run.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the posterior distribution of an ernest_run — visualize.ernest_run","text":"","code":"# Load example run library(ggdist) data(ernest_run_example)  # Plot posterior distributions of the parameters visualize(ernest_run_example, type = \"density\")   # Plot the trace of the radial coordinate in unit scale visualize(   ernest_run_example,   type = \"trace\",   vars = \".radial\",   units = \"unit_cube\",   radial = TRUE )"}]
