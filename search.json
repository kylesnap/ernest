[{"path":"https://kylesnap.github.io/ernest/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to ernest","title":"Contributing to ernest","text":"outlines propose change ernest. detailed discussion contributing tidyverse packages, please see development contributing guide code review principles.","code":""},{"path":"https://kylesnap.github.io/ernest/CONTRIBUTING.html","id":"lifecycle","dir":"","previous_headings":"","what":"Lifecycle","title":"Contributing to ernest","text":"Ernest initially stable state development, great deal active subsequent development envisioned.","code":""},{"path":"https://kylesnap.github.io/ernest/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to ernest","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://kylesnap.github.io/ernest/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to ernest","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed). See guide create great issue advice.","code":""},{"path":"https://kylesnap.github.io/ernest/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to ernest","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"kylesnap/ernest\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://kylesnap.github.io/ernest/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to ernest","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept. ernest’s tests can take run. tests can skipped setting ERNEST_EXTENDED_TESTS environment option false.","code":""},{"path":"https://kylesnap.github.io/ernest/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to ernest","text":"Please note ernest project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://kylesnap.github.io/ernest/articles/more-ernest-runs.html","id":"two-gaussian-blobs","dir":"Articles","previous_headings":"","what":"Two Gaussian “Blobs”","title":"More Nested Sampling Runs with Ernest","text":"estimate Bayesian evidence simple two-dimensional problem two well-separated Gaussian modes—classical nested sampling test problem, evidence can solved analytically. Define log-likelihood prior: Set sampler run nested sampling: distribution, analytical evidence 𝒵=log(22*π*0.12/100)≈−6.679\\mathcal{Z} = \\log(2^2 * \\pi * 0.1^2 / 100) \\approx -6.679. Use summary extract log-evidence (log_evidence) uncertainty (log_evidence_err): Plot progress evidence estimate:","code":"# Log-likelihood for two Gaussian blobs gaussian_blobs_loglik <- function(x) {   sigma <- 0.1   mu1 <- c(1, 1)   mu2 <- -c(1, 1)   sigma_inv <- diag(2) / sigma^2    if (!is.matrix(x)) dim(x) <- c(1, length(x))   dx1 <- sweep(x, 2, mu1)   dx2 <- sweep(x, 2, mu2)   val1 <- -0.5 * rowSums((dx1 %*% sigma_inv) * dx1)   val2 <- -0.5 * rowSums((dx2 %*% sigma_inv) * dx2)   matrixStats::rowLogSumExps(cbind(val1, val2)) }  # Uniform prior over [-5, 5] in each dimension prior <- create_uniform_prior(lower = -5, upper = 5, varnames = c(\"A\", \"B\")) sampler <- ernest_sampler(gaussian_blobs_loglik, prior, n_points = 100) result <- generate(sampler, seed = 42, show_progress = FALSE) #> ✔ Creating new live points. #> ✔ `min_logz` reached (0.0497 < 0.05). smry <- summary(result) smry #>  #> ── Nested sampling results <ernest_run> ──────────────────────────────────────── #> No. Points: 100 #> No. Iterations: 948 #> No. Lik. Calls: 20902 #> Log. Evidence: -6.4384 (± 0.2592) plot(result)"},{"path":"https://kylesnap.github.io/ernest/articles/more-ernest-runs.html","id":"example-estimating-the-evidence-for-the-eggbox-problem","dir":"Articles","previous_headings":"","what":"Example: Estimating the Evidence for the Eggbox Problem","title":"More Nested Sampling Runs with Ernest","text":"“eggbox” problem challenging test case nested sampling due highly multimodal likelihood surface. Define log-likelihood prior: Visualize likelihood surface:  Run sampler compare estimated log-evidence nestle result (≈235.895\\approx 235.895): Plot posterior distribution:","code":"eggbox_loglik <- function(x) {   tmax <- 5.0 * pi   if (!is.matrix(x)) dim(x) <- c(1, length(x))   t <- sweep(2.0 * tmax * x, 2, tmax, \"-\")   (2.0 + cos(t[, 1] / 2.0) * cos(t[, 2] / 2.0))^5.0 }  # Uniform prior over [0, 1] in each dimension eggbox_prior <- create_uniform_prior(varnames = c(\"A\", \"B\")) sampler <- ernest_sampler(eggbox_loglik, eggbox_prior) result <- generate(sampler, seed = 42, show_progress = FALSE) #> ✔ Creating new live points. #> ✔ `min_logz` reached (0.05 < 0.05). smry <- summary(result) smry #>  #> ── Nested sampling results <ernest_run> ──────────────────────────────────────── #> No. Points: 500 #> No. Iterations: 5046 #> No. Lik. Calls: 111977 #> Log. Evidence: 235.9308 (± 0.1198) visualize(result, type = \"density\")"},{"path":"https://kylesnap.github.io/ernest/articles/more-ernest-runs.html","id":"adding-data","dir":"Articles","previous_headings":"","what":"Adding Data","title":"More Nested Sampling Runs with Ernest","text":"Often, likelihood depends observed data. ernest, must incorporate data within likelihood function. , show supply data using create_likelihood() anonymous function, certified dataset U.S. National Institute Science Technology (NIST). Note: log_lik returns -Inf non-positive standard deviations, explicitly censoring impossible parameter values. Supply data using either anonymous function dots argument create_likelihood: Define prior mean standard deviation, run sampler. prior constrained near expected posterior values: number iterations required proportional product number live points (n_points) KL divergence prior posterior. Examine estimated posterior distribution: Summarize posterior parameter (e.g., median 95% interval):","code":"# Sample data: vector of observations y <- c(   100000000.2, 100000000.1, 100000000.3, 100000000.1, 100000000.3,   100000000.1, 100000000.3, 100000000.1, 100000000.3, 100000000.1, 100000000.3 )  # Model likelihood: Y ~ N(mu, sd) log_lik <- function(theta, data) {   if (theta[2] <= 0) return(-Inf)   sum(stats::dnorm(y, mean = theta[1], sd = theta[2], log = TRUE)) } # Anonymous function anon_log_lik <- \\(theta) log_lik(theta, data = y)   # Using dots for create_likelihood partial_log_lik <- create_likelihood(fn = log_lik, data = !!y)  expected_mean <- 100000000.200000000000000 expected_sd <- 0.108372230793914 anon_log_lik(c(expected_mean, expected_sd)) #> [1] 10.0784 partial_log_lik(c(expected_mean, expected_sd)) #> [1] 10.0784 prior <- create_uniform_prior(   lower = c(99999999, 0.01),   upper = c(100000001, 1),   varnames = c(\"mu\", \"sigma\") ) sampler <- ernest_sampler(partial_log_lik, prior) result <- generate(sampler, seed = 42, show_progress = FALSE) #> ✔ Creating new live points. #> ✔ `min_logz` reached (0.05 < 0.05). draws <- as_draws(result) |>   posterior::resample_draws() posterior::summarise_draws(   draws,   \\(x) quantile(x, probs = c(0.05, 0.5, 0.95)) ) #> # A tibble: 2 × 4 #>   variable    `5%`         `50%`         `95%` #>   <chr>      <dbl>         <dbl>         <dbl> #> 1 mu       1.00e+8 100000000.    100000000.    #> 2 sigma    7.62e-2         0.109         0.173"},{"path":"https://kylesnap.github.io/ernest/articles/nested-sampling-with-ernest.html","id":"nested-sampling-with-ernest","dir":"Articles","previous_headings":"","what":"Nested Sampling with Ernest","title":"Quickstart: Nested Sampling with Ernest","text":"vignette provides hands-introduction nested sampling (NS) using ernest package. learn : Understand role model evidence Bayesian inference difficult compute. Use prior transforms define parameter spaces NS. Set run nested sampling analysis R ernest. Inspect, summarise, visualise results NS run, including evidence estimates posterior samples.","code":""},{"path":"https://kylesnap.github.io/ernest/articles/nested-sampling-with-ernest.html","id":"bayesian-model-evidence-and-nested-sampling","dir":"Articles","previous_headings":"Nested Sampling with Ernest","what":"Bayesian Model Evidence and Nested Sampling","title":"Quickstart: Nested Sampling with Ernest","text":"Bayesian inference, use probabilities represent current beliefs model’s unobservable parameters (Ashton et al. 2022). gather new data, update beliefs using Bayes’ theorem: P(θ)=L(θ)π(θ)Z P(\\theta) = \\frac{L(\\theta)\\pi(\\theta)}{Z}  π(θ)\\pi(\\theta) prior distribution, L(θ)L(\\theta) likelihood model given parameters θ\\theta data DD, P(θ)P(\\theta) posterior distribution parameters beliefs updated. denominator ZZ called Bayesian evidence marginal likelihood. isolation, ZZ serves normalise P(θ)P(\\theta) well-conditioned probability distribution. reorganise Bayes’ theorem isolate ZZ, see calculating model’s evidence involves integrating possible values θ\\theta: Z=∫∀θL(θ)π(θ)dθ Z = \\int_{\\forall \\theta} L(\\theta) \\pi(\\theta) d\\theta allows us use ZZ parameter-independent measure model’s overall plausibility given data. comparing two models, ratio respective evidences (called Bayes factor) shows much data support one model , forms foundation Bayesian model selection. data models, evidence integral solved directly. Instead, researchers rely estimation methods. Nested sampling (NS), introduced Skilling (2004) Skilling (2006), designed estimate ZZ even posterior distribution poorly conditioned (e.g., L(θ)L(\\theta) multiple peaks discontinuities along values θ\\theta). accomplishes dividing prior space π(θ)\\pi(\\theta) many small nested shells volumes. shells defined smallest likelihood value contain, volume cells containing smallest value L*L^* given V(L*)=∫L(θ)>L*π(θ)dθ V(L^*) = \\int_{L(\\theta) > L^*} \\pi(\\theta) d\\theta  build many V(L*)V(L^*) across different values L*L^*, can approximate original multidimensional integral across parameter space θ\\theta one-dimensional integral sequence V(L*)V(L^*): Z=∫01V−1(L*)dV Z = \\int_0^1 V^{-1}(L^*) dV  V−1(V(L*))=L*V^{-1}(V(L^*)) = L^* exists. requires us estimate volume shell VV, can using properties uniform order statistics (Speagle 2020). NS generates sequence shells generating set number live points within prior space, replacing worst points new point π(θ)\\pi(\\theta) additional likelihood constraint. lets NS handle complicated likelihood surfaces, including multiple peaks sharp transitions. addition, NS naturally provides stopping rules, meaning algorithm knows gathered enough information accurately estimate evidence. bonus, samples used evidence estimation can repurposed estimate posterior distribution.","code":""},{"path":"https://kylesnap.github.io/ernest/articles/nested-sampling-with-ernest.html","id":"nested-sampling-with-ernest-1","dir":"Articles","previous_headings":"Nested Sampling with Ernest","what":"Nested Sampling with ernest","title":"Quickstart: Nested Sampling with Ernest","text":", use example documentation python NS package dynesty (Speagle 2020) demonstrate use ernest design, perform, report nested sampling runs.","code":""},{"path":"https://kylesnap.github.io/ernest/articles/nested-sampling-with-ernest.html","id":"defining-priors","dir":"Articles","previous_headings":"Nested Sampling with Ernest > Nested Sampling with ernest","what":"Defining Priors","title":"Quickstart: Nested Sampling with Ernest","text":"Nested sampling operates drawing samples prior, efficiency, ernest represents prior space points [0, 1)-unit hypercube. prior transformation function must specified translate points hypercube valid θ\\theta. ernest, define priors using functions like create_uniform_prior() supplying custom transformation create_prior(). addition organising prior object ernest can use NS, functions also perform checks help ensure prior transformation function size- type-stable.","code":""},{"path":"https://kylesnap.github.io/ernest/articles/nested-sampling-with-ernest.html","id":"example-uniform-prior","dir":"Articles","previous_headings":"Nested Sampling with Ernest > Nested Sampling with ernest > Defining Priors","what":"Example: Uniform Prior","title":"Quickstart: Nested Sampling with Ernest","text":"many cases, sufficient define prior independently distributed uniform normal distributions. Ernest provides convenience functions build priors efficient prior transformation functions. following defines uniform prior [−10,10)[-10, 10) parameter 3D space:","code":"prior <- create_uniform_prior(   lower = -10,   upper = 10,   varnames = c(\"x\", \"y\", \"z\") ) prior #> Prior distribution <uniform_prior/ernest_prior> #>  #> Names: \"x\", \"y\", and \"z\" #> Bounds: #> → Lower: -10, -10, and -10 #> → Upper: 10, 10, and 10"},{"path":"https://kylesnap.github.io/ernest/articles/nested-sampling-with-ernest.html","id":"example-customconditional-prior","dir":"Articles","previous_headings":"Nested Sampling with Ernest > Nested Sampling with ernest > Defining Priors","what":"Example: Custom/Conditional Prior","title":"Quickstart: Nested Sampling with Ernest","text":"complex priors, must provide custom function. case prior spaces independent marginals, amounts specifying function applies inverse CDF component θ\\theta. Consider following prior space five dimensions: first two drawn bivariate Normal distribution, third drawn Beta distribution, fourth Gamma distribution, fifth truncated normal distribution. sophisticated priors (hierarchical models), need build involved prior transformation functions.","code":"five_dim <- function(u) {   x <- double(5)   # MVN(mu = c(5, 2), Sigma = [5, 4; 4, 5])   t <- qnorm(u[1:2])   sigma_sqrt <- matrix(c(2, 1, 1, 2), nrow = 2, byrow = TRUE)   mu <- c(5, 2)   x[1:2] <- drop(t %*% sigma_sqrt) + c(5, 2)      # Beta   x[3] <- qbeta(u[3], shape1 = 2.31, shape2 = 0.627)      # Gamma   x[4] <- qgamma(u[4], shape = 5)      # Truncated Normal   x[5] <- qtruncnorm(u[5], a = 2, b = 10, mean = 5, sd = 2)      return(x) } create_prior(   fn = five_dim,   .n_dim = 5,   .varnames = c(\"MVN\", \"MVN\", \"Beta\", \"Gamma\", \"Norm[2, 10]\") ) #> New names: #> • `MVN` -> `MVN...1` #> • `MVN` -> `MVN...2` #> Prior distribution <ernest_prior> #>  #> Names: \"MVN...1\", \"MVN...2\", \"Beta\", \"Gamma\", and \"Norm[2, 10]\" hierarchical <- function(u) {   # mu ~ N(5, 1)   mu <- qnorm(u[1], mean = 5, sd = 1)   # log10(sd) ~ U[-1, 1]   sd <- 10 ^ qunif(u[2], -1, 1)   # x ~ N(mu, sd^2)   x <- qnorm(u[3], mean = mu, sd = sd)   c(mu, sd, x) } create_prior(   fn = hierarchical,   .n_dim = 3,   .varnames = c(\"mu\", \"sigma\", \"x\"),   .lower = c(-Inf, 0, -Inf) ) #> Prior distribution <ernest_prior> #>  #> Names: \"mu\", \"sigma\", and \"x\" #> Bounds: #> → Lower: -Inf, 0, and -Inf #> → Upper: Inf, Inf, and Inf"},{"path":"https://kylesnap.github.io/ernest/articles/nested-sampling-with-ernest.html","id":"likelihood-function","dir":"Articles","previous_headings":"Nested Sampling with Ernest > Nested Sampling with ernest","what":"Likelihood Function","title":"Quickstart: Nested Sampling with Ernest","text":"Model log-likelihoods represented ernest functions. functions expected return single scalar value possible θ\\theta within prior space. , reason, π(θ)\\pi(\\theta) contains regions θ\\theta invalid, ensure likelihood function returns -Inf. example, use create_likelihood() assign parameters LaplaceDemon density function multivariate normal distribution:","code":"mu <- c(0, 0, 0) C <- diag(1, 3) C[C == 0] <- 0.95  loglike <- create_likelihood(   rowwise_fn = dmvn,   mu = !!mu,   Sigma = !!C,   log = TRUE )"},{"path":"https://kylesnap.github.io/ernest/articles/nested-sampling-with-ernest.html","id":"setting-up-and-running-the-sampler","dir":"Articles","previous_headings":"Nested Sampling with Ernest > Nested Sampling with ernest","what":"Setting Up and Running the Sampler","title":"Quickstart: Nested Sampling with Ernest","text":"Initialise sampler likelihood prior. number live points (n_points) controls resolution sampling, points leading accurate estimates exchange longer run times. Run nested sampling fixed number iterations evidence estimate converges: generate produces ernest_run object can saved. can continue run calling generate previously created ernest_run:","code":"sampler <- ernest_sampler(   log_lik = loglike,   prior = prior,   n_points = 500 ) sampler #> Nested sampling specification <ernest_sampler> #> No. Points: 500 #>  #> ── Sampling Method  #> • Random Walk in Unit Cube LRPS <rwmh_cube/ernest_lrps> #> • No. Dimensions: 3 #> • No. Calls Since Update: 0 #> • No. Accepted Since Update: 0 #> • Current Step Size: 1 run <- generate(   sampler,    max_iterations = 2000,   seed = 123,    show_progress = FALSE ) #> ✔ Creating new live points. #> ✔ `max_iterations` reached (2000). run #> Nested sampling run <ernest_run/ernest_sampler> #> No. Points: 500 #>  #> ── Sampling Method  #> • Random Walk in Unit Cube LRPS <rwmh_cube/ernest_lrps> #> • No. Dimensions: 3 #> • No. Calls Since Update: 0 #> • No. Accepted Since Update: 0 #> • Current Step Size: 0.0823 #>  #> ── Results  #> No. Iterations: 2000 #> No. Calls: 35578 #> Log. Evidence: -8.9122 (± 1.6336) tmp_name <- tempfile(\"ernest_run.rds\") saveRDS(run, tmp_name)  continued_run <- readRDS(tmp_name)  run2 <- generate(continued_run, min_logz = 0.01, show_progress = FALSE) #> ✔ Restoring live points from a previous run. #> ✔ `min_logz` reached (0.01 < 0.01). run2 #> Nested sampling run <ernest_run/ernest_sampler> #> No. Points: 500 #>  #> ── Sampling Method  #> • Random Walk in Unit Cube LRPS <rwmh_cube/ernest_lrps> #> • No. Dimensions: 3 #> • No. Calls Since Update: 0 #> • No. Accepted Since Update: 0 #> • Current Step Size: 0.004 #>  #> ── Results  #> No. Iterations: 6699 #> No. Calls: 153053 #> Log. Evidence: -9.0751 (± 0.1247)"},{"path":"https://kylesnap.github.io/ernest/articles/nested-sampling-with-ernest.html","id":"inspecting-and-summarising-results","dir":"Articles","previous_headings":"Nested Sampling with Ernest > Nested Sampling with ernest","what":"Inspecting and Summarising Results","title":"Quickstart: Nested Sampling with Ernest","text":"result object summary method viewing evidence estimates, posterior samples, diagnostics tidy tibble: posterior package offers methods inspecting points generated run: can view importance weight point re-weight sample estimate posterior distribution:","code":"summary(run2) #>  #> ── Nested sampling results <ernest_run> ──────────────────────────────────────── #> No. Points: 500 #> No. Iterations: 6699 #> No. Lik. Calls: 153053 #> Log. Evidence: -9.0751 (± 0.1247) summary(run2)$run #> # A tibble: 7,199 × 7 #>     call log_lik log_volume log_weight log_evidence log_evidence_err information #>    <int>   <dbl>      <dbl>      <dbl>        <dbl>            <dbl>       <dbl> #>  1     1  -2309.     -0.002     -2306.       -2315.                0           0 #>  2     2  -2150.     -0.004     -2147.       -2156.                0           0 #>  3     3  -2134.     -0.006     -2131.       -2140.                0           0 #>  4     4  -2119.     -0.008     -2116.       -2125.                0           0 #>  5     5  -2077.     -0.01      -2074.       -2083.                0           0 #>  6     6  -2072.     -0.012     -2069.       -2078.                0           0 #>  7     7  -2025.     -0.014     -2022.       -2031.                0           0 #>  8     8  -2002.     -0.016     -1999.       -2008.                0           0 #>  9     9  -1927.     -0.018     -1924.       -1934.                0           0 #> 10    10  -1907.     -0.02      -1904.       -1913.                0           0 #> # ℹ 7,189 more rows library(posterior) unweighted_post <- as_draws(run2) weights(unweighted_post) |> head() #> [1] 0 0 0 0 0 0 weighted_post <- unweighted_post |>   resample_draws() posterior::summarise_draws(weighted_post) #> # A tibble: 3 × 10 #>   variable   mean median    sd   mad    q5   q95  rhat ess_bulk ess_tail #>   <chr>     <dbl>  <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>    <dbl>    <dbl> #> 1 x        -0.135 -0.139 0.964 0.988 -1.69  1.41  1.15    1743.     14.4 #> 2 y        -0.145 -0.158 0.982 0.994 -1.71  1.51  1.13    1685.     14.6 #> 3 z        -0.143 -0.141 0.972 1.00  -1.70  1.43  1.18    1719.     14.1"},{"path":"https://kylesnap.github.io/ernest/articles/nested-sampling-with-ernest.html","id":"visualising-results","dir":"Articles","previous_headings":"Nested Sampling with Ernest > Nested Sampling with ernest","what":"Visualising Results","title":"Quickstart: Nested Sampling with Ernest","text":"Ernest provides plotting utilities evidence estimates posterior distribution.","code":""},{"path":"https://kylesnap.github.io/ernest/articles/nested-sampling-with-ernest.html","id":"evidence-evolution","dir":"Articles","previous_headings":"Nested Sampling with Ernest > Nested Sampling with ernest > Visualising Results","what":"Evidence evolution","title":"Quickstart: Nested Sampling with Ernest","text":"","code":"plot(run2)"},{"path":"https://kylesnap.github.io/ernest/articles/nested-sampling-with-ernest.html","id":"posterior-marginals","dir":"Articles","previous_headings":"Nested Sampling with Ernest > Nested Sampling with ernest > Visualising Results","what":"Posterior marginals","title":"Quickstart: Nested Sampling with Ernest","text":"","code":"visualize(run2, type = \"density\")"},{"path":"https://kylesnap.github.io/ernest/articles/nested-sampling-with-ernest.html","id":"trace-plots","dir":"Articles","previous_headings":"Nested Sampling with Ernest > Nested Sampling with ernest > Visualising Results","what":"Trace plots","title":"Quickstart: Nested Sampling with Ernest","text":"","code":"visualize(run2, type = \"trace\", vars = c(\"x\", \"y\", \"z\"))"},{"path":"https://kylesnap.github.io/ernest/articles/nested-sampling-with-ernest.html","id":"uncertainty-and-resampling","dir":"Articles","previous_headings":"Nested Sampling with Ernest > Nested Sampling with ernest","what":"Uncertainty and Resampling","title":"Quickstart: Nested Sampling with Ernest","text":"can simulate uncertainty NS run generating random draws log-volume estimate iteration Higson et al. (2019). can visualise uncertainty estimate’s plot method.  details nested sampling, please refer ernest’s documentation.","code":"calc_sim <- calculate(run2, ndraws = 500) calc_sim #> Nested sampling estimates <ernest_estimate> #> No. of Simulated Draws: 500 #> Log. Volume: -20 ± 1.3 #> Log. Evidence: -9.1 ± 0.12 #> # A tibble: 7,199 × 4 #>        log_lik        log_volume    log_weight  log_evidence #>     <rvar[1d]>        <rvar[1d]>    <rvar[1d]>    <rvar[1d]> #>  1  -2309 ± NA  -0.0020 ± 0.0020  -2315 ± 0.88  -2315 ± 0.88 #>  2  -2150 ± NA  -0.0039 ± 0.0029  -2156 ± 0.80  -2156 ± 0.80 #>  3  -2134 ± NA  -0.0059 ± 0.0035  -2140 ± 0.81  -2140 ± 0.81 #>  4  -2119 ± NA  -0.0077 ± 0.0042  -2125 ± 0.80  -2125 ± 0.80 #>  5  -2077 ± NA  -0.0098 ± 0.0046  -2083 ± 0.80  -2083 ± 0.80 #>  6  -2072 ± NA  -0.0119 ± 0.0050  -2078 ± 0.82  -2078 ± 0.80 #>  7  -2025 ± NA  -0.0138 ± 0.0054  -2031 ± 0.84  -2031 ± 0.84 #>  8  -2002 ± NA  -0.0160 ± 0.0059  -2008 ± 0.84  -2008 ± 0.84 #>  9  -1927 ± NA  -0.0181 ± 0.0061  -1934 ± 0.76  -1934 ± 0.76 #> 10  -1907 ± NA  -0.0201 ± 0.0065  -1913 ± 0.76  -1913 ± 0.76 #> # ℹ 7,189 more rows plot(calc_sim)"},{"path":"https://kylesnap.github.io/ernest/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kyle Dewsnap. Author, maintainer.","code":""},{"path":"https://kylesnap.github.io/ernest/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Skilling J (2004). “Nested Sampling.” AIP Conference Proceedings, 735(1), 395–405. doi:10.1063/1.1835238. Skilling J (2006). “Nested Sampling General Bayesian Computation.” Bayesian Analysis, 1(4), 833–859. doi:10.1214/06-BA127.","code":"@Article{,   title = {Nested Sampling},   author = {John Skilling},   journal = {AIP Conference Proceedings},   year = {2004},   volume = {735},   number = {1},   pages = {395–405},   doi = {10.1063/1.1835238}, } @Article{,   title = {Nested Sampling for General Bayesian Computation},   author = {John Skilling},   journal = {Bayesian Analysis},   year = {2006},   volume = {1},   number = {4},   pages = {833–859},   doi = {10.1214/06-BA127}, }"},{"path":[]},{"path":"https://kylesnap.github.io/ernest/index.html","id":"a-toolkit-for-nested-sampling-1","dir":"","previous_headings":"","what":"A Toolkit for Nested Sampling","title":"The Nested Sampling Toolkit","text":"ernest comprehensive toolkit nested sampling (NS), algorithm estimating statistical model’s Bayesian evidence posterior distribution. provides S3 objects methods make nested sampling accessible, flexible, robust within R environment.","code":""},{"path":"https://kylesnap.github.io/ernest/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"The Nested Sampling Toolkit","text":"Install development version ernest GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"kylesnap/ernest\")"},{"path":"https://kylesnap.github.io/ernest/index.html","id":"why-use-ernest","dir":"","previous_headings":"","what":"Why use ernest?","title":"The Nested Sampling Toolkit","text":"Bayesian inference, evidence ($`\\mathcal{Z}`$, also called marginal likelihood) probability observing data $`D`$ proposed model $`M`$. obtained integrating model’s likelihood prior distribution $`M`$’s parameters. $`\\mathcal{Z}`$ provides parameter-independent way assess plausibility $`D`$ given $`M`$, key Bayesian model comparison methods Bayes factors. Calculating $`\\mathcal{Z}`$ challenging, requires evaluating high-dimensional integral parameter space. Nested sampling estimates integral dividing space series small volumes. starts drawing points prior ranking likelihood. least likely points discarded replaced new samples restricted likelihood regions, gradually compressing search space. round discarding shrinks explored volume predictable way, helping approximate integral. approach estimating $`Z`$ offers several advantages methods like Markov chain Monte Carlo (MCMC): Robustness: NS handles complex likelihood surfaces otherwise difficult traverse, multiple modes discontinuities. Posterior inference: run, discarded samples can weighted approximate model’s posterior distribution. Natural stopping criterion: NS can estimate amount evidence left within unexplored prior volume, can stop sampling amount gets trivially small. Tractable uncertainty estimates: shrinkage iteration follows uniform order statistic, uncertainty can simulated using results single run. ernest’s implementation NS offers R users several benefits: Native R implementation: John Skilling’s Skilling (2006) NS algorithm implemented R, Python Fortran dependencies. (C++ used implement included likelihood samplers improve run-time efficiency). Type- size-safety: ernest helps ensure user provides likelihood functions prior specifications meet requirements NS algorithm. Familiar methods: Sampler specifications results stored S3 objects. Start continue NS run generate(), review results summary(), simulate estimation error calculate(). Powerful visualizations: Plot evidence estimates analyse posterior distributions using ggplot2 posterior.","code":""},{"path":"https://kylesnap.github.io/ernest/index.html","id":"quick-example","dir":"","previous_headings":"","what":"Quick Example","title":"The Nested Sampling Toolkit","text":"example demonstrates basic workflow: define prior, specify likelihood, run nested sampling, summarise results. advanced usage, including custom priors hierarchical models, see package vignettes.","code":"library(ernest)  # Define a prior (i.i.d. multivariate uniform) prior <- create_uniform_prior(lower = -10, upper = 10, varnames = c(\"x\", \"y\", \"z\"))  # Define a log-likelihood function (multivariate normal) mu <- c(0, 0, 0) Sigma <- diag(1, 3) Sigma[Sigma == 0] <- 0.95 loglike <- create_likelihood(   rowwise_fn = LaplacesDemon::dmvn,   mu = !!mu,   Sigma = !!Sigma,   log = TRUE )  # Set up and run the sampler sampler <- ernest_sampler(   log_lik = loglike,   prior = prior,   n_points = 500 ) run <- generate(sampler, seed = 42)  # Summarise and visualise results summary(run) plot(run) visualize(run, type = \"trace\")"},{"path":"https://kylesnap.github.io/ernest/index.html","id":"learn-more","dir":"","previous_headings":"","what":"Learn More","title":"The Nested Sampling Toolkit","text":"NS: vignette(\"nested-sampling--ernest\"), Skilling (2004), Skilling (2006), Buchner (2023). use ernest: vignette(\"-ernest-runs.Rmd\").","code":""},{"path":"https://kylesnap.github.io/ernest/index.html","id":"prior-work","dir":"","previous_headings":"","what":"Prior Work","title":"The Nested Sampling Toolkit","text":"NS implemented many languages; offer R interfaces. non-exhaustive list popular NS implementations adapted Fowlie, Handley, Su (2021): ernest’s design, API, NS implementation based nestle package, inspiration dynesty. nestcheck Python package provides routines error estimation diagnostic plotting nested sampling runs (Higson et al. 2019). Several ernest’s methods based work.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/as_draws.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform nested sampling runs to draws objects — as_draws.ernest_run","title":"Transform nested sampling runs to draws objects — as_draws.ernest_run","text":"Convert ernest_run format supported posterior package.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/as_draws.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform nested sampling runs to draws objects — as_draws.ernest_run","text":"","code":"# S3 method for class 'ernest_run' as_draws(x, ..., units = c(\"original\", \"unit_cube\"), radial = FALSE)  # S3 method for class 'ernest_run' as_draws_matrix(x, ..., units = c(\"original\", \"unit_cube\"), radial = FALSE)  # S3 method for class 'ernest_run' as_draws_rvars(x, ..., units = c(\"original\", \"unit_cube\"), radial = FALSE)"},{"path":"https://kylesnap.github.io/ernest/reference/as_draws.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform nested sampling runs to draws objects — as_draws.ernest_run","text":"x ernest_run object. ... dots future extensions must empty. units Case-sensitive string. scale sampled points: \"original\": Points scale prior space. \"unit_cube\": Points (0, 1) unit hypercube scale. radial Logical. TRUE, returns additional column .radial containing radial coordinate (.e., Euclidean norm) sampled point.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/as_draws.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform nested sampling runs to draws objects — as_draws.ernest_run","text":"draws object containing posterior samples nested sampling run, importance weights (log units). returned object type depends function used: as_draws as_draws_matrix, posterior::draws_matrix() object (class c(\"draws_matrix\", \"draws\", \"matrix\")). as_draws_rvars, posterior::draws_rvars() object (class c(\"draws_rvars\", \"draws\", \"list\")).","code":""},{"path":[]},{"path":"https://kylesnap.github.io/ernest/reference/as_draws.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform nested sampling runs to draws objects — as_draws.ernest_run","text":"","code":"# Load example run library(posterior) #> This is posterior version 1.6.1 #>  #> Attaching package: ‘posterior’ #> The following objects are masked from ‘package:stats’: #>  #>     mad, sd, var #> The following objects are masked from ‘package:base’: #>  #>     %in%, match data(example_run)  # View importance weights dm <- as_draws(example_run) weights(dm) |> head() #> [1] 9.246773e-63 3.843403e-62 8.700225e-60 2.020381e-58 1.866047e-55 #> [6] 1.975416e-54  # Summarise points after resampling dm |>   resample_draws() |>   summarize_draws() #> # A tibble: 3 × 10 #>   variable     mean   median    sd   mad    q5   q95  rhat ess_bulk ess_tail #>   <chr>       <dbl>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>    <dbl>    <dbl> #> 1 x         0.00624  0.0225  0.946 0.931 -1.58  1.54  1.17    2103.     14.7 #> 2 y        -0.00852 -0.00513 0.975 0.989 -1.60  1.57  1.17    1916.     14.5 #> 3 z        -0.0256  -0.0295  0.963 0.952 -1.60  1.56  1.17    2124.     14.2  # View the radial coordinate in unit space over the run dm_rad <- as_draws_rvars(   example_run,   units = \"unit_cube\",   radial = TRUE ) plot(   x = example_run$log_volume,   y = draws_of(dm_rad$.radial),   xlab = \"Log-volume\",   ylab = \"Radial coordinate\" )"},{"path":"https://kylesnap.github.io/ernest/reference/calculate.ernest_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate Evidence using a Nested Sampling Run — calculate.ernest_run","title":"Estimate Evidence using a Nested Sampling Run — calculate.ernest_run","text":"Computes evidence related quantities nested sampling run, optionally simulating volumes nested likelihood shell.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/calculate.ernest_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate Evidence using a Nested Sampling Run — calculate.ernest_run","text":"","code":"# S3 method for class 'ernest_run' calculate(x, ..., ndraws = NULL)"},{"path":"https://kylesnap.github.io/ernest/reference/calculate.ernest_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate Evidence using a Nested Sampling Run — calculate.ernest_run","text":"x ernest_run object. ... dots future extensions must empty. ndraws optional positive integer. number log-volume sequences simulate. equal zero, simulations made, one draw vector log-volumes produced estimates contained x. NULL, getOption(\"posterior.rvar_ndraws\") used (default 4000).","code":""},{"path":"https://kylesnap.github.io/ernest/reference/calculate.ernest_run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate Evidence using a Nested Sampling Run — calculate.ernest_run","text":"tibble::tibble(), containing n_iter + n_points rows several columns: log_lik: log-likelihood model. log_volume: log-volume prior space. log_weight: log weights live points. log_evidence: log-evidence model. log_evidence_err: standard error log-evidence (available ndraws = 0). tibble additional class ernest_estimate, plot method. column returned posterior::rvar() vector.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/calculate.ernest_run.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimate Evidence using a Nested Sampling Run — calculate.ernest_run","text":"Higson, E., Handley, W., Hobson, M., & Lasenby, . (2019). Nestcheck: Diagnostic Tests Nested Sampling Calculations. Monthly Notices Royal Astronomical Society, 483(2), 2044–2056. https://doi.org/10.1093/mnras/sty3090","code":""},{"path":"https://kylesnap.github.io/ernest/reference/calculate.ernest_run.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate Evidence using a Nested Sampling Run — calculate.ernest_run","text":"","code":"# Load an example run data(example_run)  # View results as a tibble with `ndraws = FALSE` (the default). calculate(example_run) #> Nested sampling estimates <ernest_estimate> #> No. of Simulated Draws: 4000 #> Log. Volume: -16 ± 1.3 #> Log. Evidence: -8.9 ± 0.098 #> # A tibble: 5,136 × 4 #>       log_lik        log_volume   log_weight log_evidence #>    <rvar[1d]>        <rvar[1d]>   <rvar[1d]>   <rvar[1d]> #>  1  -146 ± NA  -0.0019 ± 0.0019  -152 ± 0.82  -152 ± 0.82 #>  2  -144 ± NA  -0.0039 ± 0.0028  -151 ± 0.80  -150 ± 0.69 #>  3  -139 ± NA  -0.0059 ± 0.0034  -145 ± 0.79  -145 ± 0.78 #>  4  -136 ± NA  -0.0080 ± 0.0040  -142 ± 0.81  -142 ± 0.77 #>  5  -129 ± NA  -0.0100 ± 0.0044  -135 ± 0.82  -135 ± 0.82 #>  6  -126 ± NA  -0.0120 ± 0.0048  -133 ± 0.80  -133 ± 0.74 #>  7  -125 ± NA  -0.0140 ± 0.0053  -131 ± 0.79  -131 ± 0.68 #>  8  -125 ± NA  -0.0160 ± 0.0056  -131 ± 0.80  -130 ± 0.59 #>  9  -118 ± NA  -0.0180 ± 0.0060  -125 ± 0.81  -125 ± 0.81 #> 10  -118 ± NA  -0.0200 ± 0.0063  -124 ± 0.80  -124 ± 0.65 #> # ℹ 5,126 more rows  # Generate 100 simulated log-volume values for each iteration. calculate(example_run, ndraws = 100) #> Nested sampling estimates <ernest_estimate> #> No. of Simulated Draws: 100 #> Log. Volume: -16 ± 1.1 #> Log. Evidence: -8.9 ± 0.091 #> # A tibble: 5,136 × 4 #>       log_lik        log_volume   log_weight log_evidence #>    <rvar[1d]>        <rvar[1d]>   <rvar[1d]>   <rvar[1d]> #>  1  -146 ± NA  -0.0022 ± 0.0023  -152 ± 0.84  -152 ± 0.84 #>  2  -144 ± NA  -0.0043 ± 0.0030  -151 ± 0.77  -150 ± 0.66 #>  3  -139 ± NA  -0.0061 ± 0.0035  -145 ± 0.82  -145 ± 0.81 #>  4  -136 ± NA  -0.0080 ± 0.0039  -142 ± 0.79  -142 ± 0.76 #>  5  -129 ± NA  -0.0097 ± 0.0041  -135 ± 0.81  -135 ± 0.80 #>  6  -126 ± NA  -0.0117 ± 0.0046  -133 ± 0.78  -133 ± 0.75 #>  7  -125 ± NA  -0.0133 ± 0.0049  -132 ± 0.82  -131 ± 0.73 #>  8  -125 ± NA  -0.0153 ± 0.0055  -131 ± 0.95  -130 ± 0.69 #>  9  -118 ± NA  -0.0171 ± 0.0058  -125 ± 0.78  -125 ± 0.77 #> 10  -118 ± NA  -0.0185 ± 0.0059  -124 ± 0.84  -124 ± 0.69 #> # ℹ 5,126 more rows"},{"path":"https://kylesnap.github.io/ernest/reference/compile.html","id":null,"dir":"Reference","previous_headings":"","what":"Compile a set of live points for nested sampling — compile.ernest_sampler","title":"Compile a set of live points for nested sampling — compile.ernest_sampler","text":"Prepares object nested sampling validating (re)generating set live points. ensures sampler viable new live points generated nested sampling algorithm.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/compile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compile a set of live points for nested sampling — compile.ernest_sampler","text":"","code":"# S3 method for class 'ernest_sampler' compile(object, ..., seed = NA)  # S3 method for class 'ernest_run' compile(object, ..., seed = NA, clear = FALSE)"},{"path":"https://kylesnap.github.io/ernest/reference/compile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compile a set of live points for nested sampling — compile.ernest_sampler","text":"object ernest_sampler ernest_run object. ernest_sampler: Prepares new sampler fresh set live points. ernest_run: Regenerates live points previous results, unless clear = TRUE. ... dots future extensions must empty. seed integer, NULL, NA. Controls random number generator: Integer NULL: Passed set.seed(). NULL, reinitializes generator seed yet set. NA: Makes changes current seed. compile() called object , NA ensures seed remains identical runs. clear Logical. TRUE, clears results previous runs compiling. FALSE, retains previous results validates live points.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/compile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compile a set of live points for nested sampling — compile.ernest_sampler","text":"validated object, valid set live points stored run_env environment.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/compile.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compile a set of live points for nested sampling — compile.ernest_sampler","text":"compile() validates set live points sampler run, ensuring: live point within unit hypercube. likelihood function returns valid values (finite double -Inf) point. set live points perfect plateau (points sharing likelihood). warning issued 25% points share likelihood value. validation fails, set live points removed, preventing sampling issue resolved.","code":""},{"path":[]},{"path":"https://kylesnap.github.io/ernest/reference/compile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compile a set of live points for nested sampling — compile.ernest_sampler","text":"","code":"prior <- create_uniform_prior(n_dim = 2, lower = -1, upper = 1) #> New names: #> • `Uniform` -> `Uniform...1` #> • `Uniform` -> `Uniform...2` ll_fn <- function(x) -sum(x^2) sampler <- ernest_sampler(ll_fn, prior, n_points = 100)  # Compile the sampler to add live points compile(sampler) #> ✔ Creating new live points. #> Nested sampling specification <ernest_sampler> #> No. Points: 100 #>  #> ── Sampling Method  #> • Random Walk in Unit Cube LRPS <rwmh_cube/ernest_lrps> #> • No. Dimensions: 2 #> • No. Calls Since Update: 0 #> • No. Accepted Since Update: 0 #> • Current Step Size: 1 head(sampler$run_env$unit) #>           [,1]       [,2] #> [1,] 0.9947288 0.98949724 #> [2,] 0.9889581 0.09055999 #> [3,] 0.9465411 0.91811271 #> [4,] 0.9413467 0.08311054 #> [5,] 0.0780184 0.92671498 #> [6,] 0.9569834 0.11210960  # Continue a previous run # run <- data(example_run) # sampler_2 <- compile(example_run) # sampler_2  # Make a new sampler from a previous run sampler_3 <- compile(example_run, clear = TRUE) #> ✔ Creating new live points. sampler_3 #> Nested sampling specification <ernest_sampler> #> No. Points: 500 #>  #> ── Sampling Method  #> • Random Walk in Unit Cube LRPS <rwmh_cube/ernest_lrps> #> • No. Dimensions: 3 #> • No. Calls Since Update: 0 #> • No. Accepted Since Update: 0 #> • Current Step Size: 0.0223"},{"path":"https://kylesnap.github.io/ernest/reference/create_likelihood.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare a likelihood function for nested sampling — create_likelihood","title":"Prepare a likelihood function for nested sampling — create_likelihood","text":"Creates modified version log-likelihood function always returns either finite value -Inf vector parameters provided.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/create_likelihood.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare a likelihood function for nested sampling — create_likelihood","text":"","code":"create_likelihood(   fn,   rowwise_fn,   ...,   .nonfinite_action = c(\"warn\", \"quiet\", \"abort\") )"},{"path":"https://kylesnap.github.io/ernest/reference/create_likelihood.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare a likelihood function for nested sampling — create_likelihood","text":"fn, rowwise_fn Choose one fn rowwise_fn: fn: function takes vector parameters returns scalar likelihood value (either finite double -Inf). rowwise_fn: function takes matrix parameters returns vector likelihood values (finite doubles -Inf). ... Named arguments fn rowwise_fn partially applied. .nonfinite_action (case-sensitive string) Action perform fn returns value non-finite -Inf (e.g., NaN, NA, Inf): \"warn\": Issue warning replace values -Inf. \"quiet\": Silently replace values -Inf. \"abort\": Stop execution signal error.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/create_likelihood.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare a likelihood function for nested sampling — create_likelihood","text":"function class ernest_likelihood. function wrapped checks ensure type size stability: provided vector doubles, returns scalar double, -Inf, error. provided matrix doubles, returns vector doubles -Inf length equal number matrix rows, error. Otherwise, throws error.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/create_likelihood.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prepare a likelihood function for nested sampling — create_likelihood","text":"Model likelihoods provided log-density function. first argument fn rowwise_fn vector matrix parameters, respectively. model likelihood conditional data, incorporate data likelihood function . can either build anonymous function (see rlang::as_function()), use ... parameters partially apply data fn rowwise_fn (see purrr::partial()). expected log-likelihood function returns scalar finite double -Inf parameter vector. Non-finite values -Inf, NaN, Inf, NA (.e. missing values) handled behavior .nonfinite_action. Ernest wrap fn can accept matrix parameters. efficient implementation likelihood function can handle vectors matrices, consider providing rowwise_fn instead.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/create_likelihood.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare a likelihood function for nested sampling — create_likelihood","text":"","code":"# A 3D Gaussian likelihood function n_dim <- 3 sigma <- diag(0.95, nrow = 3) det_sigma <- determinant(sigma, logarithm = TRUE)$modulus attributes(det_sigma) <- NULL prec <- solve(sigma) log_norm <- -0.5 * (log(2 * pi) * n_dim + det_sigma)  fn <- function(theta) {   drop(-0.5 * crossprod(theta, crossprod(prec, theta)) + log_norm) } log_lik <- create_likelihood(fn) log_lik(c(0, 0, 0)) #> [1] -2.679876  # Bind data to the likelihood function using dots or anonymous functions. y <- 100000000 * runif(11, min = 0.1, max = 0.3) log_lik <- function(theta, y) {   if (theta[2] <= 0) {     return(-Inf)   }   sum(dnorm(y, mean = theta[1], sd = theta[2], log = TRUE)) } create_likelihood(log_lik, y = !!y) #>  #> ── <ernest_likelihood>  #> <partialised> #> function (...)  #> fn(y = c(11792689.0822127, 14543993.5941249, 29763387.744315,  #> 15531046.660617, 17316007.2788596, 14453893.2293654, 20176399.9927789,  #> 20279952.7114257, 25178754.7301501, 11634861.6639152, 16051442.1574771 #> ), ...) #> <environment: 0x55a8c098efa0> create_likelihood(\\(theta) log_lik(theta, y)) #>  #> ── <ernest_likelihood>  #> function (theta)  #> log_lik(theta, y)"},{"path":"https://kylesnap.github.io/ernest/reference/create_normal_prior.html","id":null,"dir":"Reference","previous_headings":"","what":"Specify a prior with normally distributed marginals — create_normal_prior","title":"Specify a prior with normally distributed marginals — create_normal_prior","text":"specialisation create_prior() parameter space described independent normal variables, possibly truncated.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/create_normal_prior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify a prior with normally distributed marginals — create_normal_prior","text":"","code":"create_normal_prior(   n_dim = NULL,   mean = 0,   sd = 1,   lower = -Inf,   upper = Inf,   varnames = \"Normal\",   name_repair = c(\"unique\", \"universal\", \"check_unique\") )"},{"path":"https://kylesnap.github.io/ernest/reference/create_normal_prior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify a prior with normally distributed marginals — create_normal_prior","text":"n_dim optional positive integer. number dimensions prior distribution. left NULL, inferred common length vector-valued parameters (see Note). mean Numeric vector means. sd Numeric vector standard deviations (must strictly positive.) lower, upper Numeric vector bounds truncated normal distribution. varnames optional character vector. Names variables prior distribution. name_repair optional, case-sensitive string. repair varnames. Options \"unique\" (default), \"universal\", \"check_unique\". See vctrs::vec_as_names() details.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/create_normal_prior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specify a prior with normally distributed marginals — create_normal_prior","text":"normal_prior, subclass ernest_prior efficient implementation unit hypercube transformation.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/create_normal_prior.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Specify a prior with normally distributed marginals — create_normal_prior","text":"vector-valued parameters function recycled length n_dim integer, common length n_dim = NULL. See vctrs::vector_recycling_rules additional information recycling.","code":""},{"path":[]},{"path":"https://kylesnap.github.io/ernest/reference/create_normal_prior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Specify a prior with normally distributed marginals — create_normal_prior","text":"","code":"prior <- create_normal_prior(n_dim = 3) #> New names: #> • `Normal` -> `Normal...1` #> • `Normal` -> `Normal...2` #> • `Normal` -> `Normal...3` prior$fn(c(0.25, 0.5, 0.75)) #> [1] -0.6744898  0.0000000  0.6744898"},{"path":"https://kylesnap.github.io/ernest/reference/create_prior.html","id":null,"dir":"Reference","previous_headings":"","what":"Specify a prior distribution for nested sampling — create_prior","title":"Specify a prior distribution for nested sampling — create_prior","text":"Use R function specify prior distribution parameters nested sampling run.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/create_prior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify a prior distribution for nested sampling — create_prior","text":"","code":"create_prior(   fn,   rowwise_fn,   ...,   .n_dim = NULL,   .varnames = NULL,   .name_repair = c(\"unique\", \"universal\", \"check_unique\"),   .lower = -Inf,   .upper = Inf )"},{"path":"https://kylesnap.github.io/ernest/reference/create_prior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify a prior distribution for nested sampling — create_prior","text":"fn, rowwise_fn Choose one fn rowwise_fn: fn: function. Takes vector unit cube coordinates returns vector parameters length. rowwise_fn: function. Takes matrix unit cube coordinates returns matrix parameters identical dimensions. ... Named arguments fn rowwise_fn partially applied. .n_dim optional positive integer. number dimensions prior distribution. left NULL, inferred common length vector-valued parameters (see Note). .varnames optional character vector. Names variables prior distribution. .name_repair optional, case-sensitive string. repair varnames. Options \"unique\" (default), \"universal\", \"check_unique\". See vctrs::vec_as_names() details. .lower, .upper Numeric vectors. Expected bounds parameter vectors hypercube transformation.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/create_prior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specify a prior distribution for nested sampling — create_prior","text":"named list class ernest_prior, containing: fn: prior transformation function. n_dim: Number dimensions prior space. lower, upper: Bounds prior distribution, recycled length n_dim. Additionally, object varnames attribute.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/create_prior.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Specify a prior distribution for nested sampling — create_prior","text":"unit hypercube transformation encodes points parameter space independent identically distributed points within unit hypercube. Nested sampling implementations, including ernest, use transformation simplify likelihood-restricted prior sampling avoid unnecessary rejection steps. create_prior allows specify prior distribution providing transformation function. factorisable priors, function can simply transform value (0, 1) using inverse cumulative distribution function (CDF) parameter. complex cases, can specify hierarchical conditionally dependent priors (see Examples). create_prior performs regularity checks prior function catch basic errors may affect nested sampling. pass checks, fn rowwise_fn must: Return finite double vector length n_dim given rep(0.5, n_dim); Return finite double matrix parameters dimensions, within bounds lower upper (provided), given random matrix size c(5, n_dim). Ernest wrap fn can accept matrix parameters. efficient implementation handles vectors matrices, consider providing rowwise_fn instead.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/create_prior.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Specify a prior distribution for nested sampling — create_prior","text":"vector-valued parameters function recycled length n_dim integer, common length n_dim = NULL. See vctrs::vector_recycling_rules additional information recycling.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/create_prior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Specify a prior distribution for nested sampling — create_prior","text":"","code":"# 3D uniform prior in the range [-10, 10] unif <- function(x) {    -10 + x * 20 }  prior <- create_prior(unif, .n_dim = 3, .lower = -10, .upper = 10) #> New names: #> • `` -> `...1` #> • `` -> `...2` #> • `` -> `...3` prior$fn(c(0.25, 0.5, 0.75)) #> [1] -5  0  5 mat <- matrix(c(0.25, 0.5, 0.75, 0.1, 0.2, 0.3), ncol = 3, byrow = TRUE) prior$fn(mat) #>      [,1] [,2] [,3] #> [1,]   -5    0    5 #> [2,]   -8   -6   -4  # A normal prior with parameterised mean and standard deviation hier_f <- function(theta) {   mu <- qnorm(theta[1], mean = 5) # mu ~ N(5, 1)   sigma <- 10 ^ qunif(theta[2], min = -1, max = 1) # log10(sigma) ~ U[-1, 1]   x <- qnorm(theta[3], mu, sigma) # X ~ N(mu, sigma)   c(mu, sigma, x) } create_prior(   hier_f,   .varnames = c(\"mu\", \"sigma\", \"x\"),   .lower = c(-Inf, 0, -Inf) ) #> Prior distribution <ernest_prior> #>  #> Names: \"mu\", \"sigma\", and \"x\" #> Bounds: #> → Lower: -Inf, 0, and -Inf #> → Upper: Inf, Inf, and Inf  # Using `rowwise_fn` should be done with care bb_p <- function(x) {   beta <- stats::qbeta(x[1], 5, 5)   bern <- stats::qbinom(x[2], size = 1, beta)   c(beta, bern) } try(   create_prior(     rowwise_fn = bb_p,     .varnames = c(\"beta\", \"bern\")   ) ) #> Error in create_prior(rowwise_fn = bb_p, .varnames = c(\"beta\", \"bern\")) :  #>   Can't validate `rowwise_fn` as a valid prior. #> Caused by error in `prior$fn()`: #> ! `prior(unit)` must return a matrix of equal dim. to `unit`. #> ✖ Expected dim(y) = 10 x 2. #> ✖ Returned dim(y) = . create_prior(bb_p, .varnames = c(\"beta\", \"bern\")) #> Prior distribution <ernest_prior> #>  #> Names: \"beta\" and \"bern\""},{"path":"https://kylesnap.github.io/ernest/reference/create_uniform_prior.html","id":null,"dir":"Reference","previous_headings":"","what":"Specify a prior with uniformly distributed marginals — create_uniform_prior","title":"Specify a prior with uniformly distributed marginals — create_uniform_prior","text":"specialisation create_prior() parameter space described independent uniform marginals.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/create_uniform_prior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify a prior with uniformly distributed marginals — create_uniform_prior","text":"","code":"create_uniform_prior(   n_dim = NULL,   lower = 0,   upper = 1,   varnames = \"Uniform\",   name_repair = c(\"unique\", \"universal\", \"check_unique\") )"},{"path":"https://kylesnap.github.io/ernest/reference/create_uniform_prior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify a prior with uniformly distributed marginals — create_uniform_prior","text":"n_dim optional positive integer. number dimensions prior distribution. left NULL, inferred common length vector-valued parameters (see Note). lower, upper Numeric vector bounds uniform distribution. varnames optional character vector. Names variables prior distribution. name_repair optional, case-sensitive string. repair varnames. Options \"unique\" (default), \"universal\", \"check_unique\". See vctrs::vec_as_names() details.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/create_uniform_prior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specify a prior with uniformly distributed marginals — create_uniform_prior","text":"uniform_prior, subclass ernest_prior efficient implementation unit hypercube transformation.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/create_uniform_prior.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Specify a prior with uniformly distributed marginals — create_uniform_prior","text":"vector-valued parameters function recycled length n_dim integer, common length n_dim = NULL. See vctrs::vector_recycling_rules additional information recycling.","code":""},{"path":[]},{"path":"https://kylesnap.github.io/ernest/reference/create_uniform_prior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Specify a prior with uniformly distributed marginals — create_uniform_prior","text":"","code":"prior <- create_uniform_prior(lower = c(3, -2), upper = c(5, 4)) #> New names: #> • `Uniform` -> `Uniform...1` #> • `Uniform` -> `Uniform...2` prior$fn(c(0.33, 0.67)) #> [1] 3.66 2.02"},{"path":"https://kylesnap.github.io/ernest/reference/ernest-package.html","id":null,"dir":"Reference","previous_headings":"","what":"ernest: The Nested Sampling Toolkit — ernest-package","title":"ernest: The Nested Sampling Toolkit — ernest-package","text":"Estimate model evidence posterior distributions using Bayesian nested sampling, review results using popular statistical analysis packages.","code":""},{"path":[]},{"path":"https://kylesnap.github.io/ernest/reference/ernest-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ernest: The Nested Sampling Toolkit — ernest-package","text":"Maintainer: Kyle Dewsnap kyle.dewsnap@ubc.ca (ORCID)","code":""},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampler.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare a new nested sampling run — ernest_sampler","title":"Prepare a new nested sampling run — ernest_sampler","text":"Initializes ernest_sampler object containing components required perform nested sampling. object can used build sequences nested samples generate().","code":""},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare a new nested sampling run — ernest_sampler","text":"","code":"ernest_sampler(   log_lik,   prior,   sampler = rwmh_cube(),   n_points = 500,   first_update = NULL,   update_interval = NULL )"},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare a new nested sampling run — ernest_sampler","text":"log_lik function takes vector parameters vector returns log-likelihood given model. Wrapped using create_likelihood() unless already class ernest_likelihood. prior object class ernest_prior. Describes prior space within generate sample parameters log_lik. sampler object class ernest_lrps. Describes likelihood-restricted prior sampling technique adopt run. n_points strictly positive integer. number live points use nested sampling run. first_update optional positive integer. number likelihood calls make default uniform LRPS method swapping technique described sampler. left NULL, set n_points * 2.5. update_interval optional positive integer. number likelihood calls updates sampler object. NULL, set n_points * 1.5.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampler.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare a new nested sampling run — ernest_sampler","text":"object class ernest_sampler, list containing inputs used arguments function, along environment run_env used store n_points live particles throughout nested sampling run.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampler.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prepare a new nested sampling run — ernest_sampler","text":"ernest_sampler object tested compile() returned. helps catch errors likelihood prior specifications. compilation step fails, review log_lik_fn prior objects compliance.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampler.html","id":"verbosity","dir":"Reference","previous_headings":"","what":"Verbosity","title":"Prepare a new nested sampling run — ernest_sampler","text":"Messages ernest can silenced global options rlib_message_verbosity rlib_warning_verbosity. options take values: \"default\": Verbose unless .frequency argument supplied. \"verbose\": Always verbose. \"quiet\": Always quiet. set quiet, message displayed condition signaled. See rlang::abort() information.","code":""},{"path":[]},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampler.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare a new nested sampling run — ernest_sampler","text":"","code":"prior <- create_uniform_prior(n_dim = 2, lower = -1, upper = 1) #> New names: #> • `Uniform` -> `Uniform...1` #> • `Uniform` -> `Uniform...2` ll_fn <- function(x) -sum(x^2) sampler <- ernest_sampler(ll_fn, prior, n_points = 100) sampler #> Nested sampling specification <ernest_sampler> #> No. Points: 100 #>  #> ── Sampling Method  #> • Random Walk in Unit Cube LRPS <rwmh_cube/ernest_lrps> #> • No. Dimensions: 2 #> • No. Calls Since Update: 0 #> • No. Accepted Since Update: 0 #> • Current Step Size: 1  # Use a unit-cube LRPS (not recommended in practice) unit_sampler <- ernest_sampler(   ll_fn,   prior,   n_points = 100,   sampler = unif_cube() ) unit_sampler #> Nested sampling specification <ernest_sampler> #> No. Points: 100 #>  #> ── Sampling Method  #> • ! An abstract LRPS sampler <ernest_lrps>"},{"path":"https://kylesnap.github.io/ernest/reference/example_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Nested Sampling Run with Ernest — example_run","title":"Example Nested Sampling Run with Ernest — example_run","text":"Load precomputed example nested sampling run generated using ernest package. demonstrates typical output nested sampling run simple 3-dimensional Gaussian likelihood, uniform prior dimension. dataset intended use documentation, tutorials, gainining experience ernest_run's S3 methods.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/example_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Nested Sampling Run with Ernest — example_run","text":"","code":"example_run"},{"path":"https://kylesnap.github.io/ernest/reference/example_run.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example Nested Sampling Run with Ernest — example_run","text":"object class ernest_run containing results nested sampling run.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/example_run.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example Nested Sampling Run with Ernest — example_run","text":"example problem comes crash course dynesty Python-based nested sampling software.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/example_run.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example Nested Sampling Run with Ernest — example_run","text":"likelihood used generate points \\(MVN(0, \\Sigma)\\), variance \\(\\Sigma\\) set 1 covariance set 0.95. prior parameter uniform interval [-10, 10\\]. run uses following non-default settings: log_lik: 3D multivariate Gaussian mean zero covariance matrix diag(0.95, 3). prior: Uniform dimension (x, y, z) range [-10, 10]. Seed: 42 View $spec element example_run see full R specification likelihood prior. [-10, 10]: R:-10,%2010%5C [-10, 10]: R:-10,%2010","code":""},{"path":"https://kylesnap.github.io/ernest/reference/generate.ernest_sampler.html","id":null,"dir":"Reference","previous_headings":"","what":"Run nested sampling to estimate Bayesian evidence — generate.ernest_sampler","title":"Run nested sampling to estimate Bayesian evidence — generate.ernest_sampler","text":"Executes nested sampling algorithm, iteratively replacing worst live point new sample likelihood-restricted prior stopping criterion met.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/generate.ernest_sampler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run nested sampling to estimate Bayesian evidence — generate.ernest_sampler","text":"","code":"# S3 method for class 'ernest_sampler' generate(   x,   ...,   max_iterations = NULL,   max_calls = NULL,   min_logz = 0.05,   show_progress = NULL )"},{"path":"https://kylesnap.github.io/ernest/reference/generate.ernest_sampler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run nested sampling to estimate Bayesian evidence — generate.ernest_sampler","text":"x object class ernest_sampler ernest_run. ... Arguments passed compile.ernest_run seed integer, NULL, NA. Controls random number generator: Integer NULL: Passed set.seed(). NULL, reinitializes generator seed yet set. NA: Makes changes current seed. compile() called object , NA ensures seed remains identical runs. clear Logical. TRUE, clears results previous runs compiling. FALSE, retains previous results validates live points. max_iterations Optional positive integer. maximum number iterations perform. NULL, criterion ignored. max_calls Optional positive integer. maximum number calls likelihood function. Inf, criterion ignored. min_logz Non-negative double. minimum log-ratio current estimated evidence remaining evidence. zero, criterion ignored. show_progress Logical. TRUE, displays progress spinner iteration counter sampling. NULL, parameter inferred based value rlib_message_verbosity option.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/generate.ernest_sampler.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run nested sampling to estimate Bayesian evidence — generate.ernest_sampler","text":"object class ernest_run, inheriting ernest_sampler, additional components: n_iter: Integer. Number iterations. n_calls: Integer. Total number likelihood function calls. log_lik: double(n_iter + n_points). Log-likelihoods sample. log_volume: double(n_iter + n_points). Estimated log-prior volumes iteration. log_weight: double(n_iter + n_points). Unnormalised log-weights sample. log_evidence: double(n_iter + n_points). Cumulative log-evidence estimates iteration. log_evidence_var: double(n_iter + n_points). Variance log-evidence estimate iteration. information: double(n_iter + n_points). KL divergence prior posterior, estimated iteration. samples: matrix(nrow = n_iter + n_points, ncol = n_dim). Parameter values sample. samples_unit: matrix(nrow = n_iter + n_points, ncol = n_dim). Parameter values sample unit hypercube representation. id: integer(n_iter + n_points). Unique integer identifiers sample live set (ranging 1 n_points). points: integer(n_iter + n_points). Number live points present iteration. calls: integer(n_iter + n_points). Number calls used generate new live point iteration. birth: integer(n_iter + n_points). Iteration sample first created (ranging 0 n_iter).","code":""},{"path":"https://kylesnap.github.io/ernest/reference/generate.ernest_sampler.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run nested sampling to estimate Bayesian evidence — generate.ernest_sampler","text":"least one max_iterations, max_calls, min_logz must specify valid stopping criterion. Setting min_logz zero leaving max_iterations max_calls defaults result error. x ernest_run object, stopping criteria checked current state run. error thrown stopping criteria already satisfied x. min_logz parameter controls relative tolerance remaining evidence unexplored parameter space. Sampling stops estimated remaining evidence sufficiently small compared accumulated evidence.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/generate.ernest_sampler.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Run nested sampling to estimate Bayesian evidence — generate.ernest_sampler","text":"Skilling, J. (2006). Nested Sampling General Bayesian Computation. Bayesian Analysis, 1(4), 833–859. https://doi.org/10.1214/06-BA127","code":""},{"path":"https://kylesnap.github.io/ernest/reference/generate.ernest_sampler.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run nested sampling to estimate Bayesian evidence — generate.ernest_sampler","text":"","code":"prior <- create_uniform_prior(n_dim = 2, lower = -1, upper = 1) #> New names: #> • `Uniform` -> `Uniform...1` #> • `Uniform` -> `Uniform...2` ll_fn <- function(x) -sum(x^2) sampler <- ernest_sampler(ll_fn, prior, n_point = 100) sampler #> Nested sampling specification <ernest_sampler> #> No. Points: 100 #>  #> ── Sampling Method  #> • Random Walk in Unit Cube LRPS <rwmh_cube/ernest_lrps> #> • No. Dimensions: 2 #> • No. Calls Since Update: 0 #> • No. Accepted Since Update: 0 #> • Current Step Size: 1  # Stop sampling after a set number of iterations or likelihood calls. generate(sampler, max_iterations = 100) #> ✔ Creating new live points. #> ⠙ Performing nested sampling (1 points replaced)... #> ✔ `max_iterations` reached (100). #> ✔ Performing nested sampling (100 points replaced)... [39ms] #>  #> Nested sampling run <ernest_run/ernest_sampler> #> No. Points: 100 #>  #> ── Sampling Method  #> • Random Walk in Unit Cube LRPS <rwmh_cube/ernest_lrps> #> • No. Dimensions: 2 #> • No. Calls Since Update: 0 #> • No. Accepted Since Update: 0 #> • Current Step Size: 1 #>  #> ── Results  #> No. Iterations: 100 #> No. Calls: 162 #> Log. Evidence: -0.5675 (± 0.1207)  # The final number of calls may exceed `max_calls`, as `generate` # only checks the number of calls when removing a live point. generate(sampler, max_calls = 2600) #> ✔ Creating new live points. #> ⠙ Performing nested sampling (1 points replaced)... #> ✔ `max_calls` surpassed (2602 > 2600). #> ✔ Performing nested sampling (222 points replaced)... [152ms] #>  #> Nested sampling run <ernest_run/ernest_sampler> #> No. Points: 100 #>  #> ── Sampling Method  #> • Random Walk in Unit Cube LRPS <rwmh_cube/ernest_lrps> #> • No. Dimensions: 2 #> • No. Calls Since Update: 0 #> • No. Accepted Since Update: 0 #> • Current Step Size: 0.2255 #>  #> ── Results  #> No. Iterations: 221 #> No. Calls: 2602 #> Log. Evidence: -0.5548 (± 0.0698)  # Use the default stopping criteria if (FALSE)  generate(sampler)  # \\dontrun{}"},{"path":"https://kylesnap.github.io/ernest/reference/new_ernest_lrps.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new likelihood-restricted prior sampler (LRPS) — new_ernest_lrps","title":"Create a new likelihood-restricted prior sampler (LRPS) — new_ernest_lrps","text":"Nested sampling relies generating series points prior space increasing log-likelihood values. accomplished using likelihood-restricted prior sampler (LRPS), generates independent identically distributed points prior, subject hard likelihood constraint. create LRPS, subclass new_ernest_lrps provide S3 methods propose() update_lrps() subclass.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/new_ernest_lrps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new likelihood-restricted prior sampler (LRPS) — new_ernest_lrps","text":"","code":"new_ernest_lrps(   unit_log_fn = NULL,   n_dim = NULL,   max_loop = getOption(\"ernest.max_loop\", 1000000L),   cache = NULL,   ...,   .class = NULL,   .call = caller_env() )"},{"path":"https://kylesnap.github.io/ernest/reference/new_ernest_lrps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new likelihood-restricted prior sampler (LRPS) — new_ernest_lrps","text":"unit_log_fn, n_dim Provided ernest_sampler() called given ernest_lrps: unit_log_fn (function, optional): Takes matrix points unit cube returns numeric vector log-likelihood values. n_dim (integer, optional): Number dimensions prior space. max_loop Positive integer. Maximum number attempts generate points via region-based sampling. Usually hidden users, can set via ernest.max_loop option. cache (environment, optional) Environment caching values. NULL, new environment created. ... <dynamic-dots> Name-value pairs additional elements subclasses LRPS. .class (character vector, optional) Subclasses LRPS. .call execution environment currently running function, e.g. caller_env(). function mentioned error messages source error. See call argument abort() information.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/new_ernest_lrps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a new likelihood-restricted prior sampler (LRPS) — new_ernest_lrps","text":"LRPS specification: list containing input arguments, class specific LRPS type.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/plot.ernest.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot diagnostics for a nested sampling run — plot.ernest_estimate","title":"Plot diagnostics for a nested sampling run — plot.ernest_estimate","text":"Shows normalised likelihood, importance weights, evidence functions log-volume.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/plot.ernest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot diagnostics for a nested sampling run — plot.ernest_estimate","text":"","code":"# S3 method for class 'ernest_estimate' plot(x, ...)  # S3 method for class 'ernest_run' plot(x, ..., ndraws = 0)"},{"path":"https://kylesnap.github.io/ernest/reference/plot.ernest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot diagnostics for a nested sampling run — plot.ernest_estimate","text":"x ernest_estimate ernest_run object. ... dots future extensions must empty. ndraws optional positive integer. number log-volume sequences simulate. equal zero, simulations made, one draw vector log-volumes produced estimates contained x. NULL, getOption(\"posterior.rvar_ndraws\") used (default 4000).","code":""},{"path":"https://kylesnap.github.io/ernest/reference/plot.ernest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot diagnostics for a nested sampling run — plot.ernest_estimate","text":"Invisibly returns x. ggplot2::ggplot() object printed side effect. plot faceted three panels. horizontal axis shows log-volume: x ernest_run, estimates derived run; x ernest_estimate (ndraws != 0), values simulated. three y axes : Evidence: Estimate error ribbon drawn either estimated standard error (ernest_run) median credible interval (MCI) (ernest_estimate); Normalised Likelihood: likelihood value criteria used draw new points likelihood-restricted prior sampler, normalised maximum likelihood generated run; Posterior Weight: density posterior weights attributed regions volume within prior. ernest_estimate objects, error ribbon drawn MCI estimate.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/plot.ernest.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Plot diagnostics for a nested sampling run — plot.ernest_estimate","text":"ernest_estimate, ndraws large enough plot ","code":""},{"path":[]},{"path":"https://kylesnap.github.io/ernest/reference/plot.ernest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot diagnostics for a nested sampling run — plot.ernest_estimate","text":"","code":"# Plot integration results from a run. data(example_run) plot(example_run)   # Simulate results before plotting. plot(example_run, ndraws = 50) #> Warning: `ndraws` should be above 100 to accurately plot credible intervals.  # Simulate results from a run, then plot simulated results. sim <- calculate(example_run, ndraws = 50) plot(sim) #> Warning: `ndraws` should be above 100 to accurately plot credible intervals."},{"path":"https://kylesnap.github.io/ernest/reference/propose.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a new point using LRPS — propose","title":"Generate a new point using LRPS — propose","text":"Developer-facing function, used creating ernest_lrps subclass. specifying subclass, must implement method define sampler generates new points satisfy likelihood constraint.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/propose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a new point using LRPS — propose","text":"","code":"propose(x, original = NULL, criteria = NULL, ...)  # S3 method for class 'rwmh_cube' propose(x, original = NULL, criteria = NULL, ...)  # S3 method for class 'unif_cube' propose(x, original = NULL, criteria = NULL, ...)"},{"path":"https://kylesnap.github.io/ernest/reference/propose.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a new point using LRPS — propose","text":"x ernest_lrps object. original (double vector matrix, optional) Points prior space used start proposal process. NULL, new point generated sampling unconstrained unit cube (see unif_cube()). criteria (double vector) Log-likelihood values proposed points must satisfy. ... Additional arguments passed subclass methods.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/propose.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a new point using LRPS — propose","text":"list : unit: Matrix proposed points prior space. log_lik: Numeric vector log-likelihood values proposed points. n_call: Number calls made unit_log_fn proposal.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. generics calculate, compile, generate, visualize posterior as_draws, as_draws_matrix, as_draws_rvars","code":""},{"path":"https://kylesnap.github.io/ernest/reference/rwmh_cube.html","id":null,"dir":"Reference","previous_headings":"","what":"Random walk over the unconstrained prior distribution — rwmh_cube","title":"Random walk over the unconstrained prior distribution — rwmh_cube","text":"Generate new live points evolving current live point random walk fixed number steps adaptive step size.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/rwmh_cube.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random walk over the unconstrained prior distribution — rwmh_cube","text":"","code":"rwmh_cube(steps = 25, target_acceptance = 0.5)"},{"path":"https://kylesnap.github.io/ernest/reference/rwmh_cube.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random walk over the unconstrained prior distribution — rwmh_cube","text":"steps Positive integer. Number steps take generating proposal point. target_acceptance Double 1 / steps 1.0. target acceptance rate proposed points.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/rwmh_cube.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random walk over the unconstrained prior distribution — rwmh_cube","text":"list class c(\"rwmh_cube\", \"ernest_lrps\"). Can used ernest_sampler() specify sampling behaviour nested sampling run.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/rwmh_cube.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Random walk over the unconstrained prior distribution — rwmh_cube","text":"Calling update_lrps() builds new proposal distribution based acceptance rate previous run. step size \\(\\epsilon\\) updated using Newton-like method, current acceptance rate \\(a_{cur}\\) used target acceptance rate \\(^*\\): $$\\epsilon_{new} = \\epsilon_{old} * \\exp((a_{cur} - ^*)/(n_{dim} * ^*))$$","code":""},{"path":"https://kylesnap.github.io/ernest/reference/rwmh_cube.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Random walk over the unconstrained prior distribution — rwmh_cube","text":"Skilling, J. (2006). Nested Sampling General Bayesian Computation. Bayesian Analysis, 1(4), 833–859. https://doi.org/10.1214/06-BA127 Speagle, J. S. (2020). Dynesty: Dynamic Nested Sampling Package Estimating Bayesian Posteriors Evidences. Monthly Notices Royal Astronomical Society, 493, 3132–3158. https://doi.org/10.1093/mnras/staa278","code":""},{"path":"https://kylesnap.github.io/ernest/reference/rwmh_cube.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random walk over the unconstrained prior distribution — rwmh_cube","text":"","code":"data(example_run) lrps <- rwmh_cube()  ernest_sampler(example_run$log_lik_fn, example_run$prior, sampler = lrps) #> Nested sampling specification <ernest_sampler> #> No. Points: 500 #>  #> ── Sampling Method  #> • Random Walk in Unit Cube LRPS <rwmh_cube/ernest_lrps> #> • No. Dimensions: 3 #> • No. Calls Since Update: 0 #> • No. Accepted Since Update: 0 #> • Current Step Size: 1  # Change the default behaviour of the sampler: rwmh_cube(steps = 20, target_acceptance = 0.4) #> Random Walk in Unit Cube LRPS <rwmh_cube/ernest_lrps> #> No. Dimensions: Uninitialized #> No. Calls Since Update: 0 #> No. Accepted Since Update: 0 #> Current Step Size: 1"},{"path":"https://kylesnap.github.io/ernest/reference/summary.ernest_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize a nested sampling run — summary.ernest_run","title":"Summarize a nested sampling run — summary.ernest_run","text":"Provides summary ernest_run object, including key statistics tibble results iteration.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/summary.ernest_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize a nested sampling run — summary.ernest_run","text":"","code":"# S3 method for class 'ernest_run' summary(object, ...)"},{"path":"https://kylesnap.github.io/ernest/reference/summary.ernest_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize a nested sampling run — summary.ernest_run","text":"object ernest_run object. ... dots future extensions must empty.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/summary.ernest_run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize a nested sampling run — summary.ernest_run","text":"list class summary.ernest_run following components: n_iter: Integer. Number iterations performed. n_points: Integer. Number live points used run. n_calls: Integer. Total number likelihood function calls. log_volume: Double. Final estimated log-prior volume. log_evidence: Double. Final log-evidence estimate. log_evidence_err: Double. Standard deviation log-evidence estimate. draws: Posterior draws returned as_draws(). run tibble::tibble. run stores state run iteration columns: call: Cumulative number likelihood calls. log_lik: Log-likelihood sample. log_volume: Estimated log-prior volume. log_weight: Unnormalized log-weights (relative evidence). log_evidence: Cumulative log-evidence. log_evidence_err: Standard deviation log-evidence. information: Estimated KL divergence iteration.","code":""},{"path":[]},{"path":"https://kylesnap.github.io/ernest/reference/summary.ernest_run.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize a nested sampling run — summary.ernest_run","text":"","code":"# Load an example run data(example_run)  # Summarize the run and view a tibble of its results. run_sm <- summary(example_run) run_sm #>  #> ── Nested sampling results <ernest_run> ──────────────────────────────────────── #> No. Points: 500 #> No. Iterations: 4636 #> No. Lik. Calls: 101303 #> Log. Evidence: -8.932 (± 0.1143) run_sm$run #> # A tibble: 5,136 × 7 #>     call log_lik log_volume log_weight log_evidence log_evidence_err information #>    <int>   <dbl>      <dbl>      <dbl>        <dbl>            <dbl>       <dbl> #>  1     1   -146.     -0.002      -143.        -152.         2.71e-32   -3.68e-61 #>  2     2   -144.     -0.004      -141.        -150.         8.06e-32   -3.25e-60 #>  3     3   -139.     -0.006      -136.        -145.         1.03e-30   -5.32e-58 #>  4     4   -136.     -0.008      -133.        -142.         5.11e-30   -1.30e-56 #>  5     5   -129.     -0.01       -126.        -135.         1.44e-28   -1.04e-53 #>  6     6   -126.     -0.012      -124.        -133.         5.09e-28   -1.30e-52 #>  7     7   -125.     -0.014      -122.        -131.         1.19e-27   -7.03e-52 #>  8     8   -125.     -0.016      -122.        -130.         1.90e-27   -1.81e-51 #>  9     9   -118.     -0.018      -116.        -124.         2.59e-26   -3.35e-49 #> 10    10   -118.     -0.02       -115.        -124.         4.94e-26   -1.22e-48 #> # ℹ 5,126 more rows"},{"path":"https://kylesnap.github.io/ernest/reference/unif_cube.html","id":null,"dir":"Reference","previous_headings":"","what":"Uniformly sample from the unconstrained prior distribution — unif_cube","title":"Uniformly sample from the unconstrained prior distribution — unif_cube","text":"Generate new live points performing rejection sampling across entire prior distribution. highly inefficient LRPS, may useful testing behaviour nested sampling specification.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/unif_cube.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uniformly sample from the unconstrained prior distribution — unif_cube","text":"","code":"unif_cube()"},{"path":"https://kylesnap.github.io/ernest/reference/unif_cube.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uniformly sample from the unconstrained prior distribution — unif_cube","text":"list class c(\"unif_cube\", \"ernest_lrps\"). Can used ernest_sampler() specify sampling behaviour nested sampling run.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/unif_cube.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Uniformly sample from the unconstrained prior distribution — unif_cube","text":"Speagle, J. S. (2020). Dynesty: Dynamic Nested Sampling Package Estimating Bayesian Posteriors Evidences. Monthly Notices Royal Astronomical Society, 493, 3132–3158. https://doi.org/10.1093/mnras/staa278","code":""},{"path":"https://kylesnap.github.io/ernest/reference/unif_cube.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Uniformly sample from the unconstrained prior distribution — unif_cube","text":"","code":"data(example_run) lrps <- unif_cube()  ernest_sampler(example_run$log_lik_fn, example_run$prior, sampler = lrps) #> Nested sampling specification <ernest_sampler> #> No. Points: 500 #>  #> ── Sampling Method  #> • ! An abstract LRPS sampler <ernest_lrps>"},{"path":"https://kylesnap.github.io/ernest/reference/update_lrps.html","id":null,"dir":"Reference","previous_headings":"","what":"Update an LRPS — update_lrps","title":"Update an LRPS — update_lrps","text":"nested sampling run, may wish update internal parameters LRPS based sampler performance criteria. frequency updates set first_update update_interval arguments ernest_sampler(). creating ernest_lrps subclass, implement method specify special update behaviour. default method reconstructs LRPS current parameters resets likelihood call counter cache.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/update_lrps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update an LRPS — update_lrps","text":"","code":"update_lrps(x)  # S3 method for class 'rwmh_cube' update_lrps(x)"},{"path":"https://kylesnap.github.io/ernest/reference/update_lrps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update an LRPS — update_lrps","text":"x ernest_lrps object.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/update_lrps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update an LRPS — update_lrps","text":"updated ernest_lrps object class x, possibly updated parameters.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/visualize.ernest_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the posterior distribution of an ernest_run — visualize.ernest_run","title":"Plot the posterior distribution of an ernest_run — visualize.ernest_run","text":"Create plot posterior distributions nested sampling run, trace evolution discarded live points along log prior volume.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/visualize.ernest_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the posterior distribution of an ernest_run — visualize.ernest_run","text":"","code":"# S3 method for class 'ernest_run' visualize(x, ..., type = c(\"density\", \"trace\"), vars = NULL, plot = TRUE)"},{"path":"https://kylesnap.github.io/ernest/reference/visualize.ernest_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the posterior distribution of an ernest_run — visualize.ernest_run","text":"x ernest_run object. ... Arguments passed as_draws.ernest_run units Case-sensitive string. scale sampled points: \"original\": Points scale prior space. \"unit_cube\": Points (0, 1) unit hypercube scale. radial Logical. TRUE, returns additional column .radial containing radial coordinate (.e., Euclidean norm) sampled point. type Case-sensitive string. type plot create: \"density\": Shows posterior density parameter. \"trace\": Shows distribution points along estimates log prior volume. vars <tidy-select> Variables plot run. NULL, variables plotted. plot Logical. TRUE, returns ggplot visualisation; FALSE, returns tibble data used create plot.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/visualize.ernest_run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the posterior distribution of an ernest_run — visualize.ernest_run","text":"ggplot object plot = TRUE, otherwise tibble.","code":""},{"path":[]},{"path":"https://kylesnap.github.io/ernest/reference/visualize.ernest_run.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the posterior distribution of an ernest_run — visualize.ernest_run","text":"","code":"# Load example run library(ggdist) data(example_run)  # Plot posterior distributions of the parameters visualize(example_run, type = \"density\")   # Plot the trace of the radial coordinate in unit scale visualize(   example_run,   type = \"trace\",   vars = \".radial\",   units = \"unit_cube\",   radial = TRUE )"}]
