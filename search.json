[{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://kylesnap.github.io/ernest/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://kylesnap.github.io/ernest/articles/nested-sampling-with-ernest.html","id":"getting-started","dir":"Articles","previous_headings":"","what":"Getting Started","title":"Nested Sampling with Ernest","text":"addition specifying dimensionality problem (.e., many parameters model interest, n_dim), ernest requires user provide two functions describe model’s log-likelihood prior space transformation.","code":""},{"path":"https://kylesnap.github.io/ernest/articles/nested-sampling-with-ernest.html","id":"log-likelihood-function-log_lik","dir":"Articles","previous_headings":"Getting Started","what":"Log-Likelihood Function: log_lik","title":"Nested Sampling with Ernest","text":"function must take vector parameters equal length n_dim. input, function return scalar-valued log-likelihood model. cases value finite, function return -Inf.","code":""},{"path":"https://kylesnap.github.io/ernest/articles/nested-sampling-with-ernest.html","id":"example-a-two-dimensional-multivariate-gaussian-distribution","dir":"Articles","previous_headings":"Getting Started > Log-Likelihood Function: log_lik","what":"Example: A Two-Dimensional Multivariate Gaussian Distribution","title":"Nested Sampling with Ernest","text":"## Prior Space Transformation: prior_transform Like implementations nested sampling, ernest generates possible parameter vectors performing likelihood-restricted prior sampling within (0-1)-unit hypercube. prior_transform function responsible taking vectors transforming original parameter space specified given prior distribution. function must take vector parameters equal length n_dim whose components guaranteed range [0,1][0, 1]. input, function must return n_dim-length vector parameters original parameter space. component vector finite value.","code":"num_dim <- 2 sigma <- diag(num_dim) sigma[sigma == 0] <- 0.95  log_lik <- \\(x) {   mvtnorm::dmvnorm(x, mean = c(-1, 1), sigma = sigma, log = TRUE) }  tibble(   expand.grid(     \"x\" = seq(-10, 10, length.out = 500),      \"y\" = seq(-10, 10, length.out = 500)   ),   \"ll\" = log_lik(cbind(x, y)) ) |>   ggplot(aes(x, y, fill = ll)) +   geom_raster() +   scale_fill_viridis_c(expression(italic(LL)(theta)))"},{"path":"https://kylesnap.github.io/ernest/articles/nested-sampling-with-ernest.html","id":"example-a-uniform-prior-in-2d-space","dir":"Articles","previous_headings":"Getting Started > Log-Likelihood Function: log_lik","what":"Example: A Uniform Prior in 2D-Space","title":"Nested Sampling with Ernest","text":"","code":"prior_t <- \\(u) qunif(u, min = -10, max = 10)"},{"path":"https://kylesnap.github.io/ernest/articles/nested-sampling-with-ernest.html","id":"example-a-uniform-prior-in-2d-space-heterogenous-scales","dir":"Articles","previous_headings":"Getting Started > Log-Likelihood Function: log_lik","what":"Example: A Uniform Prior in 2D-Space (Heterogenous Scales)","title":"Nested Sampling with Ernest","text":"","code":"prior_t2 <- function(u) {   c(qunif(u[1], min = -10, max = 10), qunif(u[2], min = -5, max = 5)) }"},{"path":"https://kylesnap.github.io/ernest/articles/nested-sampling-with-ernest.html","id":"choosing-a-likelihood-restricted-prior-sampler","dir":"Articles","previous_headings":"Getting Started","what":"Choosing a Likelihood-Restricted Prior Sampler","title":"Nested Sampling with Ernest","text":"Nested samplers require method generating proposed parameter vectors taking independent samples prior distribution, conditional minimum likelihood constraint. Currently, ernest offers two samplers can chosen using sampler argument nested_sampling(), sophisticated options scheduled development.","code":""},{"path":"https://kylesnap.github.io/ernest/articles/nested-sampling-with-ernest.html","id":"uniform-sampling-uniform_cube","dir":"Articles","previous_headings":"Getting Started > Choosing a Likelihood-Restricted Prior Sampler","what":"Uniform Sampling: uniform_cube()","title":"Nested Sampling with Ernest","text":"uniform_cube() basic implementation region-based sampler, points proposed sampling uniformly within unit hypercube point exceeds likelihood constraint. method helpful verifying correctness nested sampling run performing limited iterations, inefficiency renders largely unhelpful practical use. Calling unif_cube() also provides user opportunity set ernest.max_loop option environment. intend serve safety check, killing run sampler exceeds reasonable number iterations attempting proposal point likelihood contraint. , generally set high number, 1e6L default.","code":""},{"path":"https://kylesnap.github.io/ernest/articles/nested-sampling-with-ernest.html","id":"random-walk-in-the-unit-hypercube-rwmh_cube","dir":"Articles","previous_headings":"Getting Started > Choosing a Likelihood-Restricted Prior Sampler","what":"Random Walk in the Unit Hypercube: rwmh_cube()","title":"Nested Sampling with Ernest","text":"rwmh_cube basic implementation MCMC-based sampler, points generated performing random walk within unit hypercube, accepting proposed points exceed likelihood constraint. method closely resembles original proposed LRPS detailed Skilling, reasonably effective low- middle-dimensional problems (.e., 1--20). user can set number steps, initial step size, target acceptance ratio sampler. Unlike Skilling’s original LRPS, ernest applies Newton-Raphson optimization adjust step size throughout run target desired acceptance ratio. number calls likelihood function update can set update_interval argument nested_sampling().","code":""},{"path":"https://kylesnap.github.io/ernest/articles/nested-sampling-with-ernest.html","id":"running-nested-sampling-with-ernest","dir":"Articles","previous_headings":"","what":"Running Nested Sampling with Ernest","title":"Nested Sampling with Ernest","text":"Using 2D-Gaussian likelihood example provided earlier, along uniform gaussian prior, can perform nested sampling run rwmh_cube() sampler. First, nested_sampling() takes user provided functions, ptype defining number variables vector character names (one want prettier output), user-set parameters. Importantly, user can set verbose parameter TRUE receive updates progress run. produces R6 object class ernest_sampler. object responsible dispatching across various functions ernest provides generating reviewing results nested sampling run. begin nested sampling, generate() method called sampler. accepts number parameters indicate point stop nested sampling. example, one can run sampling 1000 iterations performed. improve evidence estimate model, user can continue run calling generate() previously-generated ErnestSampler. setting dlogz option, nested sampling stopped log-ratio current estimated evidence remaining evidence falls criterion.","code":"sampler <- nested_sampling(   log_lik,   prior_transform = prior_t,   ptype = 2L,   n_points = 500L,   sampler = rwmh_cube() ) sampler #>  #> ── Nested Sampling Run from ernest ───────────────────────────────────────────── #> No. Live Points: 500 #> No. Iterations: 0 #> ℹ No samples generated yet. run1 <- generate(sampler, max_iterations = 1000) run1 #>  #> ── Nested Sampling Run from ernest ───────────────────────────────────────────── #> No. Live Points: 500 #> No. Iterations: 1000 #> No. Calls: 25000 #> Log Evidence: -6.27666779736913 run2 <- generate(sampler, min_logz = 0.05) run2 #>  #> ── Nested Sampling Run from ernest ───────────────────────────────────────────── #> No. Live Points: 500 #> No. Iterations: 4237 #> No. Calls: 105925 #> Log Evidence: -6.11857418045797"},{"path":"https://kylesnap.github.io/ernest/articles/nested-sampling-with-ernest.html","id":"results","dir":"Articles","previous_headings":"","what":"Results","title":"Nested Sampling with Ernest","text":"nested sampling run’s results can viewed calling different arguments ErnestSampler object. example, calling calculate() run2, one receives tibble containing results iterative evidence estimates. change evidence estimate course run can visualized calling plot() ErnestSampler object. can also produce trace plots distributions points across run calling visualize(= \"trace\") ErnestSampler object.","code":"integral <- calculate(run2) tail(integral) #> # A tibble: 6 × 7 #>   .iter log_lik log_vol log_weight log_z log_z_var information #>   <int>   <dbl>   <dbl>      <dbl> <dbl>     <dbl>       <dbl> #> 1  4732  -0.674   -12.9      -15.4 -6.12    0.0108        4.50 #> 2  4733  -0.674   -13.1      -15.4 -6.12    0.0109        4.50 #> 3  4734  -0.674   -13.3      -15.4 -6.12    0.0110        4.50 #> 4  4735  -0.674   -13.6      -15.4 -6.12    0.0112        4.50 #> 5  4736  -0.674   -14.0      -15.4 -6.12    0.0114        4.50 #> 6  4737  -0.674   -14.7      -15.4 -6.12    0.0117        4.50 plot(run2) draws <- posterior::as_draws_df(run2, unit = TRUE)  ggplot(draws, aes(x = `.draw`, y = `X...1`, colour = exp(`.log_weight`))) +   geom_point() +   scale_colour_viridis_c(\"Post. Weight\") ggplot(draws, aes(x = `.draw`, y = `X...2`, colour = exp(`.log_weight`))) +   geom_point() +   scale_colour_viridis_c(\"Post. Weight\")"},{"path":"https://kylesnap.github.io/ernest/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kyle Dewsnap. Author, maintainer.","code":""},{"path":"https://kylesnap.github.io/ernest/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Dewsnap K (2025). ernest: Nested Sampling Toolkit. R package version 0.0.0.9000, https://kylesnap.github.io/ernest/.","code":"@Manual{,   title = {ernest: The Nested Sampling Toolkit},   author = {Kyle Dewsnap},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://kylesnap.github.io/ernest/}, }"},{"path":"https://kylesnap.github.io/ernest/index.html","id":"ernest-nested-sampling-in-r","dir":"","previous_headings":"","what":"The Nested Sampling Toolkit","title":"The Nested Sampling Toolkit","text":"ernest provides toolkit performing nested sampling algorithm estimate marginal likelihood (.e., evidence) posterior distributions statistical models. end, ernest aims accomplish two different goals: ’re unfamiliar nested sampling, ernest documentation allow learn nested sampling works might incorporate within analyses. ’re already familiar nested sampling, ernest provides powerful reliable implementation algorithm different likelihood-restricted prior samplers, allowing complete analyse runs existing tools offered ggplot posterior.","code":""},{"path":"https://kylesnap.github.io/ernest/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"The Nested Sampling Toolkit","text":"can install development version ernest GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"kylesnap/ernest\")"},{"path":"https://kylesnap.github.io/ernest/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"The Nested Sampling Toolkit","text":"perform nested sampling, R requires two R functions: (1) log-likelihood function, describing likelihood point within prior space, prior transformation function, can use points (0-1)-unit cube represent points prior space. simple example, can use 3D, highly correlated normal distribution, uniform prior range -5 5. functions, call [nested_sampling()] build ernest_sampler object. object contains several S3 methods, including: generate(): Perform nested sampling algorithm given criteria met. calculate(): Prepare table iterative model evidence estimates, along point-wise log-likelihoods posterior importance weights. can also use plot() method visualize iterative estimations performed run, use posterior package resample summarize posterior distribution.","code":"library(ernest) n_dim <- 3 sigma <- diag(n_dim) # Covariance matrix sigma[sigma == 0] <- 0.4  inv_sigma <- solve(sigma) # Precision matrix det_sigma <- det(sigma) # The determinant of the covariance matrix l_norm <- -0.5 * (log(2 * pi) * n_dim + log(det_sigma))  # Log-likelihood of the multivariate normal distribution log_lik <- function(x) {   -0.5 * drop(crossprod(x, crossprod(inv_sigma, x))) + l_norm }  # Prior transformation function: (0, 1) -> (-5, 5) prior_transform <- function(u) {   5. * (2. * u - 1.) } sampler <- nested_sampling(   log_lik,   prior_transform,   ptype = n_dim,   verbose = TRUE )  run <- generate(sampler, min_logz = 0.01) run #>  #> ── Nested Sampling Run from ernest ───────────────────────────────────────────── #> No. Live Points: 500 #> No. Iterations: 4451 #> No. Calls: 111275 #> Log Evidence: -6.83435374840042 calculate(run) #> # A tibble: 4,951 × 7 #>    .iter log_lik  log_vol log_weight log_z log_z_var information #>    <int>   <dbl>    <dbl>      <dbl> <dbl>     <dbl>       <dbl> #>  1     1   -52.9 -0.00200      -59.8 -59.8  9.23e-25   -4.62e-22 #>  2     2   -51.2 -0.00400      -58.0 -57.8  6.45e-24   -3.23e-21 #>  3     3   -47.6 -0.00599      -54.5 -54.4  1.76e-22   -8.82e-20 #>  4     4   -47.3 -0.00799      -53.7 -53.3  5.45e-22   -2.73e-19 #>  5     5   -46.9 -0.00999      -53.3 -52.6  1.06e-21   -5.28e-19 #>  6     6   -45.7 -0.0120       -52.4 -51.8  2.35e-21   -1.18e-18 #>  7     7   -44.7 -0.0140       -51.3 -50.8  6.01e-21   -3.01e-18 #>  8     8   -44.1 -0.0160       -50.6 -50.0  1.35e-20   -6.77e-18 #>  9     9   -43.6 -0.0180       -50.1 -49.3  2.60e-20   -1.30e-17 #> 10    10   -41.7 -0.0200       -48.5 -48.2  8.13e-20   -4.07e-17 #> # ℹ 4,941 more rows plot(run) posterior::as_draws(run) |>   posterior::resample_draws() |>    posterior::summarize_draws() #> # A tibble: 3 × 10 #>   variable      mean  median    sd   mad    q5   q95  rhat ess_bulk ess_tail #>   <chr>        <dbl>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>    <dbl>    <dbl> #> 1 X...1    -0.0479   -0.0501 1.04  1.06  -1.76  1.67  1.18    1315.     13.0 #> 2 X...2    -0.00846  -0.0304 1.00  0.975 -1.65  1.59  1.19    1016.     13.8 #> 3 X...3    -0.000163  0.0197 0.992 0.992 -1.63  1.65  1.17    1300.     14.2"},{"path":"https://kylesnap.github.io/ernest/index.html","id":"status","dir":"","previous_headings":"","what":"Status","title":"The Nested Sampling Toolkit","text":"ernest still quite experimental, additional features intended added future. hope avoid , mean certain components ernest may subject breaking changes. encounter issues suggestions, please feel free open issue.","code":""},{"path":"https://kylesnap.github.io/ernest/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"The Nested Sampling Toolkit","text":"nested sampling algorithm first developed introduced J. Skilling across two major papers: Skilling, J. (2004). Nested sampling. R. Fischer R. Preuss U. V. Toussaint (Eds.), Bayesian Inference Maximum Entropy Methods Science Engineering (pp. 395-405). AIP. 10.1063/1.1835238 Skilling, J. (2006). Nested sampling general Bayesian computation. Bayesian Analysis, 1(4), 833-859. 10.1214/06-BA127 ernest’s design takes much inspiration well-documented dynesty package: Speagle, J. S. (2020). DYNESTY: dynamic nested sampling package estimating Bayesian posteriors evidences. Monthly Notices Royal Astronomical Society, 493(3), 3132-3158. 10.1093/mnras/staa278 Koposov, S., Speagle, J. S., Barbary, K., Ashton, G., Bennett, E., Buchner, J., Scheffler, C., Cook, B., Talbot, C., Guillochon, J., Cubillos, P., Ramos, . ., Dartiailh, M., Ilya., Tollerud, E., Lang, D., Johnson, B., jtmendel, Higson, E., … Goldstein, D. (2021). dynesty (Version 1.1.1.) [Python package]. 10.5281/zenodo.4543937 addition, nestle python package article J. Buchner provide consistent clear terminology describe organize components nested sampling algorithm: Buchner, J. (2023). Nested sampling methods. Statistics Surveys, 17, 169-215. 10.1214/23-SS144","code":""},{"path":"https://kylesnap.github.io/ernest/reference/as_draws-ernest.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform ernest_sampler to posterior::draws objects — as_draws.ernest_sampler","title":"Transform ernest_sampler to posterior::draws objects — as_draws.ernest_sampler","text":"Transform ernest_sampler object format supported posterior package.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/as_draws-ernest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform ernest_sampler to posterior::draws objects — as_draws.ernest_sampler","text":"","code":"# S3 method for class 'ernest_sampler' as_draws(x, scale = c(\"original\", \"unit\"), inc_live = TRUE, ...)  # S3 method for class 'ernest_sampler' as_draws_list(x, scale = c(\"original\", \"unit\"), inc_live = TRUE, ...)  # S3 method for class 'ernest_sampler' as_draws_matrix(x, scale = c(\"original\", \"unit\"), inc_live = TRUE, ...)"},{"path":"https://kylesnap.github.io/ernest/reference/as_draws-ernest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform ernest_sampler to posterior::draws objects — as_draws.ernest_sampler","text":"x ernest_sampler object, another R object methods defined. scale One original unit. unit, returned draws object contain points expressed unit hypercube, originally used ernest generated sampling. original (default), returned draws object contain points original parameter space defined prior transformation. inc_live live points included? Defaults TRUE. ... Arguments passed individual methods (applicable).","code":""},{"path":"https://kylesnap.github.io/ernest/reference/calculate.ernest_sampler.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate the Log-Evidence of a Model — calculate.ernest_sampler","title":"Estimate the Log-Evidence of a Model — calculate.ernest_sampler","text":"Calculate marginal likelihood given model return estimates tidy tibble().","code":""},{"path":"https://kylesnap.github.io/ernest/reference/calculate.ernest_sampler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate the Log-Evidence of a Model — calculate.ernest_sampler","text":"","code":"# S3 method for class 'ernest_sampler' calculate(   x,   add_points = c(\"none\", \"unit\", \"parameter\", \"both\"),   add_progress = FALSE,   ... )"},{"path":"https://kylesnap.github.io/ernest/reference/calculate.ernest_sampler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate the Log-Evidence of a Model — calculate.ernest_sampler","text":"x object class ernest_sampler. add_points string, either \"none\", \"unit\", \"parameter\", \"\". \"none\", additional columns added. \"unit\"\"parameter\", parameter values associated point added, respective units. \"\", unit parameter values added. add_progress Adds columns number calls likelihood function iteration. ... Must empty.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/calculate.ernest_sampler.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate the Log-Evidence of a Model — calculate.ernest_sampler","text":"NULL, x contain iterations. Otherwise, tibble least columns: .iter: iteration number. log_lik, log_vol: log likelihood estimated prior volume associated point extracted live set. log_lik log_vol well-specified (see details), additional columns added: log_z: log-evidence estimate. log_z_var: variance log-evidence estimate. log_weight: posterior log-weight point. h: Information, reported Kullback–Leibler divergence. add_points \"none\", columns added names given 'ptypes' argument sampler. Points unit scale names prefixed unit_. Finally, add_efficiency TRUE, columns .calls, .id, .sampler added, reporting number likelihood calls iterations, index point within live set upon removal, number updates ernest_lrps object, respectively.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/calculate.ernest_sampler.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate the Log-Evidence of a Model — calculate.ernest_sampler","text":"Nested sampling must generate series increasing likelihood values series strictly decreasing contour volume estimates. neither hold, ernest warn user return stripped tibble evidence estimates log weights. case, user check behaviour sampler used generate points, report issue package authors.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/compile.ernest_sampler.html","id":null,"dir":"Reference","previous_headings":"","what":"Compile an ernest_sampler object. — compile.ernest_sampler","title":"Compile an ernest_sampler object. — compile.ernest_sampler","text":"Prepare ernest_sampler generating nested samples validating set live points within object, creating live points none exist yet.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/compile.ernest_sampler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compile an ernest_sampler object. — compile.ernest_sampler","text":"","code":"# S3 method for class 'ernest_sampler' compile(object, refresh = FALSE, ...)"},{"path":"https://kylesnap.github.io/ernest/reference/compile.ernest_sampler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compile an ernest_sampler object. — compile.ernest_sampler","text":"object ernest_sampler object. refresh Whether clear existing points object generating new ones. TRUE, function clear live points dead points gathered previous runs. ... Ignored.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/compile.ernest_sampler.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compile an ernest_sampler object. — compile.ernest_sampler","text":"object, invisibly.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/compile.ernest_sampler.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compile an ernest_sampler object. — compile.ernest_sampler","text":"Usually, user need call method directly, called automatically generate(). compile() kept distinct step generate() users can understand troubleshoot errors log-likelihood prior transformation functions run begins. also catches errors generated run: indicative problem ernest , errors labelled appropriately.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/ernest-package.html","id":null,"dir":"Reference","previous_headings":"","what":"ernest: The Nested Sampling Toolkit — ernest-package","title":"ernest: The Nested Sampling Toolkit — ernest-package","text":"complete implementation nested sampling algorithm R, allowing users estimate evidence posterior statistical model.","code":""},{"path":[]},{"path":"https://kylesnap.github.io/ernest/reference/ernest-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ernest: The Nested Sampling Toolkit — ernest-package","text":"Maintainer: Kyle Dewsnap kyle.dewsnap@ubc.ca (ORCID)","code":""},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampler.html","id":null,"dir":"Reference","previous_headings":"","what":"Ernest Nested Sampler — ernest_sampler","title":"Ernest Nested Sampler — ernest_sampler","text":"R6 class contains nested sampling run. object normally created calling nested_sampling(), interacted calling S3 methods like generate(), calculate(), glance().","code":""},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampler.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ernest Nested Sampler — ernest_sampler","text":"ernest_sampler object. object, invisibly. tibble columns reporting results run.","code":""},{"path":[]},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampler.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Ernest Nested Sampler — ernest_sampler","text":"verbose progress bar displayed sampling?","code":""},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampler.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Ernest Nested Sampler — ernest_sampler","text":"n_iterations total number sampling iterations. n_calls total calls made likelihood function, 0L calls made yet. variables names variable prior space. live_points Access live points list. dead_points Access dead points list.","code":""},{"path":[]},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampler.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Ernest Nested Sampler — ernest_sampler","text":"ernest_sampler$new() ernest_sampler$compile() ernest_sampler$generate() ernest_sampler$calculate() ernest_sampler$glance() ernest_sampler$format() ernest_sampler$print() ernest_sampler$clone()","code":""},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampler.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Ernest Nested Sampler — ernest_sampler","text":"Creates new ernest_sampler.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampler.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ernest Nested Sampler — ernest_sampler","text":"","code":"ernest_sampler$new(   lrps,   ptype,   n_points = 500L,   verbose = getOption(\"verbose\") )"},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ernest Nested Sampler — ernest_sampler","text":"lrps ernest_lrps object describing model prior space. ptype parameters involved nested sampling. Possible values : single integer, describing dimensions prior space. character vector, naming dimension prior space. zero-row tibble::tibble(), column names dimension prior space. n_points number live points use nested sampling. Higher values allow accurate estimates evidence integral cost increased computational time. verbose Whether display progress bar run.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampler.html","id":"method-compile-","dir":"Reference","previous_headings":"","what":"Method compile()","title":"Ernest Nested Sampler — ernest_sampler","text":"Prepare ernest_sampler generating nested samples validating set live points within object, creating live points none exist yet.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampler.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Ernest Nested Sampler — ernest_sampler","text":"","code":"ernest_sampler$compile(refresh = FALSE)"},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampler.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ernest Nested Sampler — ernest_sampler","text":"refresh Whether clear existing points object generating new ones. TRUE, function clear live points dead points gathered previous runs.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampler.html","id":"method-generate-","dir":"Reference","previous_headings":"","what":"Method generate()","title":"Ernest Nested Sampler — ernest_sampler","text":"Generate samples nested sampling given criterion met.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampler.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Ernest Nested Sampler — ernest_sampler","text":"","code":"ernest_sampler$generate(   max_iterations = Inf,   max_calls = Inf,   min_logz = 0.05,   refresh = FALSE )"},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampler.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ernest Nested Sampler — ernest_sampler","text":"max_iterations maximum number iterations perform. set Inf, stopping criterion ignored. max_calls maximum number calls likelihood function. set Inf, stopping criterion ignored. min_logz minimum log-evidence value achieve. Must number strictly larger zero. refresh Whether clear existing points sampler, starting run scratch.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampler.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Ernest Nested Sampler — ernest_sampler","text":"x, invisibly.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampler.html","id":"method-calculate-","dir":"Reference","previous_headings":"","what":"Method calculate()","title":"Ernest Nested Sampler — ernest_sampler","text":"Calculate marginal likelihood given model return estimates tidy tibble().","code":""},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampler.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Ernest Nested Sampler — ernest_sampler","text":"","code":"ernest_sampler$calculate(   add_points = c(\"none\", \"unit\", \"parameter\", \"both\"),   add_progress = FALSE )"},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampler.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ernest Nested Sampler — ernest_sampler","text":"add_points string, either \"none\", \"unit\", \"parameter\", \"\". \"none\", additional columns added. \"unit\"\"parameter\", parameter values associated point added, respective units. \"\", unit parameter values added. add_progress Adds columns number calls likelihood function iteration.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampler.html","id":"method-glance-","dir":"Reference","previous_headings":"","what":"Method glance()","title":"Ernest Nested Sampler — ernest_sampler","text":"Glance ernest_sampler object.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampler.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Ernest Nested Sampler — ernest_sampler","text":"","code":"ernest_sampler$glance()"},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampler.html","id":"method-format-","dir":"Reference","previous_headings":"","what":"Method format()","title":"Ernest Nested Sampler — ernest_sampler","text":"Format ernest_sampler object","code":""},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampler.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Ernest Nested Sampler — ernest_sampler","text":"","code":"ernest_sampler$format(digits = getOption(\"digits\"))"},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampler.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ernest Nested Sampler — ernest_sampler","text":"digits number digits display","code":""},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampler.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Ernest Nested Sampler — ernest_sampler","text":"Print ernest_sampler object","code":""},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampler.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Ernest Nested Sampler — ernest_sampler","text":"","code":"ernest_sampler$print(...)"},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampler.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ernest Nested Sampler — ernest_sampler","text":"... Arguments forwarded format()","code":""},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampler.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Ernest Nested Sampler — ernest_sampler","text":"objects class cloneable method.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampler.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Ernest Nested Sampler — ernest_sampler","text":"","code":"ernest_sampler$clone(deep = FALSE)"},{"path":"https://kylesnap.github.io/ernest/reference/ernest_sampler.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ernest Nested Sampler — ernest_sampler","text":"deep Whether make deep clone.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/generate.ernest_sampler.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Samples from Nested Sampling — generate.ernest_sampler","title":"Generate Samples from Nested Sampling — generate.ernest_sampler","text":"Use function perform nested sampling given criterion met. Calling generate() implicitly calls compile() ensure sampler object valid running samples.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/generate.ernest_sampler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Samples from Nested Sampling — generate.ernest_sampler","text":"","code":"# S3 method for class 'ernest_sampler' generate(   x,   max_iterations = Inf,   max_calls = Inf,   min_logz = 0.05,   refresh = FALSE,   ... )"},{"path":"https://kylesnap.github.io/ernest/reference/generate.ernest_sampler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Samples from Nested Sampling — generate.ernest_sampler","text":"x object class ernest_sampler. max_iterations maximum number iterations perform. set Inf, stopping criterion ignored. max_calls maximum number calls likelihood function. set Inf, stopping criterion ignored. min_logz minimum log-evidence value achieve. Must number strictly larger zero. refresh Whether clear existing points sampler, starting run scratch. ... Must empty.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/generate.ernest_sampler.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Samples from Nested Sampling — generate.ernest_sampler","text":"x, invisibly.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/glance.ernest_sampler.html","id":null,"dir":"Reference","previous_headings":"","what":"Glance at an ernest_sampler object — glance.ernest_sampler","title":"Glance at an ernest_sampler object — glance.ernest_sampler","text":"Construct single row summary given ernest run object","code":""},{"path":"https://kylesnap.github.io/ernest/reference/glance.ernest_sampler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Glance at an ernest_sampler object — glance.ernest_sampler","text":"","code":"# S3 method for class 'ernest_sampler' glance(x, ...)"},{"path":"https://kylesnap.github.io/ernest/reference/glance.ernest_sampler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Glance at an ernest_sampler object — glance.ernest_sampler","text":"x ernest_sampler object ... Must left empty.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/glance.ernest_sampler.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Glance at an ernest_sampler object — glance.ernest_sampler","text":"single-row tibble::tibble() summarizing run.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/lrps.html","id":null,"dir":"Reference","previous_headings":"","what":"Likelihood-Restricted Prior Samplers (LRPS) — lrps","title":"Likelihood-Restricted Prior Samplers (LRPS) — lrps","text":"Set nested sampling run specifying likelihood- restricted prior sampling method. unif_cube() region-based sampler, points generated sampling uniformly within unit hypercube, returning point sampled point exceeds  prior likelihood constraint sample randomly prior reject point likelihood constraint fulfilled. method horribly inefficient even moderately-large dimensions, useful testing debugging. rwmh_cube MCMC-based sampler, points generated taking random steps within unit hypercube. step size evolve walk target acceptance rate 0.5.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/lrps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Likelihood-Restricted Prior Samplers (LRPS) — lrps","text":"","code":"unif_cube(max_loop = NULL)  rwmh_cube(steps = 25, target_acceptance = 0.5, epsilon = 1)"},{"path":"https://kylesnap.github.io/ernest/reference/lrps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Likelihood-Restricted Prior Samplers (LRPS) — lrps","text":"max_loop maximum number calls likelihood function sampler make trying propose new point given one likelihood constraint. exceeded, ernest abort report error user. non-null, overwrites ernest.max_loop global option (default 1e6L). steps Number steps take generating proposal point. target_acceptance targeted acceptance ratio sampling. epsilon adjusted throughout run target ratio. epsilon Step-size parameter, adjusted course run.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/lrps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Likelihood-Restricted Prior Samplers (LRPS) — lrps","text":"ErnestLRPS object can passed nested_sampling()","code":""},{"path":"https://kylesnap.github.io/ernest/reference/lrps.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Likelihood-Restricted Prior Samplers (LRPS) — lrps","text":"Nested sampling relies generating independent live points prior space satisfy minimum likelihood value restriction. many ways perform likelihood restricted prior sampling, ernest currently offers two foundational examples: simple region-based sampler uniform_cube, local-step algorithm rwmh_cube.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/nested_sampling.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a Nested Sampler — nested_sampling","title":"Build a Nested Sampler — nested_sampling","text":"top-level function constructs instance ErnestSampler, containing necessary information nested sampling. Currently, nested_sampling relies user specify R functions log-likelihood prior transform.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/nested_sampling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a Nested Sampler — nested_sampling","text":"","code":"nested_sampling(x, ...)  # Default S3 method nested_sampling(x, ...)  # S3 method for class '`function`' nested_sampling(   x,   prior_transform,   ptype,   sampler = rwmh_cube(),   n_points = 500,   update_interval = 1.5,   verbose = getOption(\"verbose\"),   ... )"},{"path":"https://kylesnap.github.io/ernest/reference/nested_sampling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a Nested Sampler — nested_sampling","text":"x Function returning log-likelihood given n_dim-length vector parameters. ... x function, must empty. prior_transform Function translating point unit cube prior parameter space. function accept n_dim-length vector points value range \\([0, 1]\\) return -length vector point represents parameter. ptype Either single integer, vector character strings giving variable names, zero-row tibble::tibble() defines name variable dimensionality prior space. sampler ernest_lrps object, list specifying given likelihood-restricted prior sampler. n_points Number live points use nested sampling run. Defaults 500L. update_interval Number likelihood calls performed updates sampler. Either integer double, case parameter cast integer first_update * n_points. verbose Whether print progress messages console. Defaults value getOption(\"verbose\").","code":""},{"path":"https://kylesnap.github.io/ernest/reference/nested_sampling.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build a Nested Sampler — nested_sampling","text":"ernest_sampler object.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/plot.ernest_sampler.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot an ernest_sampler object — plot.ernest_sampler","title":"Plot an ernest_sampler object — plot.ernest_sampler","text":"Use ggplot create plot evidence, importance weights, normalized likelihood values estimated volumes nested sampling run.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/plot.ernest_sampler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot an ernest_sampler object — plot.ernest_sampler","text":"","code":"# S3 method for class 'ernest_sampler' plot(x, exponentiate = TRUE, true_log_z = NULL, ...)"},{"path":"https://kylesnap.github.io/ernest/reference/plot.ernest_sampler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot an ernest_sampler object — plot.ernest_sampler","text":"x ernest_sampler object. exponentiate Whether transform log values plotting. Note volume estimates always plotted negative log units. true_log_z analytic evidence value log scale. ... Must left empty.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/plot.ernest_sampler.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot an ernest_sampler object — plot.ernest_sampler","text":"plot run's progress, made three stacked plots: Normalized likelihood values log volumes. importance weights log volumes. Model evidence log volumes, error envelope showing 1 2 standard deviations estimate.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. generics calculate, compile, generate, glance","code":""},{"path":"https://kylesnap.github.io/ernest/reference/variables.ernest_sampler.html","id":null,"dir":"Reference","previous_headings":"","what":"View, set, and count the variables in an ernest_sampler object — variables.ernest_sampler","title":"View, set, and count the variables in an ernest_sampler object — variables.ernest_sampler","text":"Read modify variable names within ernest_sampler object, count variables (.e., dimensionality nested sampling problem.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/variables.ernest_sampler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"View, set, and count the variables in an ernest_sampler object — variables.ernest_sampler","text":"","code":"# S3 method for class 'ernest_sampler' variables(x, ...)  # S3 method for class 'ernest_sampler' variables(x, ...) <- value  # S3 method for class 'ernest_sampler' set_variables(x, variables, ...)  # S3 method for class 'ernest_sampler' nvariables(x, ...)"},{"path":"https://kylesnap.github.io/ernest/reference/variables.ernest_sampler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"View, set, and count the variables in an ernest_sampler object — variables.ernest_sampler","text":"x ernest_sampler object. ... Must left empty. variables, value Either character vector empty tibble variable names, scalar value describing dimensions parameter space (case, variable names denoted X...).","code":""},{"path":"https://kylesnap.github.io/ernest/reference/variables.ernest_sampler.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"View, set, and count the variables in an ernest_sampler object — variables.ernest_sampler","text":"variables(), character vector variable names. variables<-() set_variables(), modified ernest_sampler object. nvariables(), scalar integer.","code":""},{"path":"https://kylesnap.github.io/ernest/reference/variables.ernest_sampler.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"View, set, and count the variables in an ernest_sampler object — variables.ernest_sampler","text":"ernest_sampler stores empty prototype tibble keep track variable names dimensionality sampled prior space. Overwriting number parameters within existing sampler supported.","code":""}]
