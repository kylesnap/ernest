// Generated by cpp11: do not edit by hand
// clang-format off


#include "cpp11/declarations.hpp"
#include <R_ext/Visibility.h>

// CubeImpl.cpp
cpp11::list CubeImpl(int n_dim, cpp11::function unit_log_fn, double criterion, int max_loop);
extern "C" SEXP _ernest_CubeImpl(SEXP n_dim, SEXP unit_log_fn, SEXP criterion, SEXP max_loop) {
  BEGIN_CPP11
    return cpp11::as_sexp(CubeImpl(cpp11::as_cpp<cpp11::decay_t<int>>(n_dim), cpp11::as_cpp<cpp11::decay_t<cpp11::function>>(unit_log_fn), cpp11::as_cpp<cpp11::decay_t<double>>(criterion), cpp11::as_cpp<cpp11::decay_t<int>>(max_loop)));
  END_CPP11
}
// EllipsoidImpl.cpp
cpp11::list EllipsoidImpl(cpp11::function unit_log_fn, double criterion, cpp11::doubles_matrix<> axes, cpp11::doubles loc, int max_loop);
extern "C" SEXP _ernest_EllipsoidImpl(SEXP unit_log_fn, SEXP criterion, SEXP axes, SEXP loc, SEXP max_loop) {
  BEGIN_CPP11
    return cpp11::as_sexp(EllipsoidImpl(cpp11::as_cpp<cpp11::decay_t<cpp11::function>>(unit_log_fn), cpp11::as_cpp<cpp11::decay_t<double>>(criterion), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles_matrix<>>>(axes), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(loc), cpp11::as_cpp<cpp11::decay_t<int>>(max_loop)));
  END_CPP11
}
// RandomWalkImpl.cpp
cpp11::list RandomWalkImpl(cpp11::doubles original, cpp11::function log_lik_fn, double criterion, int steps, double epsilon, cpp11::doubles_matrix<> chol_cov);
extern "C" SEXP _ernest_RandomWalkImpl(SEXP original, SEXP log_lik_fn, SEXP criterion, SEXP steps, SEXP epsilon, SEXP chol_cov) {
  BEGIN_CPP11
    return cpp11::as_sexp(RandomWalkImpl(cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(original), cpp11::as_cpp<cpp11::decay_t<cpp11::function>>(log_lik_fn), cpp11::as_cpp<cpp11::decay_t<double>>(criterion), cpp11::as_cpp<cpp11::decay_t<int>>(steps), cpp11::as_cpp<cpp11::decay_t<double>>(epsilon), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles_matrix<>>>(chol_cov)));
  END_CPP11
}
// test-random_vector.cpp
cpp11::doubles test_ellipsoid(cpp11::doubles_matrix<> axes);
extern "C" SEXP _ernest_test_ellipsoid(SEXP axes) {
  BEGIN_CPP11
    return cpp11::as_sexp(test_ellipsoid(cpp11::as_cpp<cpp11::decay_t<cpp11::doubles_matrix<>>>(axes)));
  END_CPP11
}
// utils.cpp
double logaddexp(double x, double y);
extern "C" SEXP _ernest_logaddexp(SEXP x, SEXP y) {
  BEGIN_CPP11
    return cpp11::as_sexp(logaddexp(cpp11::as_cpp<cpp11::decay_t<double>>(x), cpp11::as_cpp<cpp11::decay_t<double>>(y)));
  END_CPP11
}

extern "C" {
/* .Call calls */
extern SEXP run_testthat_tests(void *);

static const R_CallMethodDef CallEntries[] = {
    {"_ernest_CubeImpl",       (DL_FUNC) &_ernest_CubeImpl,       4},
    {"_ernest_EllipsoidImpl",  (DL_FUNC) &_ernest_EllipsoidImpl,  5},
    {"_ernest_RandomWalkImpl", (DL_FUNC) &_ernest_RandomWalkImpl, 6},
    {"_ernest_logaddexp",      (DL_FUNC) &_ernest_logaddexp,      2},
    {"_ernest_test_ellipsoid", (DL_FUNC) &_ernest_test_ellipsoid, 1},
    {"run_testthat_tests",     (DL_FUNC) &run_testthat_tests,     1},
    {NULL, NULL, 0}
};
}

extern "C" attribute_visible void R_init_ernest(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
  R_forceSymbols(dll, TRUE);
}
